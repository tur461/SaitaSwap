{"ast":null,"code":"var _jsxFileName = \"/home/user/Desktop/nm/SaitaSwap/src/pages/Trade/Exchange.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Container, Col, Tabs, Tab } from 'react-bootstrap';\nimport ConnectWallet from \"../../components/ConnectWallet/ConnectWallet\";\nimport CardCustom from \"../../components/cardCustom/CardCustom\";\nimport ButtonPrimary from \"../../components/Button/Button\";\nimport SelectCoin from \"../../components/selectCoin/SelectCoin\";\nimport SwapModal from \"../../components/SwapModal/SwapModal\";\nimport ArrowDown from \"../../assets/images/Arrow-Down-Icon.svg\";\nimport SettingIcon from \"../../assets/images/Settings-Icon.svg\";\nimport NIOBIcon from \"../../assets/images/NIOB-Token-Icon.svg\";\nimport BNBIcon from \"../../assets/images/token_icons/WBNB-Token-Icon.svg\";\nimport SwitchIcon from \"../../assets/images/Switch-Icon.svg\";\nimport ModalCurrency from \"../../components/Modal/ModalCurrency/ModalCurrency\";\nimport \"./Trade.scss\";\nimport SettingModal from \"../../components/Modal/SettingModal/SettingModal\";\nimport { MAIN_CONTRACT_LIST, TOKEN_LIST, WETH, LIQUIDITY_PROVIDER_FEE, USD } from '../../assets/tokens';\nimport defaultImg from \"../../assets/images/token_icons/default.svg\";\nimport { ContractServices } from \"../../services/ContractServices\";\nimport { toast } from '../../components/Toast/Toast';\nimport { ExchangeService } from \"../../services/ExchangeService\";\nimport { BigNumber } from \"bignumber.js\";\nimport { searchTokenByNameOrAddress, addTransaction, startLoading, stopLoading } from \"../../redux/actions\";\nimport Button from '../../components/Button/Button';\nimport RecentTransactions from \"../../components/RecentTransactions/RecentTransactions\";\nimport TransactionalModal from \"../../components/TransactionalModal/TransactionalModal\";\nimport iconTimer from \"../../assets/images/ionic-ios-timer.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Exchange = props => {\n  _s();\n\n  const [show, setShow] = useState(false);\n\n  const handleClose = () => setShow(false);\n\n  const handleShow = () => setShow(true);\n\n  const [show1, setShow1] = useState(false);\n\n  const handleClose1 = () => setShow1(false);\n\n  const handleShow1 = () => setShow1(true);\n\n  const [settingShow, setsettingShow] = useState(false);\n\n  const settingClose = () => setsettingShow(false);\n\n  const settinghandleShow = () => setsettingShow(true);\n\n  const [classToggle, setClassToggle] = useState(false);\n  const dispatch = useDispatch();\n  const isUserConnected = useSelector(state => state.persist.isUserConnected);\n  const tokenList = useSelector(state => state.persist.tokenList);\n  const deadline = useSelector(state => state.persist.deadline);\n  const slippagePercentage = useSelector(state => state.persist.slippagePercentage);\n  const [modalCurrency, setModalCurrency] = useState(false);\n  const [tokenOne, setTokenOne] = useState(TOKEN_LIST[0]);\n  const [tokenTwo, setTokenTwo] = useState({});\n  const [tokenOneValue, setTokenOneValue] = useState();\n  const [tokenTwoValue, setTokenTwoValue] = useState();\n  const [sharePoolValue, setSharePoolValue] = useState(100);\n  const [tokenOneCurrency, setCurrencyNameForTokenOne] = useState(TOKEN_LIST[0].symbol);\n  const [tokenTwoCurrency, setCurrencyNameForTokenTwo] = useState('Select a token');\n  const [tokenOneBalance, setTokenOneBalance] = useState(0);\n  const [tokenTwoBalance, setTokenTwoBalance] = useState(0);\n  const [tokenOneApproval, setTokenOneApproval] = useState(false);\n  const [tokenTwoApproval, setTokenTwoApproval] = useState(false);\n  const [tokenOneApproved, setTokenOneApproved] = useState(false);\n  const [tokenTwoApproved, setTokenTwoApproved] = useState(false);\n  const [lpTokenBalance, setLpTokenBalance] = useState(0);\n  const [tokenType, setTokenType] = useState('TK1');\n  const [showSupplyModal, setShowSupplyModal] = useState(false);\n  const [search, setSearch] = useState(\"\");\n  const [filteredTokenList, setFilteredTokenList] = useState([]);\n  const [liquidityConfirmation, setLiquidityConfirmation] = useState(false);\n  const [selectedCurrency, setSelectedCurrency] = useState('');\n  const [currentPairAddress, setCurrentPairAddress] = useState('');\n  const [firstProvider, setFirstProvider] = useState(false);\n  const [showPoolShare, setShowPoolShare] = useState(false);\n  const [showTransactionModal, setShowTransactionModal] = useState(false);\n  const [txHash, setTxHash] = useState('');\n  const [walletShow, setWalletShow] = useState(false);\n  const [showSettings, setShowSettings] = useState(false);\n  const [showRecent, setShowRecent] = useState(false);\n  const [slippageTolerance, setSlippageTolerance] = useState('');\n  const [amountIn, setAmountIn] = useState('');\n  const [isDisabled, setDisabled] = useState(true);\n  const [btnText, setBtnText] = useState('Enter an amount');\n  const [approvalConfirmation, setApprovalConfirmation] = useState(false);\n  const [openSwapModal, setSwapModal] = useState(false);\n  const [priceImpact, setPriceImpact] = useState('');\n  const [minimumReceived, setMinReceived] = useState(0);\n  const [existingPair, setPairAddress] = useState([]);\n  const [tokenOneIcon, setTokenOneIcon] = useState(TOKEN_LIST[0].icon);\n  const [tokenTwoIcon, setTokenTwoIcon] = useState(defaultImg);\n  const [max, setMax] = useState(true);\n  useEffect(() => {\n    setFilteredTokenList(tokenList.filter(token => token.name.toLowerCase().includes(search.toLowerCase())));\n    init();\n  }, [search, tokenList]);\n  useEffect(() => {\n    if (tokenOneValue) {\n      handleTokenValue(tokenOneValue, 'TK1');\n    }\n  }, [tokenTwo, tokenTwoCurrency, tokenTwoBalance, tokenTwoIcon]);\n\n  const init = async () => {\n    if (isUserConnected) {\n      const oneBalance = await ContractServices.getBNBBalance(isUserConnected);\n      setTokenOneBalance(oneBalance);\n    }\n  };\n\n  const onHandleOpenModal = tokenType => {\n    if (!isUserConnected) {\n      return toast.error('Connect wallet first!');\n    }\n\n    setFilteredTokenList(tokenList);\n    setSelectedCurrency(tokenType === 'TK1' ? tokenTwoCurrency : tokenOneCurrency);\n    setModalCurrency({\n      modalCurrency: true\n    });\n    setTokenType(tokenType);\n  };\n\n  const onHandleSelectCurrency = async (token, selecting) => {\n    const {\n      address,\n      symbol,\n      icon\n    } = token;\n\n    if (!isUserConnected) {\n      return toast.error('Connect wallet first!');\n    }\n\n    let a1,\n        a2,\n        oneBalance = 0,\n        twoBalance = 0;\n\n    if (selecting === 'TK1') {\n      a1 = address;\n\n      if (address === 'BNB') {\n        oneBalance = await ContractServices.getBNBBalance(isUserConnected);\n        setTokenOneApproved(true);\n      } else {\n        setTokenOneApproved(false);\n        oneBalance = await ContractServices.getTokenBalance(address, isUserConnected);\n      }\n\n      setTokenOne(token);\n      setCurrencyNameForTokenOne(symbol);\n      setTokenOneBalance(oneBalance);\n      setTokenOneIcon(icon);\n      setTokenOneValue(0.00);\n      setTokenTwoValue(0.00);\n      setMax(true);\n\n      if (tokenTwo.address) {\n        a2 = tokenTwo.address;\n      }\n\n      if (tokenOneValue > 0) {\n        const r = await getAllowance(tokenOneValue, 'TK1');\n      }\n    }\n\n    if (selecting === 'TK2') {\n      a2 = address;\n\n      if (address === 'BNB') {\n        setTokenTwoApproved(true);\n        twoBalance = await ContractServices.getBNBBalance(isUserConnected);\n      } else {\n        setTokenTwoApproved(false);\n        twoBalance = await ContractServices.getTokenBalance(address, isUserConnected);\n      }\n\n      setTokenTwo(token);\n      setCurrencyNameForTokenTwo(symbol);\n      setTokenTwoBalance(twoBalance);\n      setTokenTwoIcon(icon);\n      setTokenOneValue(0.00);\n      setTokenTwoValue(0.00);\n\n      if (tokenOne.address) {\n        a1 = tokenOne.address;\n      }\n\n      if (tokenTwoValue > 0) {\n        const r = await getAllowance(tokenTwoValue, 'TK2');\n      }\n    }\n\n    setModalCurrency(!modalCurrency);\n    setSearch('');\n    setFilteredTokenList(tokenList);\n\n    if (a1 && a2) {\n      let currentPairAddress;\n\n      if (a1 === 'BNB') {\n        a1 = WETH; //WETH\n\n        currentPairAddress = await ExchangeService.getPair(a1, a2);\n      } else if (a2 === 'BNB') {\n        a2 = WETH; //WETH\n\n        currentPairAddress = await ExchangeService.getPair(a1, a2);\n      } else {\n        currentPairAddress = await ExchangeService.getPair(a1, a2);\n      }\n\n      if (currentPairAddress !== '0x0000000000000000000000000000000000000000') {\n        setCurrentPairAddress(currentPairAddress);\n        const lpTokenBalance = await ContractServices.getTokenBalance(currentPairAddress, isUserConnected);\n        setLpTokenBalance(lpTokenBalance);\n        setFirstProvider(false);\n        setShowPoolShare(true);\n        setBtnText('Enter an amount');\n        setDisabled(true);\n      } else {\n        setCurrentPairAddress('');\n        setFirstProvider(true);\n        setShowPoolShare(true);\n        setLpTokenBalance(0);\n        setDisabled(true);\n        setBtnText('Insufficient liquidity for this trade.');\n      }\n    }\n  };\n\n  const getAllowance = async (amount, tokenType) => {\n    if (tokenType === 'TK1') {\n      if (isUserConnected && tokenOne.address !== 'BNB') {\n        let allowance = await ContractServices.allowanceToken(tokenOne.address, MAIN_CONTRACT_LIST.router.address, isUserConnected);\n        allowance = Number(allowance) / 10 ** Number(tokenOne.decimals); //  console.log(allowance, 'token 1')\n\n        if (amount > allowance) {\n          setTokenOneApproval(true);\n        } else {\n          setTokenOneApproved(true);\n        }\n      } else {\n        setTokenOneApproved(true);\n      }\n    }\n\n    if (tokenType === 'TK2') {\n      if (isUserConnected && tokenTwo.address !== 'BNB') {\n        let allowance = await ContractServices.allowanceToken(tokenTwo.address, MAIN_CONTRACT_LIST.router.address, isUserConnected);\n        allowance = Number(allowance) / 10 ** Number(tokenTwo.decimals); // console.log(allowance, 'token 2')\n\n        if (amount > allowance) {\n          setTokenTwoApproval(true);\n        } else {\n          setTokenTwoApproved(true);\n        }\n      } else {\n        setTokenTwoApproved(true);\n      }\n    }\n\n    return true;\n  };\n\n  const handleMaxBalance = async amountIn => {\n    if (!isUserConnected) {\n      return toast.error('Connect wallet first!');\n    }\n\n    if (tokenOne.address === 'BNB') {\n      // .002 BNB is reserved for saving gas fee \n      const bnbBalance = (await ContractServices.getBNBBalance(isUserConnected)) - 0.1;\n      handleTokenValue(bnbBalance, amountIn);\n      setMax(false);\n    } else {\n      // __ amount of particular token must be reserved for saving -needs to be fixed \n      const tokenBalance = await ContractServices.getTokenBalance(tokenOne.address, isUserConnected);\n      handleTokenValue(tokenBalance, amountIn);\n      setMax(false);\n    }\n  };\n\n  const checkPairWithBNBOrUSDT = async (token1, token2) => {\n    const pair1 = await ExchangeService.getPair(token1, WETH);\n    const pair2 = await ExchangeService.getPair(token2, WETH);\n\n    if (pair1 !== '0x0000000000000000000000000000000000000000' && pair2 !== '0x0000000000000000000000000000000000000000') {\n      return [token1, WETH, token2];\n    }\n\n    const pairOne = await ExchangeService.getPair(token1, USD);\n    const pairTwo = await ExchangeService.getPair(token2, USD);\n\n    if (pairOne !== '0x0000000000000000000000000000000000000000' && pairTwo !== '0x0000000000000000000000000000000000000000') {\n      return [token1, USD, token2];\n    }\n\n    return false;\n  };\n\n  const handleTokenValue = async (amount, tokenType) => {\n    try {\n      if (!isUserConnected) {\n        return;\n      }\n\n      const acc = await ContractServices.getDefaultAccount();\n\n      if (acc && acc.toLowerCase() !== isUserConnected.toLowerCase()) {\n        return toast.error('Wallet address doesn`t match!');\n      }\n\n      let add1ForPriceImpact, add2ForPriceImpact;\n\n      if (tokenType === 'TK1') {\n        setTokenOneValue(amount);\n\n        if (tokenTwoCurrency === 'Select a token') {\n          setBtnText('Select token');\n          return;\n        }\n\n        const balance = await checkTokenORCurrencyBalance(tokenOne.address);\n\n        if (amount > balance) {\n          setDisabled(true);\n          setBtnText(`Insufficient ${tokenOne.symbol} balance`);\n          return;\n        }\n\n        setDisabled(false);\n        const r = await getAllowance(amount, tokenType);\n\n        if (r && tokenOne.address && tokenTwo.address && amount > 0) {\n          let tokenTwoAddress = tokenTwo.address;\n          let tokenOneAddress = tokenOne.address;\n\n          if (tokenTwo.address === 'BNB') {\n            tokenTwoAddress = WETH;\n          }\n\n          if (tokenOne.address === 'BNB') {\n            tokenOneAddress = WETH;\n          }\n\n          let result;\n          let isPriceImpact = false;\n          const checkPair = await ExchangeService.getPair(tokenOneAddress, tokenTwoAddress);\n\n          if (checkPair !== '0x0000000000000000000000000000000000000000') {\n            result = await ExchangeService.getAmountsOut(amount, [tokenOneAddress, tokenTwoAddress]);\n            add1ForPriceImpact = tokenOneAddress;\n            add2ForPriceImpact = tokenTwoAddress;\n          } else {\n            const pair = await checkPairWithBNBOrUSDT(tokenOneAddress, tokenTwoAddress);\n\n            if (pair) {\n              result = await ExchangeService.getAmountsOut(amount, pair);\n              add1ForPriceImpact = pair[0];\n              add2ForPriceImpact = pair[1];\n              isPriceImpact = true;\n            }\n          }\n\n          if (result.length > 0) {\n            const a = Number(result[result.length - 1].toFixed(5));\n            const ratio = Number(amount) / Number(a);\n            setSharePoolValue(ratio.toFixed(10));\n            setTokenTwoValue(a);\n            setAmountIn(\"TK1\");\n            let amountOut = BigNumber(a * 10 ** tokenTwo.decimals).toFixed();\n            const minimumReceived = Number(amountOut) - Number(amountOut) * slippagePercentage / 100;\n            setMinReceived(minimumReceived);\n            calculatePriceImpact(tokenType, amount, add1ForPriceImpact, add2ForPriceImpact, isPriceImpact);\n          }\n        }\n      }\n\n      if (tokenType === 'TK2') {\n        setTokenTwoValue(amount);\n\n        if (tokenOneCurrency === 'Select a token') {\n          setBtnText('Select token');\n          return;\n        }\n\n        const balance = await checkTokenORCurrencyBalance(tokenTwo.address);\n\n        if (amount > balance) {\n          setDisabled(true);\n          setBtnText(`Insufficient ${tokenTwo.symbol} balance`);\n          return;\n        }\n\n        setDisabled(false);\n        const r = await getAllowance(amount, tokenType);\n\n        if (r && tokenOne.address && tokenTwo.address && amount > 0) {\n          let tokenTwoAddress = tokenTwo.address;\n          let tokenOneAddress = tokenOne.address;\n\n          if (tokenTwo.address === 'BNB') {\n            tokenTwoAddress = WETH;\n          }\n\n          if (tokenOne.address === 'BNB') {\n            tokenOneAddress = WETH;\n          }\n\n          let result;\n          let isPriceImpact = false;\n          const checkPair = await ExchangeService.getPair(tokenTwoAddress, tokenOneAddress);\n\n          if (checkPair !== '0x0000000000000000000000000000000000000000') {\n            result = await ExchangeService.getAmountsIn(amount, [tokenTwoAddress, tokenOneAddress]);\n            add1ForPriceImpact = tokenOneAddress;\n            add2ForPriceImpact = tokenTwoAddress;\n          } else {\n            const pair = await checkPairWithBNBOrUSDT(tokenTwoAddress, tokenOneAddress);\n\n            if (pair) {\n              result = await ExchangeService.getAmountsIn(amount, pair);\n              add1ForPriceImpact = pair[0];\n              add2ForPriceImpact = pair[1];\n              isPriceImpact = true;\n            }\n          }\n\n          if (result.length > 0) {\n            const a = Number(result[result.length - 1].toFixed(5));\n            setTokenOneValue(a);\n            const ratio = Number(amount) / Number(a);\n            setSharePoolValue(ratio.toFixed(10));\n            setAmountIn(\"TK2\");\n            let amountOut = BigNumber(a * 10 ** tokenTwo.decimals).toFixed();\n            const minimumReceived = Number(amountOut) - Number(amountOut) * slippagePercentage / 100;\n            setMinReceived(minimumReceived);\n            await calculatePriceImpact(tokenType, a, add2ForPriceImpact, add1ForPriceImpact, isPriceImpact);\n          }\n        }\n      }\n\n      if (tokenOne.address && tokenTwo.address) {\n        let a1 = add1ForPriceImpact,\n            a2 = add2ForPriceImpact;\n        let currentPairAddress;\n\n        if (a1 === 'BNB') {\n          a1 = WETH; //WETH\n\n          currentPairAddress = await ExchangeService.getPair(a1, a2);\n        } else if (a2 === 'BNB') {\n          a2 = WETH; //WETH\n\n          currentPairAddress = await ExchangeService.getPair(a1, a2);\n        } else {\n          currentPairAddress = await ExchangeService.getPair(a1, a2);\n        }\n\n        if (currentPairAddress !== '0x0000000000000000000000000000000000000000') {\n          setCurrentPairAddress(currentPairAddress);\n          const lpTokenBalance = await ContractServices.getTokenBalance(currentPairAddress, isUserConnected);\n          setLpTokenBalance(lpTokenBalance); //const reserves = await ExchangeService.getReserves(currentPairAddress);\n          //setSharePoolValue(ratio.toFixed(2));\n\n          setFirstProvider(false);\n          setShowPoolShare(true);\n          setDisabled(false);\n        } else {\n          setCurrentPairAddress('');\n          setFirstProvider(true);\n          setShowPoolShare(true);\n          setLpTokenBalance(0);\n          setDisabled(true);\n        }\n      }\n    } catch (e) {\n      console.log(e);\n      toast.error(\"Something went wrong!\");\n    }\n  };\n\n  const calculatePriceImpact = async (tokenType, amount, a1, a2, isPriceImpact) => {\n    let calPriceImpact;\n    let priceImpact;\n    const currentPairAddress = await ExchangeService.getPair(a1, a2);\n    const reserve = await ExchangeService.getReserves(currentPairAddress);\n    const tokenZero = await ExchangeService.getTokenZero(currentPairAddress);\n    const tokenOne = await ExchangeService.getTokenOne(currentPairAddress);\n    const decimalZero = await ContractServices.getDecimals(tokenZero);\n    const decimalOne = await ContractServices.getDecimals(tokenOne);\n\n    if (tokenZero.toLowerCase() === a1.toLowerCase()) {\n      const res = Number(reserve[0]) / 10 ** decimalZero;\n      calPriceImpact = amount / res * 100;\n      priceImpact = calPriceImpact - calPriceImpact * LIQUIDITY_PROVIDER_FEE / 100;\n\n      if (isPriceImpact) {\n        Number(priceImpact * 2);\n      }\n\n      setPriceImpact(priceImpact.toFixed(5));\n    }\n\n    if (tokenOne.toLowerCase() === a1.toLowerCase()) {\n      const res = Number(reserve[1]) / 10 ** decimalOne;\n      calPriceImpact = amount / res * 100;\n      priceImpact = calPriceImpact - calPriceImpact * LIQUIDITY_PROVIDER_FEE / 100;\n\n      if (isPriceImpact) {\n        Number(priceImpact * 2);\n      }\n\n      setPriceImpact(priceImpact.toFixed(5));\n    }\n  };\n\n  const handleSearchToken = async data => {\n    try {\n      const res = await dispatch(searchTokenByNameOrAddress(data));\n      setFilteredTokenList(res);\n    } catch (error) {\n      toast.error(\"Something went wrong!\");\n    }\n  };\n\n  const handleCloseSettings = () => setShowSettings(false);\n\n  const handleCloseRecent = () => setShowRecent(false);\n\n  const handleBalance = async () => {\n    const address = amountIn === 'TK1' ? tokenTwo.address : tokenOne.address;\n    let balance;\n\n    if (address === 'BNB') {\n      balance = await ContractServices.getBNBBalance(isUserConnected);\n    } else {\n      balance = await ContractServices.getTokenBalance(address, isUserConnected);\n    }\n\n    if (amountIn === 'TK1') {\n      setTokenTwoBalance(balance);\n    }\n\n    if (amountIn === 'TK2') {\n      setTokenOneBalance(balance);\n    }\n  };\n\n  const handleSwap = async () => {\n    const acc = await ContractServices.getDefaultAccount();\n\n    if (acc && acc.toLowerCase() !== isUserConnected.toLowerCase()) {\n      return toast.error('Wallet address doesn`t match!');\n    }\n\n    setSwapModal(false);\n    let value = 0,\n        checkBNBforTK1 = false,\n        checkBNBforTK2 = false;\n    let dl = Math.floor(new Date().getTime() / 1000);\n    dl = dl + deadline * 60;\n    let a1 = tokenOne.address,\n        a2 = tokenTwo.address;\n\n    if (tokenOne.address === 'BNB') {\n      a1 = WETH;\n      checkBNBforTK1 = true;\n      value = tokenOneValue;\n    }\n\n    if (tokenTwo.address === 'BNB') {\n      a2 = WETH;\n      checkBNBforTK2 = true;\n      value = tokenTwoValue;\n    }\n\n    if (value > 0) {\n      value = BigNumber(value * 10 ** 18).toFixed();\n    }\n\n    if (checkBNBforTK1) {\n      dispatch(startLoading());\n      const data = await handleBNBSwapForTK1(dl, value);\n\n      try {\n        const result = amountIn === 'TK1' ? await ExchangeService.swapExactETHForTokens(data, handleBalance) : await ExchangeService.swapETHForExactTokens(data);\n        dispatch(stopLoading());\n\n        if (result) {\n          setTxHash(result);\n          setShowTransactionModal(true);\n          setShowSupplyModal(false);\n          const data = {\n            message: `Swap ${tokenOne.symbol} and ${tokenTwo.symbol}`,\n            tx: result\n          };\n          dispatch(addTransaction(data));\n        }\n\n        setLiquidityConfirmation(false);\n      } catch (err) {\n        dispatch(stopLoading());\n        const message = await ContractServices.web3ErrorHandle(err);\n        toast.error(message);\n        setLiquidityConfirmation(false);\n      }\n    } else if (checkBNBforTK2) {\n      dispatch(startLoading());\n      const data = await handleBNBSwapForTK2(value);\n\n      try {\n        const result = amountIn === 'TK1' ? await ExchangeService.swapExactTokensForETH(data, a1, a2) : await ExchangeService.swapTokensForExactETH(data, a1, a2);\n        dispatch(stopLoading());\n\n        if (result) {\n          setTxHash(result);\n          setShowTransactionModal(true);\n          setShowSupplyModal(false);\n          const data = {\n            message: `Swap ${tokenOne.symbol} and ${tokenTwo.symbol}`,\n            tx: result\n          };\n          dispatch(addTransaction(data));\n        }\n\n        setLiquidityConfirmation(false);\n      } catch (err) {\n        dispatch(stopLoading());\n        const message = await ContractServices.web3ErrorHandle(err);\n        toast.error(message);\n        setLiquidityConfirmation(false);\n      }\n    } else {\n      dispatch(startLoading());\n      let pair;\n      const checkPair = await ExchangeService.getPair(a1, a2);\n\n      if (checkPair !== '0x0000000000000000000000000000000000000000') {\n        pair = [a1, a2];\n      } else {\n        const pairs = await checkPairWithBNBOrUSDT(a1, a2);\n\n        if (pairs) {\n          pair = pairs;\n        }\n      }\n\n      let data = await handleSwapAmoutnIn(value);\n      data.path = pair;\n\n      try {\n        const result = amountIn === 'TK1' ? await ExchangeService.swapExactTokensForTokens(data, a1, a2) : await ExchangeService.swapTokensForExactTokens(data, a1, a2);\n        dispatch(stopLoading());\n\n        if (result) {\n          setTxHash(result);\n          setShowTransactionModal(true);\n          setShowSupplyModal(false);\n          const data = {\n            message: `Swap ${tokenOne.symbol} and ${tokenTwo.symbol}`,\n            tx: result\n          };\n          dispatch(addTransaction(data));\n        }\n\n        setLiquidityConfirmation(false);\n      } catch (err) {\n        dispatch(stopLoading());\n        const message = await ContractServices.web3ErrorHandle(err);\n        toast.error(message);\n        setLiquidityConfirmation(false);\n      }\n    }\n  };\n\n  const handleSwapAmoutnIn = async value => {\n    let amountAMin;\n    let amountBMin;\n\n    if (amountIn == \"TK1\") {\n      let amountADesired = tokenOneValue * 10 ** tokenOne.decimals;\n      let amountBDesired = tokenTwoValue * 10 ** tokenTwo.decimals;\n      amountAMin = BigNumber(amountADesired).toFixed();\n      amountBMin = BigNumber(amountBDesired - amountBDesired * slippagePercentage / 100).toFixed();\n    }\n\n    if (amountIn == \"TK2\") {\n      let amountADesired = tokenOneValue * 10 ** tokenOne.decimals;\n      let amountBDesired = tokenTwoValue * 10 ** tokenTwo.decimals;\n      amountAMin = BigNumber(amountADesired).toFixed();\n      amountBMin = BigNumber(amountBDesired + amountBDesired * slippagePercentage / 100).toFixed();\n    }\n\n    let dl = Math.floor(new Date().getTime() / 1000);\n    dl = dl + deadline * 60;\n    return {\n      amountIn: amountAMin.toString(),\n      amountOutMin: amountBMin.toString(),\n      path: [tokenOne.address, tokenTwo.address],\n      to: isUserConnected,\n      deadline: dl,\n      value: value.toString()\n    };\n  };\n\n  const handleBNBSwapForTK1 = async (dl, value) => {\n    let amountOutMin;\n\n    if (amountIn === \"TK1\") {\n      let amountOut = BigNumber(Math.floor(tokenTwoValue * 10 ** tokenTwo.decimals)).toFixed();\n      amountOutMin = BigNumber(Math.floor(Number(amountOut) - Number(amountOut) * slippagePercentage / 100)).toFixed();\n      amountOutMin = amountOutMin.toString();\n    }\n\n    if (amountIn === \"TK2\") {\n      let amountOut = BigNumber(Math.floor(tokenOneValue * 10 ** tokenOne.decimals)).toFixed();\n      amountOutMin = BigNumber(Math.floor(amountOut)).toFixed();\n      amountOutMin = amountOutMin.toString();\n    }\n\n    return {\n      amountOutMin: amountOutMin.toString(),\n      path: [WETH, tokenTwo.address],\n      to: isUserConnected,\n      deadline: dl,\n      value\n    };\n  };\n\n  const handleBNBSwapForTK2 = async value => {\n    let dl = Math.floor(new Date().getTime() / 1000);\n    dl = dl + deadline * 60;\n\n    if (amountIn === \"TK1\") {\n      let amountOut = tokenTwoValue * 10 ** tokenOne.decimals;\n      let amountIn = BigNumber(Math.floor(tokenOneValue * 10 ** tokenOne.decimals)).toFixed();\n      let amountOutMin = BigNumber(Math.floor(amountOut - amountOut * slippagePercentage / 100)).toFixed(); // const amount = Math.floor(value);\n\n      return {\n        amountIn,\n        amountOutMin,\n        path: [tokenOne.address, WETH],\n        to: isUserConnected,\n        deadline: dl,\n        value\n      };\n    }\n\n    if (amountIn === \"TK2\") {\n      let amountIn = tokenTwoValue * 10 ** tokenTwo.decimals;\n      let amountOut = BigNumber(Math.floor(tokenOneValue * 10 ** tokenOne.decimals)).toFixed();\n      let amountInMax = BigNumber(Math.floor(amountIn + amountIn * slippagePercentage / 100)).toFixed(); // const amount = Math.floor(value);\n\n      return {\n        amountOut: amountOut.toString(),\n        amountInMax: amountInMax.toString(),\n        path: [tokenOne.address, WETH],\n        to: isUserConnected,\n        deadline: dl,\n        value\n      };\n    }\n  };\n\n  const handleSwitchCurrencies = () => {\n    setTokenOneValue(tokenTwoValue);\n    setTokenTwoValue(tokenOneValue);\n    setCurrencyNameForTokenOne(tokenTwoCurrency);\n    setCurrencyNameForTokenTwo(tokenOneCurrency);\n    setTokenOneBalance(tokenTwoBalance);\n    setTokenTwoBalance(tokenOneBalance);\n    setTokenOneIcon(tokenTwoIcon);\n    setTokenTwoIcon(tokenOneIcon);\n    setTokenOne(tokenTwo);\n    setTokenTwo(tokenOne);\n    amountIn == 'TK1' ? setAmountIn('TK2') : setAmountIn('TK1');\n  }; //call web3 approval function\n\n\n  const handleTokenApproval = async tokenType => {\n    if (approvalConfirmation) {\n      return toast.info('Token approval is processing');\n    } // const value = (2*256 - 1).toString();\n\n\n    const value = '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff';\n    let tokenAddress = 'BNB';\n\n    if (tokenType === 'TK1') {\n      tokenAddress = tokenOne.address;\n    }\n\n    if (tokenType === 'TK2') {\n      tokenAddress = tokenTwo.address;\n    }\n\n    try {\n      dispatch(startLoading());\n      const r = await ContractServices.approveToken(isUserConnected, value, MAIN_CONTRACT_LIST.router.address, tokenAddress);\n\n      if (r.code === 4001) {\n        toast.error(\"User denied transaction signature.\");\n      } else {\n        setApprovalConfirmation(true);\n        let data = {\n          message: `Approve`,\n          tx: r.transactionHash\n        };\n\n        if (tokenType === 'TK1') {\n          setTokenOneApproved(true);\n          setTokenOneApproval(false);\n          data.message = `Approve ${tokenOne.symbol}`;\n        }\n\n        if (tokenType === 'TK2') {\n          setTokenTwoApproved(true);\n          setTokenTwoApproval(false);\n          data.message = `Approve ${tokenTwo.symbol}`;\n        }\n\n        dispatch(addTransaction(data));\n        setApprovalConfirmation(false);\n      }\n\n      dispatch(stopLoading());\n    } catch (err) {\n      setApprovalConfirmation(false);\n      dispatch(stopLoading());\n      console.log(err);\n      toast.error('Transaction Reverted!');\n    }\n  };\n\n  const handleApprovalButton = tokenType => {\n    if (tokenOneApproval && tokenType === 'TK1') {\n      return /*#__PURE__*/_jsxDEV(Col, {\n        className: \"swapBtn_col\",\n        children: /*#__PURE__*/_jsxDEV(ButtonPrimary, {\n          className: \"swapBtn\",\n          title: `Approve ${tokenOne.symbol}`,\n          onClick: () => handleTokenApproval(tokenType),\n          disabled: approvalConfirmation\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 780,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 779,\n        columnNumber: 9\n      }, this);\n    }\n\n    if (tokenTwoApproval && tokenType === 'TK2') {\n      return /*#__PURE__*/_jsxDEV(Col, {\n        className: \"swapBtn_col\",\n        children: /*#__PURE__*/_jsxDEV(ButtonPrimary, {\n          className: \"swapBtn\",\n          title: `Approve ${tokenTwo.symbol}`,\n          onClick: () => handleTokenApproval(tokenType),\n          disabled: approvalConfirmation\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 788,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 787,\n        columnNumber: 15\n      }, this);\n    } //dead code\n\n\n    return null;\n  };\n\n  const closeTransactionModal = () => {\n    setShowTransactionModal(false); //props.backBtn();\n    //window.location.reload();\n  };\n\n  const checkTokenORCurrencyBalance = async address => {\n    if (address === 'BNB') {\n      return await ContractServices.getBNBBalance(isUserConnected);\n    } else {\n      return await ContractServices.getTokenBalance(address, isUserConnected);\n    }\n  };\n\n  const liquidityProviderFee = () => {\n    const value = amountIn === 'TK1' ? tokenOneValue : tokenTwoValue;\n    const tokenCurrency = amountIn === 'TK1' ? tokenOneCurrency : tokenTwoCurrency;\n    let lpf = value * 2 / 1000;\n    lpf = BigNumber(lpf).toFixed();\n    const calLpf = lpf + ' ' + tokenCurrency;\n    return calLpf;\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Container, {\n      fluid: true,\n      className: \"swapScreen comnSection\",\n      children: [/*#__PURE__*/_jsxDEV(CardCustom, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"settingSec\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Exchange\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 822,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"settingIcon\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: iconTimer,\n              onClick: () => setShowRecent(true),\n              className: \"timerImg\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 824,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              src: SettingIcon,\n              onClick: () => settinghandleShow(true)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 825,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 823,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 821,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(SelectCoin, {\n          label: `Balance: ${tokenOneBalance}`,\n          coinImage: tokenOne === null || tokenOne === void 0 ? void 0 : tokenOne.icon,\n          value: tokenOneCurrency,\n          onClick: () => onHandleOpenModal('TK1'),\n          inputLabel: \"Input\",\n          className: \"mb-0\",\n          placeholder: \"0.0\",\n          onChange: e => handleTokenValue(e.target.value, 'TK1'),\n          max: max,\n          onMax: () => handleMaxBalance('TK1'),\n          defaultValue: tokenOneValue\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 828,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"convert_plus\",\n          onClick: handleSwitchCurrencies,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: ArrowDown\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 842,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 841,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(SelectCoin, {\n          label: `Balance: ${tokenTwoBalance}`,\n          coinImage: tokenTwo === null || tokenTwo === void 0 ? void 0 : tokenTwo.icon,\n          value: tokenTwoCurrency,\n          onClick: () => onHandleOpenModal(\"TK2\"),\n          inputLabel: \"Input\",\n          className: \"mb-0\",\n          placeholder: \"0.0\",\n          onChange: e => handleTokenValue(e.target.value, 'TK2'),\n          max: false,\n          defaultValue: tokenTwoValue\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 844,\n          columnNumber: 11\n        }, this), slippagePercentage && /*#__PURE__*/_jsxDEV(Col, {\n          className: \"priceSec_col\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [!isDisabled && isUserConnected && /*#__PURE__*/_jsxDEV(\"h5\", {\n              children: \"Price\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 859,\n              columnNumber: 54\n            }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n              children: \"Slippage Tolerance\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 860,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 858,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-end\",\n            children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n              children: !isDisabled && isUserConnected && /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [sharePoolValue, \"  \", tokenOneCurrency, \" per \", tokenTwoCurrency]\n              }, void 0, true)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 863,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n              children: `${slippagePercentage}%`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 871,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 862,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 857,\n          columnNumber: 13\n        }, this), handleApprovalButton('TK1'), handleApprovalButton('TK2'), /*#__PURE__*/_jsxDEV(Col, {\n          className: \"swapBtn_col\",\n          children: [isDisabled && !isUserConnected && /*#__PURE__*/_jsxDEV(ButtonPrimary, {\n            className: \"swapBtn\",\n            onClick: () => setWalletShow(true),\n            title: 'Unlock Wallet'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 890,\n            columnNumber: 15\n          }, this), isDisabled && isUserConnected && /*#__PURE__*/_jsxDEV(ButtonPrimary, {\n            disabled: true,\n            className: \"swapBtn\",\n            title: btnText\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 894,\n            columnNumber: 49\n          }, this), !isDisabled && isUserConnected && /*#__PURE__*/_jsxDEV(ButtonPrimary, {\n            className: \"swapBtn\",\n            onClick: () => setSwapModal(!openSwapModal),\n            title: 'Swap'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 895,\n            columnNumber: 50\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 888,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 820,\n        columnNumber: 9\n      }, this), !isDisabled && isUserConnected && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card_style card_style_bottom\",\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"Minimum received:\", /*#__PURE__*/_jsxDEV(\"sapn\", {\n              children: minimumReceived / 10 ** 18\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 901,\n              columnNumber: 36\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 901,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"Price impact:\", /*#__PURE__*/_jsxDEV(\"sapn\", {\n              children: [priceImpact, \"%\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 902,\n              columnNumber: 32\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 902,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"Liquidity provider fee:\", /*#__PURE__*/_jsxDEV(\"sapn\", {\n              children: liquidityProviderFee()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 903,\n              columnNumber: 42\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 903,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 900,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 899,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 819,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ModalCurrency, {\n      show: modalCurrency,\n      handleShow: setModalCurrency,\n      handleClose: setModalCurrency,\n      tokenList: filteredTokenList,\n      selectCurrency: onHandleSelectCurrency,\n      searchToken: handleSearchToken,\n      searchByName: setSearch,\n      tokenType: tokenType,\n      handleOrder: setFilteredTokenList,\n      currencyName: selectedCurrency\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 907,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ConnectWallet, {\n      show: walletShow,\n      handleShow: handleShow1,\n      handleClose: handleClose1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 919,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SettingModal, {\n      show: settingShow,\n      handleShow: settinghandleShow,\n      handleClose: settingClose\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 924,\n      columnNumber: 7\n    }, this), openSwapModal && /*#__PURE__*/_jsxDEV(SwapModal, {\n      handleSwap: handleSwap,\n      closeModal: () => setSwapModal(!openSwapModal),\n      tokenOneCurrency: tokenOneCurrency,\n      tokenTwoCurrency: tokenTwoCurrency,\n      tokenOneValue: tokenOneValue,\n      tokenTwoValue: tokenTwoValue,\n      tokenOneIcon: tokenOne === null || tokenOne === void 0 ? void 0 : tokenOne.icon,\n      tokenTwoIcon: tokenTwo === null || tokenTwo === void 0 ? void 0 : tokenTwo.icon,\n      sharePoolValue: sharePoolValue,\n      priceImpact: priceImpact,\n      liquidityProviderFee: liquidityProviderFee(),\n      show: openSwapModal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 929,\n      columnNumber: 25\n    }, this), /*#__PURE__*/_jsxDEV(RecentTransactions, {\n      show: showRecent,\n      handleClose: handleCloseRecent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 943,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TransactionalModal, {\n      show: showTransactionModal,\n      handleClose: closeTransactionModal,\n      txHash: txHash\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 947,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Exchange, \"wEH49tbxDG0wbIEVWhDaGLhAnxU=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = Exchange;\nexport default Exchange;\n\nvar _c;\n\n$RefreshReg$(_c, \"Exchange\");","map":{"version":3,"sources":["/home/user/Desktop/nm/SaitaSwap/src/pages/Trade/Exchange.js"],"names":["React","useState","useEffect","useDispatch","useSelector","Container","Col","Tabs","Tab","ConnectWallet","CardCustom","ButtonPrimary","SelectCoin","SwapModal","ModalCurrency","SettingModal","MAIN_CONTRACT_LIST","TOKEN_LIST","WETH","LIQUIDITY_PROVIDER_FEE","USD","ContractServices","toast","ExchangeService","BigNumber","searchTokenByNameOrAddress","addTransaction","startLoading","stopLoading","Button","RecentTransactions","TransactionalModal","Exchange","props","show","setShow","handleClose","handleShow","show1","setShow1","handleClose1","handleShow1","settingShow","setsettingShow","settingClose","settinghandleShow","classToggle","setClassToggle","dispatch","isUserConnected","state","persist","tokenList","deadline","slippagePercentage","modalCurrency","setModalCurrency","tokenOne","setTokenOne","tokenTwo","setTokenTwo","tokenOneValue","setTokenOneValue","tokenTwoValue","setTokenTwoValue","sharePoolValue","setSharePoolValue","tokenOneCurrency","setCurrencyNameForTokenOne","symbol","tokenTwoCurrency","setCurrencyNameForTokenTwo","tokenOneBalance","setTokenOneBalance","tokenTwoBalance","setTokenTwoBalance","tokenOneApproval","setTokenOneApproval","tokenTwoApproval","setTokenTwoApproval","tokenOneApproved","setTokenOneApproved","tokenTwoApproved","setTokenTwoApproved","lpTokenBalance","setLpTokenBalance","tokenType","setTokenType","showSupplyModal","setShowSupplyModal","search","setSearch","filteredTokenList","setFilteredTokenList","liquidityConfirmation","setLiquidityConfirmation","selectedCurrency","setSelectedCurrency","currentPairAddress","setCurrentPairAddress","firstProvider","setFirstProvider","showPoolShare","setShowPoolShare","showTransactionModal","setShowTransactionModal","txHash","setTxHash","walletShow","setWalletShow","showSettings","setShowSettings","showRecent","setShowRecent","slippageTolerance","setSlippageTolerance","amountIn","setAmountIn","isDisabled","setDisabled","btnText","setBtnText","approvalConfirmation","setApprovalConfirmation","openSwapModal","setSwapModal","priceImpact","setPriceImpact","minimumReceived","setMinReceived","existingPair","setPairAddress","tokenOneIcon","setTokenOneIcon","icon","tokenTwoIcon","setTokenTwoIcon","defaultImg","max","setMax","filter","token","name","toLowerCase","includes","init","handleTokenValue","oneBalance","getBNBBalance","onHandleOpenModal","error","onHandleSelectCurrency","selecting","address","a1","a2","twoBalance","getTokenBalance","r","getAllowance","getPair","amount","allowance","allowanceToken","router","Number","decimals","handleMaxBalance","bnbBalance","tokenBalance","checkPairWithBNBOrUSDT","token1","token2","pair1","pair2","pairOne","pairTwo","acc","getDefaultAccount","add1ForPriceImpact","add2ForPriceImpact","balance","checkTokenORCurrencyBalance","tokenTwoAddress","tokenOneAddress","result","isPriceImpact","checkPair","getAmountsOut","pair","length","a","toFixed","ratio","amountOut","calculatePriceImpact","getAmountsIn","e","console","log","calPriceImpact","reserve","getReserves","tokenZero","getTokenZero","getTokenOne","decimalZero","getDecimals","decimalOne","res","handleSearchToken","data","handleCloseSettings","handleCloseRecent","handleBalance","handleSwap","value","checkBNBforTK1","checkBNBforTK2","dl","Math","floor","Date","getTime","handleBNBSwapForTK1","swapExactETHForTokens","swapETHForExactTokens","message","tx","err","web3ErrorHandle","handleBNBSwapForTK2","swapExactTokensForETH","swapTokensForExactETH","pairs","handleSwapAmoutnIn","path","swapExactTokensForTokens","swapTokensForExactTokens","amountAMin","amountBMin","amountADesired","amountBDesired","toString","amountOutMin","to","amountInMax","handleSwitchCurrencies","handleTokenApproval","info","tokenAddress","approveToken","code","transactionHash","handleApprovalButton","closeTransactionModal","liquidityProviderFee","tokenCurrency","lpf","calLpf","iconTimer","SettingIcon","target","ArrowDown"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Container, Col, Tabs, Tab } from 'react-bootstrap'\nimport ConnectWallet from \"../../components/ConnectWallet/ConnectWallet\";\nimport CardCustom from \"../../components/cardCustom/CardCustom\";\nimport ButtonPrimary from \"../../components/Button/Button\";\nimport SelectCoin from \"../../components/selectCoin/SelectCoin\";\nimport SwapModal from \"../../components/SwapModal/SwapModal\";\nimport ArrowDown from \"../../assets/images/Arrow-Down-Icon.svg\";\nimport SettingIcon from \"../../assets/images/Settings-Icon.svg\";\nimport NIOBIcon from \"../../assets/images/NIOB-Token-Icon.svg\";\nimport BNBIcon from \"../../assets/images/token_icons/WBNB-Token-Icon.svg\";\nimport SwitchIcon from \"../../assets/images/Switch-Icon.svg\";\nimport ModalCurrency from \"../../components/Modal/ModalCurrency/ModalCurrency\";\nimport \"./Trade.scss\";\nimport SettingModal from \"../../components/Modal/SettingModal/SettingModal\";\nimport { MAIN_CONTRACT_LIST, TOKEN_LIST, WETH, LIQUIDITY_PROVIDER_FEE, USD } from '../../assets/tokens'\nimport defaultImg from '../../assets/images/token_icons/default.svg'\nimport { ContractServices } from \"../../services/ContractServices\"\nimport { toast } from '../../components/Toast/Toast';\nimport { ExchangeService } from \"../../services/ExchangeService\"\nimport { BigNumber } from \"bignumber.js\"\nimport { searchTokenByNameOrAddress, addTransaction, startLoading, stopLoading } from \"../../redux/actions\"\nimport Button from '../../components/Button/Button'\nimport RecentTransactions from \"../../components/RecentTransactions/RecentTransactions\";\nimport TransactionalModal from \"../../components/TransactionalModal/TransactionalModal\";\nimport iconTimer from '../../assets/images/ionic-ios-timer.svg'\n\nconst Exchange = (props) => {\n  const [show, setShow] = useState(false);\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n  const [show1, setShow1] = useState(false);\n  const handleClose1 = () => setShow1(false);\n  const handleShow1 = () => setShow1(true);\n  const [settingShow, setsettingShow] = useState(false);\n  const settingClose = () => setsettingShow(false);\n  const settinghandleShow = () => setsettingShow(true);\n  const [classToggle, setClassToggle] = useState(false);\n\n\n\n\n  const dispatch = useDispatch();\n\n  const isUserConnected = useSelector(state => state.persist.isUserConnected);\n  const tokenList = useSelector(state => state.persist.tokenList);\n  const deadline = useSelector(state => state.persist.deadline);\n  const slippagePercentage = useSelector(state => state.persist.slippagePercentage);\n\n  const [modalCurrency, setModalCurrency] = useState(false);\n  const [tokenOne, setTokenOne] = useState(TOKEN_LIST[0]);\n  const [tokenTwo, setTokenTwo] = useState({});\n  const [tokenOneValue, setTokenOneValue] = useState();\n  const [tokenTwoValue, setTokenTwoValue] = useState();\n  const [sharePoolValue, setSharePoolValue] = useState(100);\n  const [tokenOneCurrency, setCurrencyNameForTokenOne] = useState(TOKEN_LIST[0].symbol);\n  const [tokenTwoCurrency, setCurrencyNameForTokenTwo] = useState('Select a token');\n  const [tokenOneBalance, setTokenOneBalance] = useState(0);\n  const [tokenTwoBalance, setTokenTwoBalance] = useState(0);\n  const [tokenOneApproval, setTokenOneApproval] = useState(false);\n  const [tokenTwoApproval, setTokenTwoApproval] = useState(false);\n\n  const [tokenOneApproved, setTokenOneApproved] = useState(false);\n  const [tokenTwoApproved, setTokenTwoApproved] = useState(false);\n\n  const [lpTokenBalance, setLpTokenBalance] = useState(0);\n  const [tokenType, setTokenType] = useState('TK1');\n  const [showSupplyModal, setShowSupplyModal] = useState(false);\n\n  const [search, setSearch] = useState(\"\");\n  const [filteredTokenList, setFilteredTokenList] = useState([]);\n  const [liquidityConfirmation, setLiquidityConfirmation] = useState(false);\n\n  const [selectedCurrency, setSelectedCurrency] = useState('');\n\n  const [currentPairAddress, setCurrentPairAddress] = useState('');\n  const [firstProvider, setFirstProvider] = useState(false);\n  const [showPoolShare, setShowPoolShare] = useState(false);\n  const [showTransactionModal, setShowTransactionModal] = useState(false);\n  const [txHash, setTxHash] = useState('');\n  const [walletShow, setWalletShow] = useState(false);\n\n  const [showSettings, setShowSettings] = useState(false);\n  const [showRecent, setShowRecent] = useState(false);\n  const [slippageTolerance, setSlippageTolerance] = useState('');\n  const [amountIn, setAmountIn] = useState('');\n  const [isDisabled, setDisabled] = useState(true);\n  const [btnText, setBtnText] = useState('Enter an amount');\n  const [approvalConfirmation, setApprovalConfirmation] = useState(false);\n  const [openSwapModal, setSwapModal] = useState(false);\n  const [priceImpact, setPriceImpact] = useState('');\n  const [minimumReceived, setMinReceived] = useState(0);\n  const [existingPair, setPairAddress] = useState([]);\n  const [tokenOneIcon, setTokenOneIcon] = useState(TOKEN_LIST[0].icon);\n  const [tokenTwoIcon, setTokenTwoIcon] = useState(defaultImg);\n  const [max, setMax] = useState(true);\n\n  useEffect(() => {\n    setFilteredTokenList(tokenList.filter((token) => token.name.toLowerCase().includes(search.toLowerCase())));\n    init();\n  }, [search, tokenList]);\n\n  useEffect(() => {\n    if (tokenOneValue) {\n      handleTokenValue(tokenOneValue, 'TK1');\n    }\n  }, [tokenTwo, tokenTwoCurrency, tokenTwoBalance, tokenTwoIcon]);\n\n\n  const init = async () => {\n    if (isUserConnected) {\n      const oneBalance = await ContractServices.getBNBBalance(isUserConnected);\n      setTokenOneBalance(oneBalance);\n    }\n  };\n\n  const onHandleOpenModal = (tokenType) => {\n    if (!isUserConnected) {\n      return toast.error('Connect wallet first!');\n    }\n    setFilteredTokenList(tokenList);\n    setSelectedCurrency(tokenType === 'TK1' ? tokenTwoCurrency : tokenOneCurrency);\n    setModalCurrency({\n      modalCurrency: true,\n    });\n    setTokenType(tokenType);\n  }\n  const onHandleSelectCurrency = async (token, selecting) => {\n    const { address, symbol, icon } = token;\n    if (!isUserConnected) {\n      return toast.error('Connect wallet first!');\n    }\n    let a1, a2, oneBalance = 0, twoBalance = 0;\n    if (selecting === 'TK1') {\n      a1 = address;\n      if (address === 'BNB') {\n        oneBalance = await ContractServices.getBNBBalance(isUserConnected);\n        setTokenOneApproved(true);\n      } else {\n        setTokenOneApproved(false);\n        oneBalance = await ContractServices.getTokenBalance(address, isUserConnected);\n      }\n      setTokenOne(token);\n      setCurrencyNameForTokenOne(symbol);\n      setTokenOneBalance(oneBalance);\n      setTokenOneIcon(icon);\n      setTokenOneValue(0.00);\n      setTokenTwoValue(0.00);\n      setMax(true);\n      if (tokenTwo.address) {\n        a2 = tokenTwo.address;\n      }\n      if (tokenOneValue > 0) {\n        const r = await getAllowance(tokenOneValue, 'TK1');\n      }\n    }\n    if (selecting === 'TK2') {\n      a2 = address;\n      if (address === 'BNB') {\n        setTokenTwoApproved(true);\n        twoBalance = await ContractServices.getBNBBalance(isUserConnected);\n      } else {\n        setTokenTwoApproved(false);\n        twoBalance = await ContractServices.getTokenBalance(address, isUserConnected);\n      }\n      setTokenTwo(token);\n      setCurrencyNameForTokenTwo(symbol);\n      setTokenTwoBalance(twoBalance);\n      setTokenTwoIcon(icon);\n      setTokenOneValue(0.00);\n      setTokenTwoValue(0.00);\n      if (tokenOne.address) {\n        a1 = tokenOne.address;\n      }\n      if (tokenTwoValue > 0) {\n        const r = await getAllowance(tokenTwoValue, 'TK2');\n      }\n    }\n    setModalCurrency(!modalCurrency);\n    setSearch('');\n    setFilteredTokenList(tokenList);\n\n    if (a1 && a2) {\n      let currentPairAddress;\n      if (a1 === 'BNB') {\n        a1 = WETH;//WETH\n        currentPairAddress = await ExchangeService.getPair(a1, a2);\n      } else if (a2 === 'BNB') {\n        a2 = WETH;//WETH\n        currentPairAddress = await ExchangeService.getPair(a1, a2);\n      } else {\n        currentPairAddress = await ExchangeService.getPair(a1, a2);\n      }\n\n      if (currentPairAddress !== '0x0000000000000000000000000000000000000000') {\n        setCurrentPairAddress(currentPairAddress);\n        const lpTokenBalance = await ContractServices.getTokenBalance(currentPairAddress, isUserConnected);\n        setLpTokenBalance(lpTokenBalance);\n        setFirstProvider(false);\n        setShowPoolShare(true);\n        setBtnText('Enter an amount');\n        setDisabled(true);\n      } else {\n        setCurrentPairAddress('');\n        setFirstProvider(true);\n        setShowPoolShare(true);\n        setLpTokenBalance(0);\n        setDisabled(true);\n        setBtnText('Insufficient liquidity for this trade.');\n      }\n    }\n  }\n\n  const getAllowance = async (amount, tokenType) => {\n    if (tokenType === 'TK1') {\n      if (isUserConnected && tokenOne.address !== 'BNB') {\n        let allowance = await ContractServices.allowanceToken(tokenOne.address, MAIN_CONTRACT_LIST.router.address, isUserConnected);\n        allowance = Number(allowance) / 10 ** Number(tokenOne.decimals);\n        //  console.log(allowance, 'token 1')\n        if (amount > allowance) {\n          setTokenOneApproval(true);\n        } else {\n          setTokenOneApproved(true);\n        }\n\n      } else {\n        setTokenOneApproved(true);\n      }\n    }\n    if (tokenType === 'TK2') {\n      if (isUserConnected && tokenTwo.address !== 'BNB') {\n        let allowance = await ContractServices.allowanceToken(tokenTwo.address, MAIN_CONTRACT_LIST.router.address, isUserConnected);\n        allowance = Number(allowance) / 10 ** Number(tokenTwo.decimals);\n        // console.log(allowance, 'token 2')\n        if (amount > allowance) {\n          setTokenTwoApproval(true);\n        } else {\n          setTokenTwoApproved(true);\n        }\n      } else {\n        setTokenTwoApproved(true);\n      }\n    }\n    return true;\n  }\n  const handleMaxBalance = async (amountIn) => {\n    if (!isUserConnected) {\n      return toast.error('Connect wallet first!');\n    }\n    if (tokenOne.address === 'BNB') {\n      // .002 BNB is reserved for saving gas fee \n      const bnbBalance = await ContractServices.getBNBBalance(isUserConnected) - 0.1;\n      handleTokenValue(bnbBalance, amountIn);\n      setMax(false);\n    } else {\n      // __ amount of particular token must be reserved for saving -needs to be fixed \n      const tokenBalance = await ContractServices.getTokenBalance(tokenOne.address, isUserConnected);\n      handleTokenValue(tokenBalance, amountIn);\n      setMax(false);\n    }\n  }\n\n  const checkPairWithBNBOrUSDT = async (token1, token2) => {\n    const pair1 = await ExchangeService.getPair(token1, WETH);\n    const pair2 = await ExchangeService.getPair(token2, WETH);\n    if (pair1 !== '0x0000000000000000000000000000000000000000' && pair2 !== '0x0000000000000000000000000000000000000000') {\n      return [token1, WETH, token2];\n    }\n    const pairOne = await ExchangeService.getPair(token1, USD);\n    const pairTwo = await ExchangeService.getPair(token2, USD);\n    if (pairOne !== '0x0000000000000000000000000000000000000000' && pairTwo !== '0x0000000000000000000000000000000000000000') {\n      return [token1, USD, token2];\n    }\n    return false;\n  }\n\n  const handleTokenValue = async (amount, tokenType) => {\n    try {\n      if (!isUserConnected) {\n        return;\n      }\n      const acc = await ContractServices.getDefaultAccount();\n      if (acc && acc.toLowerCase() !== isUserConnected.toLowerCase()) {\n        return toast.error('Wallet address doesn`t match!');\n      }\n      let add1ForPriceImpact, add2ForPriceImpact;\n      if (tokenType === 'TK1') {\n        setTokenOneValue(amount);\n        if (tokenTwoCurrency === 'Select a token') {\n          setBtnText('Select token');\n          return;\n        }\n        const balance = await checkTokenORCurrencyBalance(tokenOne.address);\n        if (amount > balance) {\n          setDisabled(true);\n          setBtnText(`Insufficient ${tokenOne.symbol} balance`);\n          return;\n        }\n        setDisabled(false);\n        const r = await getAllowance(amount, tokenType);\n        if (r && tokenOne.address && tokenTwo.address && amount > 0) {\n          let tokenTwoAddress = tokenTwo.address;\n          let tokenOneAddress = tokenOne.address;\n\n          if (tokenTwo.address === 'BNB') {\n            tokenTwoAddress = WETH;\n          }\n          if (tokenOne.address === 'BNB') {\n            tokenOneAddress = WETH;\n\n          }\n          let result;\n          let isPriceImpact = false;\n          const checkPair = await ExchangeService.getPair(tokenOneAddress, tokenTwoAddress);\n          if (checkPair !== '0x0000000000000000000000000000000000000000') {\n            result = await ExchangeService.getAmountsOut(amount, [tokenOneAddress, tokenTwoAddress]);\n            add1ForPriceImpact = tokenOneAddress;\n            add2ForPriceImpact = tokenTwoAddress;\n          } else {\n            const pair = await checkPairWithBNBOrUSDT(tokenOneAddress, tokenTwoAddress);\n            if (pair) {\n              result = await ExchangeService.getAmountsOut(amount, pair);\n              add1ForPriceImpact = pair[0];\n              add2ForPriceImpact = pair[1];\n              isPriceImpact = true;\n            }\n          }\n          if (result.length > 0) {\n            const a = Number(result[result.length - 1].toFixed(5));\n            const ratio = Number(amount) / Number(a);\n            setSharePoolValue(ratio.toFixed(10));\n            setTokenTwoValue(a);\n            setAmountIn(\"TK1\");\n            let amountOut = BigNumber(a * 10 ** tokenTwo.decimals).toFixed();\n            const minimumReceived = Number(amountOut) - (Number(amountOut) * slippagePercentage / 100);\n            setMinReceived(minimumReceived);\n            calculatePriceImpact(tokenType, amount, add1ForPriceImpact, add2ForPriceImpact, isPriceImpact);\n          }\n        }\n      }\n      if (tokenType === 'TK2') {\n        setTokenTwoValue(amount);\n        if (tokenOneCurrency === 'Select a token') {\n          setBtnText('Select token');\n          return;\n        }\n        const balance = await checkTokenORCurrencyBalance(tokenTwo.address);\n        if (amount > balance) {\n          setDisabled(true);\n          setBtnText(`Insufficient ${tokenTwo.symbol} balance`);\n          return;\n        }\n        setDisabled(false);\n        const r = await getAllowance(amount, tokenType);\n        if (r && tokenOne.address && tokenTwo.address && amount > 0) {\n          let tokenTwoAddress = tokenTwo.address;\n          let tokenOneAddress = tokenOne.address;\n\n          if (tokenTwo.address === 'BNB') {\n            tokenTwoAddress = WETH;\n          }\n          if (tokenOne.address === 'BNB') {\n            tokenOneAddress = WETH;\n          }\n          let result;\n          let isPriceImpact = false;\n          const checkPair = await ExchangeService.getPair(tokenTwoAddress, tokenOneAddress);\n          if (checkPair !== '0x0000000000000000000000000000000000000000') {\n            result = await ExchangeService.getAmountsIn(amount, [tokenTwoAddress, tokenOneAddress]);\n            add1ForPriceImpact = tokenOneAddress;\n            add2ForPriceImpact = tokenTwoAddress;\n          } else {\n            const pair = await checkPairWithBNBOrUSDT(tokenTwoAddress, tokenOneAddress);\n            if (pair) {\n              result = await ExchangeService.getAmountsIn(amount, pair);\n              add1ForPriceImpact = pair[0];\n              add2ForPriceImpact = pair[1];\n              isPriceImpact = true;\n            }\n          }\n          if (result.length > 0) {\n            const a = Number(result[result.length - 1].toFixed(5));\n            setTokenOneValue(a);\n            const ratio = Number(amount) / Number(a);\n            setSharePoolValue(ratio.toFixed(10))\n            setAmountIn(\"TK2\");\n            let amountOut = BigNumber(a * 10 ** tokenTwo.decimals).toFixed();\n            const minimumReceived = Number(amountOut) - (Number(amountOut) * slippagePercentage / 100);\n            setMinReceived(minimumReceived);\n            await calculatePriceImpact(tokenType, a, add2ForPriceImpact, add1ForPriceImpact, isPriceImpact);\n          }\n        }\n      }\n      if (tokenOne.address && tokenTwo.address) {\n        let a1 = add1ForPriceImpact, a2 = add2ForPriceImpact;\n        let currentPairAddress;\n        if (a1 === 'BNB') {\n          a1 = WETH;//WETH\n          currentPairAddress = await ExchangeService.getPair(a1, a2);\n        } else if (a2 === 'BNB') {\n          a2 = WETH;//WETH\n          currentPairAddress = await ExchangeService.getPair(a1, a2);\n\n        } else {\n          currentPairAddress = await ExchangeService.getPair(a1, a2);\n        }\n        if (currentPairAddress !== '0x0000000000000000000000000000000000000000') {\n          setCurrentPairAddress(currentPairAddress);\n          const lpTokenBalance = await ContractServices.getTokenBalance(currentPairAddress, isUserConnected);\n          setLpTokenBalance(lpTokenBalance);\n          //const reserves = await ExchangeService.getReserves(currentPairAddress);\n          //setSharePoolValue(ratio.toFixed(2));\n          setFirstProvider(false);\n          setShowPoolShare(true);\n          setDisabled(false);\n        } else {\n          setCurrentPairAddress('');\n          setFirstProvider(true);\n          setShowPoolShare(true);\n          setLpTokenBalance(0);\n          setDisabled(true);\n        }\n      }\n\n    } catch (e) {\n      console.log(e);\n      toast.error(\"Something went wrong!\");\n    }\n  }\n\n  const calculatePriceImpact = async (tokenType, amount, a1, a2, isPriceImpact) => {\n    let calPriceImpact;\n    let priceImpact;\n\n    const currentPairAddress = await ExchangeService.getPair(a1, a2);\n    const reserve = await ExchangeService.getReserves(currentPairAddress);\n    const tokenZero = await ExchangeService.getTokenZero(currentPairAddress);\n    const tokenOne = await ExchangeService.getTokenOne(currentPairAddress);\n    const decimalZero = await ContractServices.getDecimals(tokenZero);\n    const decimalOne = await ContractServices.getDecimals(tokenOne);\n    if (tokenZero.toLowerCase() === a1.toLowerCase()) {\n      const res = Number(reserve[0]) / (10 ** decimalZero);\n\n      calPriceImpact = (amount / res) * 100;\n      priceImpact = (calPriceImpact - (calPriceImpact * LIQUIDITY_PROVIDER_FEE) / 100);\n      if (isPriceImpact) {\n        Number(priceImpact * 2);\n      }\n      setPriceImpact(priceImpact.toFixed(5));\n    }\n    if (tokenOne.toLowerCase() === a1.toLowerCase()) {\n      const res = Number(reserve[1]) / (10 ** decimalOne);\n\n      calPriceImpact = (amount / res) * 100;\n      priceImpact = (calPriceImpact - (calPriceImpact * LIQUIDITY_PROVIDER_FEE) / 100);\n      if (isPriceImpact) {\n        Number(priceImpact * 2);\n      }\n      setPriceImpact(priceImpact.toFixed(5));\n    }\n  }\n\n  const handleSearchToken = async (data) => {\n    try {\n      const res = await dispatch(searchTokenByNameOrAddress(data));\n      setFilteredTokenList(res);\n    } catch (error) {\n      toast.error(\"Something went wrong!\");\n    }\n  }\n  const handleCloseSettings = () => setShowSettings(false);\n  const handleCloseRecent = () => setShowRecent(false);\n  const handleBalance = async () => {\n    const address = amountIn === 'TK1' ? tokenTwo.address : tokenOne.address;\n\n    let balance;\n\n    if (address === 'BNB') {\n      balance = await ContractServices.getBNBBalance(isUserConnected);\n    } else {\n      balance = await ContractServices.getTokenBalance(address, isUserConnected);\n    }\n    if (amountIn === 'TK1') {\n      setTokenTwoBalance(balance);\n    }\n    if (amountIn === 'TK2') {\n      setTokenOneBalance(balance);\n    }\n  }\n  const handleSwap = async () => {\n    const acc = await ContractServices.getDefaultAccount();\n    if (acc && acc.toLowerCase() !== isUserConnected.toLowerCase()) {\n      return toast.error('Wallet address doesn`t match!');\n    }\n    setSwapModal(false);\n    let value = 0, checkBNBforTK1 = false, checkBNBforTK2 = false;\n\n    let dl = Math.floor((new Date()).getTime() / 1000);\n    dl = dl + (deadline * 60);\n\n    let a1 = tokenOne.address, a2 = tokenTwo.address;\n\n    if (tokenOne.address === 'BNB') {\n      a1 = WETH;\n      checkBNBforTK1 = true;\n      value = tokenOneValue;\n    }\n    if (tokenTwo.address === 'BNB') {\n      a2 = WETH;\n      checkBNBforTK2 = true;\n      value = tokenTwoValue;\n    }\n    if (value > 0) {\n      value = BigNumber(value * 10 ** 18).toFixed();\n    }\n    if (checkBNBforTK1) {\n      dispatch(startLoading());\n      const data = await handleBNBSwapForTK1(dl, value);\n      try {\n        const result = amountIn === 'TK1' ?\n\n          await ExchangeService.swapExactETHForTokens(data, handleBalance) :\n\n          await ExchangeService.swapETHForExactTokens(data);\n\n        dispatch(stopLoading());\n        if (result) {\n          setTxHash(result);\n          setShowTransactionModal(true);\n          setShowSupplyModal(false);\n\n\n          const data = {\n            message: `Swap ${tokenOne.symbol} and ${tokenTwo.symbol}`,\n            tx: result\n          };\n          dispatch(addTransaction(data));\n        }\n        setLiquidityConfirmation(false);\n\n      } catch (err) {\n        dispatch(stopLoading());\n        const message = await ContractServices.web3ErrorHandle(err);\n        toast.error(message);\n        setLiquidityConfirmation(false);\n      }\n    } else if (checkBNBforTK2) {\n      dispatch(startLoading());\n      const data = await handleBNBSwapForTK2(value);\n      try {\n        const result = amountIn === 'TK1' ?\n\n          await ExchangeService.swapExactTokensForETH(data, a1, a2) :\n\n          await ExchangeService.swapTokensForExactETH(data, a1, a2);\n\n        dispatch(stopLoading());\n\n        if (result) {\n          setTxHash(result);\n          setShowTransactionModal(true);\n          setShowSupplyModal(false);\n          const data = {\n            message: `Swap ${tokenOne.symbol} and ${tokenTwo.symbol}`,\n            tx: result\n          };\n          dispatch(addTransaction(data));\n        }\n        setLiquidityConfirmation(false);\n\n      } catch (err) {\n        dispatch(stopLoading());\n        const message = await ContractServices.web3ErrorHandle(err);\n        toast.error(message);\n        setLiquidityConfirmation(false);\n      }\n    } else {\n      dispatch(startLoading());\n      let pair;\n      const checkPair = await ExchangeService.getPair(a1, a2);\n\n      if (checkPair !== '0x0000000000000000000000000000000000000000') {\n        pair = [a1, a2];\n      } else {\n        const pairs = await checkPairWithBNBOrUSDT(a1, a2);\n        if (pairs) {\n          pair = pairs;\n        }\n      }\n      let data = await handleSwapAmoutnIn(value);\n      data.path = pair;\n      try {\n        const result = amountIn === 'TK1' ?\n\n          await ExchangeService.swapExactTokensForTokens(data, a1, a2) :\n\n          await ExchangeService.swapTokensForExactTokens(data, a1, a2);\n\n        dispatch(stopLoading());\n\n        if (result) {\n          setTxHash(result);\n          setShowTransactionModal(true);\n          setShowSupplyModal(false);\n\n          const data = {\n            message: `Swap ${tokenOne.symbol} and ${tokenTwo.symbol}`,\n            tx: result\n          };\n          dispatch(addTransaction(data));\n        }\n        setLiquidityConfirmation(false);\n\n      } catch (err) {\n        dispatch(stopLoading());\n        const message = await ContractServices.web3ErrorHandle(err);\n        toast.error(message);\n        setLiquidityConfirmation(false);\n      }\n    }\n  }\n\n  const handleSwapAmoutnIn = async (value) => {\n    let amountAMin;\n    let amountBMin;\n\n    if (amountIn == \"TK1\") {\n      let amountADesired = tokenOneValue * 10 ** tokenOne.decimals;\n      let amountBDesired = tokenTwoValue * 10 ** tokenTwo.decimals;\n\n      amountAMin = BigNumber(amountADesired).toFixed();\n      amountBMin = BigNumber(amountBDesired - (amountBDesired * slippagePercentage / 100)).toFixed();\n    }\n\n    if (amountIn == \"TK2\") {\n      let amountADesired = tokenOneValue * 10 ** tokenOne.decimals;\n      let amountBDesired = tokenTwoValue * 10 ** tokenTwo.decimals;\n\n      amountAMin = BigNumber(amountADesired).toFixed();\n      amountBMin = BigNumber(amountBDesired + (amountBDesired * slippagePercentage / 100)).toFixed();\n    }\n\n    let dl = Math.floor((new Date()).getTime() / 1000);\n    dl = dl + (deadline * 60);\n\n    return {\n      amountIn: amountAMin.toString(),\n      amountOutMin: amountBMin.toString(),\n      path: [tokenOne.address, tokenTwo.address],\n      to: isUserConnected,\n      deadline: dl,\n      value: value.toString()\n    };\n  }\n  const handleBNBSwapForTK1 = async (dl, value) => {\n    let amountOutMin;\n    if (amountIn === \"TK1\") {\n      let amountOut = BigNumber(Math.floor(tokenTwoValue * 10 ** tokenTwo.decimals)).toFixed();\n\n      amountOutMin = BigNumber(Math.floor(Number(amountOut) - (Number(amountOut) * slippagePercentage / 100))).toFixed();\n      amountOutMin = amountOutMin.toString();\n    }\n\n    if (amountIn === \"TK2\") {\n      let amountOut = BigNumber(Math.floor(tokenOneValue * 10 ** tokenOne.decimals)).toFixed();\n      amountOutMin = BigNumber(Math.floor(amountOut)).toFixed();\n      amountOutMin = amountOutMin.toString();\n    }\n\n\n    return {\n      amountOutMin: amountOutMin.toString(),\n      path: [WETH, tokenTwo.address],\n      to: isUserConnected,\n      deadline: dl,\n      value\n    };\n  }\n\n  const handleBNBSwapForTK2 = async (value) => {\n    let dl = Math.floor((new Date()).getTime() / 1000);\n    dl = dl + (deadline * 60);\n\n    if (amountIn === \"TK1\") {\n      let amountOut = tokenTwoValue * 10 ** tokenOne.decimals;\n      let amountIn = BigNumber(Math.floor(tokenOneValue * 10 ** tokenOne.decimals)).toFixed();\n      let amountOutMin = BigNumber(Math.floor(amountOut - (amountOut * slippagePercentage / 100))).toFixed();\n      // const amount = Math.floor(value);\n      return {\n        amountIn,\n        amountOutMin,\n        path: [tokenOne.address, WETH],\n        to: isUserConnected,\n        deadline: dl,\n        value\n      };\n    }\n\n    if (amountIn === \"TK2\") {\n      let amountIn = tokenTwoValue * 10 ** tokenTwo.decimals;\n      let amountOut = BigNumber(Math.floor(tokenOneValue * 10 ** tokenOne.decimals)).toFixed();\n      let amountInMax = BigNumber(Math.floor(amountIn + (amountIn * slippagePercentage / 100))).toFixed();\n      // const amount = Math.floor(value);\n      return {\n        amountOut: amountOut.toString(),\n        amountInMax: amountInMax.toString(),\n        path: [tokenOne.address, WETH],\n        to: isUserConnected,\n        deadline: dl,\n        value\n      };\n    }\n  }\n  const handleSwitchCurrencies = () => {\n    setTokenOneValue(tokenTwoValue);\n    setTokenTwoValue(tokenOneValue);\n    setCurrencyNameForTokenOne(tokenTwoCurrency);\n    setCurrencyNameForTokenTwo(tokenOneCurrency);\n    setTokenOneBalance(tokenTwoBalance);\n    setTokenTwoBalance(tokenOneBalance);\n    setTokenOneIcon(tokenTwoIcon);\n    setTokenTwoIcon(tokenOneIcon);\n    setTokenOne(tokenTwo);\n    setTokenTwo(tokenOne);\n    amountIn == 'TK1' ? setAmountIn('TK2') : setAmountIn('TK1');\n  }\n  //call web3 approval function\n  const handleTokenApproval = async (tokenType) => {\n    if (approvalConfirmation) {\n      return toast.info('Token approval is processing');\n    }\n    // const value = (2*256 - 1).toString();\n    const value = '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff';\n    let tokenAddress = 'BNB';\n    if (tokenType === 'TK1') {\n      tokenAddress = tokenOne.address;\n    }\n    if (tokenType === 'TK2') {\n      tokenAddress = tokenTwo.address;\n    }\n    try {\n      dispatch(startLoading());\n      const r = await ContractServices.approveToken(isUserConnected, value, MAIN_CONTRACT_LIST.router.address, tokenAddress);\n      if (r.code === 4001) {\n        toast.error(\"User denied transaction signature.\");\n      } else {\n        setApprovalConfirmation(true);\n        let data = {\n          message: `Approve`,\n          tx: r.transactionHash\n        };\n        if (tokenType === 'TK1') {\n          setTokenOneApproved(true);\n          setTokenOneApproval(false);\n\n          data.message = `Approve ${tokenOne.symbol}`;\n        }\n        if (tokenType === 'TK2') {\n          setTokenTwoApproved(true);\n          setTokenTwoApproval(false);\n          data.message = `Approve ${tokenTwo.symbol}`;\n        }\n        dispatch(addTransaction(data));\n        setApprovalConfirmation(false);\n\n      }\n      dispatch(stopLoading());\n    } catch (err) {\n      setApprovalConfirmation(false);\n      dispatch(stopLoading());\n      console.log(err);\n      toast.error('Transaction Reverted!');\n    }\n  }\n  const handleApprovalButton = (tokenType) => {\n    if (tokenOneApproval && tokenType === 'TK1') {\n      return (\n        <Col className=\"swapBtn_col\">\n          <ButtonPrimary\n            className=\"swapBtn\"\n            title={`Approve ${tokenOne.symbol}`}\n            onClick={() => handleTokenApproval(tokenType)} disabled={approvalConfirmation}\n          /></Col>);\n    }\n    if (tokenTwoApproval && tokenType === 'TK2') {\n      return (<Col className=\"swapBtn_col\">\n        <ButtonPrimary\n          className=\"swapBtn\"\n          title={`Approve ${tokenTwo.symbol}`}\n          onClick={() => handleTokenApproval(tokenType)} disabled={approvalConfirmation}\n        /></Col>);\n    }\n    //dead code\n    return null;\n  }\n  const closeTransactionModal = () => {\n    setShowTransactionModal(false);\n    //props.backBtn();\n    //window.location.reload();\n  }\n  const checkTokenORCurrencyBalance = async (address) => {\n    if (address === 'BNB') {\n      return await ContractServices.getBNBBalance(isUserConnected);\n    } else {\n      return await ContractServices.getTokenBalance(address, isUserConnected);\n    }\n  }\n  const liquidityProviderFee = () => {\n    const value = amountIn === 'TK1' ? tokenOneValue : tokenTwoValue;\n    const tokenCurrency = amountIn === 'TK1' ? tokenOneCurrency : tokenTwoCurrency;\n    let lpf = (value * 2) / 1000;\n    lpf = BigNumber(lpf).toFixed();\n    const calLpf = lpf + ' ' + tokenCurrency\n    return calLpf;\n  }\n  return (\n    <>\n      <Container fluid className=\"swapScreen comnSection\">\n        <CardCustom>\n          <div className=\"settingSec\">\n            <h4>Exchange</h4>\n            <div className=\"settingIcon\">\n              <img src={iconTimer} onClick={() => setShowRecent(true)} className=\"timerImg\" />\n              <img src={SettingIcon} onClick={() => settinghandleShow(true)} />\n            </div>\n          </div>\n          <SelectCoin\n            label={`Balance: ${tokenOneBalance}`}\n            coinImage={tokenOne?.icon}\n            value={tokenOneCurrency}\n            onClick={() => onHandleOpenModal('TK1')}\n            inputLabel=\"Input\"\n            className=\"mb-0\"\n            placeholder=\"0.0\"\n            onChange={(e) => handleTokenValue(e.target.value, 'TK1')}\n            max={max}\n            onMax={() => handleMaxBalance('TK1')}\n            defaultValue={tokenOneValue}\n          />\n          <div className=\"convert_plus\" onClick={handleSwitchCurrencies}>\n            <img src={ArrowDown} />\n          </div>\n          <SelectCoin\n            label={`Balance: ${tokenTwoBalance}`}\n            coinImage={tokenTwo?.icon}\n            value={tokenTwoCurrency}\n            onClick={() => onHandleOpenModal(\"TK2\")}\n            inputLabel=\"Input\"\n            className=\"mb-0\"\n            placeholder=\"0.0\"\n            onChange={(e) => handleTokenValue(e.target.value, 'TK2')}\n            max={false}\n            defaultValue={tokenTwoValue}\n          />\n          {slippagePercentage &&\n            <Col className=\"priceSec_col\">\n              <div>\n                {(!isDisabled && isUserConnected) && <h5>Price</h5>}\n                <h5>Slippage Tolerance</h5>\n              </div>\n              <div className=\"text-end\">\n                <h5>\n                  {(!isDisabled && isUserConnected) && <>{sharePoolValue}  {tokenOneCurrency} per {tokenTwoCurrency}</>}\n                  {/* <img\n                    src={SwitchIcon}\n                    alt=\"swap_icon\"\n                    className=\"ms-2\"\n                  /> */}\n                </h5>\n                <h5>{`${slippagePercentage}%`}</h5>\n              </div>\n            </Col>}\n          {handleApprovalButton('TK1')}\n          {handleApprovalButton('TK2')}\n          {/* <Col className=\"swapBtn_col\">\n            <ButtonPrimary\n              className=\"swapBtn\"\n              title=\"Approve\"\n              onClick={() => handleShow1(true)}\n            />\n            <ButtonPrimary\n              className=\"swapBtn dismissBtn\"\n              title=\"Dismiss\"\n              onClick={() => handleShow1(true)}\n            />\n          </Col> */}\n          <Col className=\"swapBtn_col\">\n            {(isDisabled && !isUserConnected) &&\n              <ButtonPrimary className=\"swapBtn\" onClick={() => setWalletShow(true)} title={'Unlock Wallet'} />}\n            {/* ******* delete below button while enabling swap ******* */}\n            {/* {<ButtonPrimary disabled className=\"swapBtn\" title={'Swap'} />} */}\n            {/* ******* uncomment both of the below buttons while enabling swap ******* */}\n            {(isDisabled && isUserConnected) && <ButtonPrimary disabled className=\"swapBtn\" title={btnText} />}\n            {(!isDisabled && isUserConnected) && <ButtonPrimary className=\"swapBtn\" onClick={() => setSwapModal(!openSwapModal)} title={'Swap'} />}\n          </Col>\n        </CardCustom>\n        {(!isDisabled && isUserConnected) &&\n          <div className=\"card_style card_style_bottom\">\n            <ul>\n              <li>Minimum received:<sapn>{minimumReceived / 10 ** 18}</sapn></li>\n              <li>Price impact:<sapn>{priceImpact}%</sapn></li>\n              <li>Liquidity provider fee:<sapn>{liquidityProviderFee()}</sapn></li>\n            </ul>\n          </div>}\n      </Container>\n      <ModalCurrency\n        show={modalCurrency}\n        handleShow={setModalCurrency}\n        handleClose={setModalCurrency}\n        tokenList={filteredTokenList}\n        selectCurrency={onHandleSelectCurrency}\n        searchToken={handleSearchToken}\n        searchByName={setSearch}\n        tokenType={tokenType}\n        handleOrder={setFilteredTokenList}\n        currencyName={selectedCurrency}\n      />\n      <ConnectWallet\n        show={walletShow}\n        handleShow={handleShow1}\n        handleClose={handleClose1}\n      />\n      <SettingModal\n        show={settingShow}\n        handleShow={settinghandleShow}\n        handleClose={settingClose}\n      />\n      {openSwapModal && <SwapModal\n        handleSwap={handleSwap}\n        closeModal={() => setSwapModal(!openSwapModal)}\n        tokenOneCurrency={tokenOneCurrency}\n        tokenTwoCurrency={tokenTwoCurrency}\n        tokenOneValue={tokenOneValue}\n        tokenTwoValue={tokenTwoValue}\n        tokenOneIcon={tokenOne?.icon}\n        tokenTwoIcon={tokenTwo?.icon}\n        sharePoolValue={sharePoolValue}\n        priceImpact={priceImpact}\n        liquidityProviderFee={liquidityProviderFee()}\n        show={openSwapModal}\n      />}\n      <RecentTransactions\n        show={showRecent}\n        handleClose={handleCloseRecent}\n      />\n      <TransactionalModal show={showTransactionModal} handleClose={closeTransactionModal} txHash={txHash} />\n    </>\n\n  );\n};\n\nexport default Exchange;\n"]},"metadata":{},"sourceType":"module"}