{"ast":null,"code":"var _jsxFileName = \"/home/user/Desktop/nm/SaitaSwap/src/components/GetLPToken/WithDrawLPToken.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Col, Row, Modal, Button, Form, InputGroup, FormControl } from 'react-bootstrap';\nimport './GetLPToken.scss';\nimport { FarmService } from '../../services/FarmService';\nimport { toast } from '../Toast/Toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst WithDrawLPToken = props => {\n  _s();\n\n  var _props$stakeData2, _props$stakeData2$lpT, _props$stakeData3, _props$stakeData4, _props$stakeData4$lpT;\n\n  const [symbolsArr] = useState([\"e\", \"E\", \"+\", \"-\"]);\n  const [niobWithdrawable, setNiob] = useState(0);\n  useEffect(() => {\n    var _props$stakeData;\n\n    if (props.isNiobWithdrawabe && (props === null || props === void 0 ? void 0 : (_props$stakeData = props.stakeData) === null || _props$stakeData === void 0 ? void 0 : _props$stakeData.isLocked)) init();\n  }, []);\n\n  const init = async () => {\n    const niob = await FarmService.getNiob(props.address);\n    setNiob(niob);\n  };\n\n  const checkIfAmountGreaterThanWithdrawable = (value, isLocked) => {\n    // console.log('oooo', props.farms.isLocked);\n    // if ( (props.isNiobWithdrawabe && props?.stakeData?.isLocked) && value > niobWithdrawable) {\n    // toast.error('Amount greater than withdrawable !')\n    // } else {\n    props.depositWithdraw('withdraw', isLocked); // }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    centered: true,\n    scrollable: true,\n    className: \"connect_wallet get_tokens\",\n    show: props.show,\n    onHide: props.closeStakeModal,\n    children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n      closeButton: true,\n      children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n        children: [\"Withdraw \", (_props$stakeData2 = props.stakeData) === null || _props$stakeData2 === void 0 ? void 0 : (_props$stakeData2$lpT = _props$stakeData2.lpTokenDetails) === null || _props$stakeData2$lpT === void 0 ? void 0 : _props$stakeData2$lpT.lpTokenName, \" Tokens\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          className: \"lp_tokens\",\n          children: /*#__PURE__*/_jsxDEV(Form, {\n            className: \"lptokn_area\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-end\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: (_props$stakeData3 = props.stakeData) === null || _props$stakeData3 === void 0 ? void 0 : _props$stakeData3.balance\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 39,\n                columnNumber: 53\n              }, this), \" \", (_props$stakeData4 = props.stakeData) === null || _props$stakeData4 === void 0 ? void 0 : (_props$stakeData4$lpT = _props$stakeData4.lpTokenDetails) === null || _props$stakeData4$lpT === void 0 ? void 0 : _props$stakeData4$lpT.lpTokenName, \" available\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 39,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(InputGroup, {\n              children: [/*#__PURE__*/_jsxDEV(FormControl, {\n                onKeyDown: evt => {\n                  symbolsArr.includes(evt.key) && evt.preventDefault();\n                },\n                type: \"number\",\n                id: \"search\",\n                autoCorrect: \"off\",\n                autoComplete: \"off\",\n                placeholder: \"0.0\",\n                minLength: 1,\n                maxLength: 79,\n                value: props.stakeValue,\n                onChange: e => props.handleStakeValue(e)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 43,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"action\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"token_name\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 56,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  onClick: () => props.setMaxValue(),\n                  className: \"max_btn cm_btn\",\n                  children: \"Max\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 57,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 55,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 42,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"confirmation\",\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                onClick: () => props.closeStakeModal(),\n                className: \"cancel_btn\",\n                children: \"Cancel\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 61,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                disabled: props.stakeConfirmation,\n                onClick: () => checkIfAmountGreaterThanWithdrawable(props.stakeValue, props.stakeData.isLocked),\n                className: \"cm_btn confirm\",\n                children: \"Confirm\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 63,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, this);\n};\n\n_s(WithDrawLPToken, \"/8HNAfT6AdRCz/DyGIpNfBtbW4o=\");\n\n_c = WithDrawLPToken;\nexport default WithDrawLPToken;\n\nvar _c;\n\n$RefreshReg$(_c, \"WithDrawLPToken\");","map":{"version":3,"sources":["/home/user/Desktop/nm/SaitaSwap/src/components/GetLPToken/WithDrawLPToken.js"],"names":["React","useEffect","useState","Col","Row","Modal","Button","Form","InputGroup","FormControl","FarmService","toast","WithDrawLPToken","props","symbolsArr","niobWithdrawable","setNiob","isNiobWithdrawabe","stakeData","isLocked","init","niob","getNiob","address","checkIfAmountGreaterThanWithdrawable","value","depositWithdraw","show","closeStakeModal","lpTokenDetails","lpTokenName","balance","evt","includes","key","preventDefault","stakeValue","e","handleStakeValue","setMaxValue","stakeConfirmation"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { Col, Row, Modal, Button, Form, InputGroup, FormControl } from 'react-bootstrap'\nimport './GetLPToken.scss'\nimport { FarmService } from '../../services/FarmService'\nimport { toast } from '../Toast/Toast'\n\n\nconst WithDrawLPToken = props => {\n    const [symbolsArr] = useState([\"e\", \"E\", \"+\", \"-\"]);\n    const [niobWithdrawable, setNiob] = useState(0);\n    useEffect(() => {\n        \n        if (props.isNiobWithdrawabe && props?.stakeData?.isLocked) init();\n    }, []);\n\n    const init = async () => {\n        const niob = await FarmService.getNiob(props.address);\n        setNiob(niob);\n    }\n\n    const checkIfAmountGreaterThanWithdrawable = (value, isLocked) => {\n        // console.log('oooo', props.farms.isLocked);\n        // if ( (props.isNiobWithdrawabe && props?.stakeData?.isLocked) && value > niobWithdrawable) {\n            // toast.error('Amount greater than withdrawable !')\n        // } else {\n            props.depositWithdraw('withdraw', isLocked);\n        // }\n    }\n\n    return (\n        <Modal centered scrollable={true} className=\"connect_wallet get_tokens\" show={props.show} onHide={props.closeStakeModal}>\n            <Modal.Header closeButton>\n                <Modal.Title>Withdraw {props.stakeData?.lpTokenDetails?.lpTokenName} Tokens</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Row>\n                    <Col className=\"lp_tokens\">\n                        <Form className=\"lptokn_area\">\n                            <p className=\"text-end\"><span>{props.stakeData?.balance}</span> {props.stakeData?.lpTokenDetails?.lpTokenName} available</p>\n                            {/* {(props.isNiobWithdrawabe && props?.stakeData?.isLocked) &&\n                                <p className=\"text-end\"><span>{niobWithdrawable ? niobWithdrawable?.toFixed(4) : 0}</span> Withdrawable Niob</p>} */}\n                            <InputGroup>\n                                <FormControl\n                                    onKeyDown={(evt) => { symbolsArr.includes(evt.key) && evt.preventDefault() }}\n                                    type=\"number\"\n                                    id=\"search\"\n                                    autoCorrect=\"off\"\n                                    autoComplete=\"off\"\n                                    placeholder=\"0.0\"\n                                    minLength={1}\n                                    maxLength={79}\n                                    value={props.stakeValue}\n                                    onChange={(e) => props.handleStakeValue(e)}\n                                />\n                                <div className=\"action\">\n                                    <span className=\"token_name\"></span>\n                                    <Button onClick={() => props.setMaxValue()} className=\"max_btn cm_btn\">Max</Button>\n                                </div>\n                            </InputGroup>\n                            <div className=\"confirmation\">\n                                <Button onClick={() => props.closeStakeModal()} className=\"cancel_btn\">Cancel</Button>\n                                {/* <Button disabled={props.stakeConfirmation} onClick={() => props.depositWithdraw('withdraw')} className=\"cm_btn confirm\">Confirm</Button> */}\n                                <Button disabled={props.stakeConfirmation} onClick={() => checkIfAmountGreaterThanWithdrawable(props.stakeValue, props.stakeData.isLocked)} className=\"cm_btn confirm\">Confirm</Button>\n                            </div>\n                        </Form>\n                    </Col>\n                </Row>\n            </Modal.Body>\n        </Modal>\n    )\n}\n\nexport default WithDrawLPToken;\n"]},"metadata":{},"sourceType":"module"}