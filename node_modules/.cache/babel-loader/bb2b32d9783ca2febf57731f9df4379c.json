{"ast":null,"code":"// import Web3 from \"web3\"\nimport { MAIN_CONTRACT_LIST, WETH, BURN_ADDRESS, DEFLATIONNARY_TOKENS, TOKEN_LIST, pancakeFactory } from \"../assets/tokens\";\nimport { toast } from \"../components/Toast/Toast\";\nimport { ContractServices } from \"./ContractServices\";\nimport { BigNumber } from \"bignumber.js\";\n\nconst allPairs = async () => {\n  try {\n    const contract = await ContractServices.callContract(MAIN_CONTRACT_LIST.factory.address, MAIN_CONTRACT_LIST.factory.abi);\n    return await contract.methods.allPairs().call();\n  } catch (error) {\n    return error;\n  }\n};\n\nconst getPair = async (token1, token2) => {\n  try {\n    const contract = await ContractServices.callContract(MAIN_CONTRACT_LIST.factory.address, MAIN_CONTRACT_LIST.factory.abi);\n    return await contract.methods.getPair(token1, token2).call();\n  } catch (error) {\n    return error;\n  }\n};\n\nconst getPairFromPancakeFactory = async (token1, token2) => {\n  try {\n    const contract = await ContractServices.callContract(pancakeFactory, MAIN_CONTRACT_LIST.factory.abi);\n    return await contract.methods.getPair(token1, token2).call();\n  } catch (error) {\n    return error;\n  }\n};\n\nconst getTokenZero = async currentPairAddress => {\n  try {\n    const contract = await ContractServices.callContract(currentPairAddress, MAIN_CONTRACT_LIST.pair.abi);\n    return await contract.methods.token0().call();\n  } catch (error) {\n    return error;\n  }\n};\n\nconst getTokenOne = async currentPairAddress => {\n  try {\n    const contract = await ContractServices.callContract(currentPairAddress, MAIN_CONTRACT_LIST.pair.abi);\n    return await contract.methods.token1().call();\n  } catch (error) {\n    return error;\n  }\n};\n\nconst getAmountsOut = async (amountIn, pair) => {\n  try {\n    const decimals1 = await ContractServices.getDecimals(pair[0]);\n    const addAmountIn = amountIn * 10 ** decimals1;\n    let calAmount = BigNumber(addAmountIn).toFixed();\n    calAmount.toString();\n    let contract;\n\n    if (pair[0].toLowerCase() === TOKEN_LIST[1].address.toLowerCase() || pair[1].toLowerCase() === TOKEN_LIST[1].address.toLowerCase()) {\n      contract = await ContractServices.callContract(MAIN_CONTRACT_LIST.router.address, MAIN_CONTRACT_LIST.router.abi);\n    } else if ((pair[0].toLowerCase() === TOKEN_LIST[0].address.toLowerCase() || pair[0].toLowerCase() === TOKEN_LIST[2].address.toLowerCase()) && (pair[1].toLowerCase() === TOKEN_LIST[0].address.toLowerCase() || pair[1].toLowerCase() === TOKEN_LIST[2].address.toLowerCase())) {\n      contract = await ContractServices.callContract(MAIN_CONTRACT_LIST.router.address, MAIN_CONTRACT_LIST.router.abi);\n    } else {\n      contract = await ContractServices.callContract(MAIN_CONTRACT_LIST.panCakeRouter.address, MAIN_CONTRACT_LIST.router.abi);\n    }\n\n    const result = await contract.methods.getAmountsOut(calAmount, pair).call();\n    let pushArray = [];\n\n    for (let i = 0; i < result.length; i++) {\n      const decimals = await ContractServices.getDecimals(pair[i]);\n      const path = Number(result[i]) / 10 ** decimals;\n      pushArray.push(path);\n    }\n\n    return pushArray;\n  } catch (error) {\n    return error;\n  }\n};\n\nconst getAmountsIn = async (amountOut, pair) => {\n  try {\n    const decimals1 = await ContractServices.getDecimals(pair[0]);\n    const addAmountOut = amountOut * 10 ** decimals1;\n    let calAmount = BigNumber(addAmountOut).toFixed();\n    calAmount.toString();\n    let contract;\n\n    if (pair[0].toLowerCase() === TOKEN_LIST[1].address.toLowerCase() || pair[1].toLowerCase() === TOKEN_LIST[1].address.toLowerCase()) {\n      contract = await ContractServices.callContract(MAIN_CONTRACT_LIST.router.address, MAIN_CONTRACT_LIST.router.abi);\n    } else if ((pair[0].toLowerCase() === TOKEN_LIST[0].address.toLowerCase() || pair[0].toLowerCase() === TOKEN_LIST[2].address.toLowerCase()) && (pair[1].toLowerCase() === TOKEN_LIST[0].address.toLowerCase() || pair[1].toLowerCase() === TOKEN_LIST[2].address.toLowerCase())) {\n      contract = await ContractServices.callContract(MAIN_CONTRACT_LIST.router.address, MAIN_CONTRACT_LIST.router.abi);\n    } else {\n      contract = await ContractServices.callContract(MAIN_CONTRACT_LIST.panCakeRouter.address, MAIN_CONTRACT_LIST.router.abi);\n    }\n\n    const result = await contract.methods.getAmountsIn(calAmount, pair).call();\n    let pushArray = [];\n\n    for (let i = 0; i < result.length; i++) {\n      const decimals = await ContractServices.getDecimals(pair[i]);\n      const path = Number(result[i]) / 10 ** decimals;\n      pushArray.push(path);\n    }\n\n    return pushArray;\n  } catch (error) {\n    return error;\n  }\n};\n\nconst getReserves = async pairAddress => {\n  try {\n    const contract = await ContractServices.callContract(pairAddress, MAIN_CONTRACT_LIST.pair.abi);\n    return await contract.methods.getReserves().call();\n  } catch (error) {\n    return error;\n  }\n};\n\nconst getTotalSupply = async pairAddress => {\n  try {\n    const contract = await ContractServices.callContract(pairAddress, MAIN_CONTRACT_LIST.pair.abi);\n    const decimals = await contract.methods.decimals().call();\n    let result = await contract.methods.totalSupply().call();\n    result = (Number(result) / 10 ** decimals).toFixed(5);\n    return Number(result);\n  } catch (error) {\n    return error;\n  }\n};\n\nconst getTokenStaked = async pairAddress => {\n  try {\n    const contract = await ContractServices.callTokenContract(pairAddress);\n    const decimals = await contract.methods.decimals().call();\n    let result = await contract.methods.balanceOf(MAIN_CONTRACT_LIST.farm.address).call();\n    result = (Number(result) / 10 ** decimals).toFixed(5);\n    return Number(result);\n  } catch (error) {\n    console.log(\"Error:\", error);\n    return error;\n  }\n};\n\nconst getBurnedToken = async () => {\n  try {\n    const contract = await ContractServices.callTokenContract(MAIN_CONTRACT_LIST.anchorNew.address);\n\n    if (contract) {\n      const decimals = await contract.methods.decimals().call();\n      let result = await contract.methods.balanceOf(BURN_ADDRESS).call();\n      result = (Number(result) / 10 ** decimals).toFixed(2);\n      return Number(result);\n    }\n\n    return 0;\n  } catch (error) {\n    console.log(\"Error:\", error);\n    return error;\n  }\n};\n\nconst addLiquidity = async data => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      let {\n        tokenA,\n        tokenB,\n        amountADesired,\n        amountBDesired,\n        amountAMin,\n        amountBMin,\n        to,\n        deadline,\n        value\n      } = data;\n      const web3 = await ContractServices.callWeb3();\n      const contract = await ContractServices.callContract(MAIN_CONTRACT_LIST.router.address, MAIN_CONTRACT_LIST.router.abi);\n      const gasPrice = await ContractServices.calculateGasPrice();\n      const gas = await contract.methods.addLiquidity(tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin, to, deadline).estimateGas({\n        from: to\n      });\n      value = await web3.utils.toHex(value);\n      contract.methods.addLiquidity(tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin, to, deadline).send({\n        from: to,\n        gasPrice,\n        gas,\n        value\n      }).on('transactionHash', hash => {\n        resolve(hash);\n      }).on('receipt', receipt => {\n        toast.success('Liquidity added successfully.');\n      }).on('error', (error, receipt) => {\n        reject(error);\n      });\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\n\nconst addLiquidityETH = async data => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      let {\n        token,\n        amountTokenDesired,\n        amountTokenMin,\n        amountETHMin,\n        to,\n        deadline,\n        value\n      } = data;\n      const web3 = await ContractServices.callWeb3();\n      value = await web3.utils.toHex(value);\n      const contract = await ContractServices.callContract(MAIN_CONTRACT_LIST.router.address, MAIN_CONTRACT_LIST.router.abi);\n      const gasPrice = await ContractServices.calculateGasPrice(); // value = await web3.utils.toHex(value);\n\n      const gas = await contract.methods.addLiquidityETH(token, amountTokenDesired, amountTokenMin, amountETHMin, to, deadline).estimateGas({\n        from: to,\n        value\n      });\n      contract.methods.addLiquidityETH(token, amountTokenDesired, amountTokenMin, amountETHMin, to, deadline).send({\n        from: to,\n        gasPrice,\n        gas,\n        value\n      }).on('transactionHash', hash => {\n        resolve(hash);\n      }).on('receipt', receipt => {\n        toast.success('Liquidity added successfully.');\n      }).on('error', (error, receipt) => {\n        reject(error);\n      });\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\n\nconst removeLiquidityWithPermit = async data => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      let {\n        tokenA,\n        tokenB,\n        liquidity,\n        amountAMin,\n        amountBMin,\n        to,\n        deadline,\n        value,\n        approveMax,\n        v,\n        r,\n        s,\n        checkSignature\n      } = data;\n      const web3 = await ContractServices.callWeb3();\n      const contract = await ContractServices.callContract(MAIN_CONTRACT_LIST.router.address, MAIN_CONTRACT_LIST.router.abi);\n      const gasPrice = await ContractServices.calculateGasPrice();\n\n      if (checkSignature) {\n        const gas = await contract.methods.removeLiquidityWithPermit(tokenA, tokenB, liquidity, amountAMin, amountBMin, to, deadline, approveMax, v, r, s).estimateGas({\n          from: to\n        });\n        value = await web3.utils.toHex(value);\n        contract.methods.removeLiquidityWithPermit(tokenA, tokenB, liquidity, amountAMin, amountBMin, to, deadline, approveMax, v, r, s).send({\n          from: to,\n          gasPrice,\n          gas,\n          value\n        }).on('transactionHash', hash => {\n          resolve(hash);\n        }).on('receipt', receipt => {\n          console.log(receipt, 'in service add liquidity');\n          toast.success('Liquidity removed successfully.');\n        }).on('error', (error, receipt) => {\n          reject(error);\n        });\n      } else {\n        const gas = await contract.methods.removeLiquidity(tokenA, tokenB, liquidity, amountAMin, amountBMin, to, deadline).estimateGas({\n          from: to\n        });\n        value = await web3.utils.toHex(value);\n        contract.methods.removeLiquidity(tokenA, tokenB, liquidity, amountAMin, amountBMin, to, deadline).send({\n          from: to,\n          gasPrice,\n          gas,\n          value\n        }).on('transactionHash', hash => {\n          resolve(hash);\n        }).on('receipt', receipt => {\n          console.log(receipt, 'in service add liquidity');\n          toast.success('Liquidity removed successfully.');\n        }).on('error', (error, receipt) => {\n          reject(error);\n        });\n      }\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\n\nconst removeLiquidityETHWithPermit = async data => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      let {\n        token,\n        liquidity,\n        amountTokenMin,\n        amountETHMin,\n        to,\n        deadline,\n        value,\n        approveMax,\n        v,\n        r,\n        s,\n        checkSignature\n      } = data;\n      value = '0';\n      const contract = await ContractServices.callContract(MAIN_CONTRACT_LIST.router.address, MAIN_CONTRACT_LIST.router.abi);\n      const gasPrice = await ContractServices.calculateGasPrice();\n\n      if (checkSignature) {\n        // for Anchor Tokens\n        const supportingCheck = DEFLATIONNARY_TOKENS.find(ele => ele.toLowerCase() === token.toLowerCase());\n\n        if (supportingCheck) {\n          const gas = await contract.methods.removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(token, liquidity, amountTokenMin, amountETHMin, to, deadline, approveMax, v, r, s).estimateGas({\n            from: to,\n            value\n          });\n          contract.methods.removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(token, liquidity, amountTokenMin, amountETHMin, to, deadline, approveMax, v, r, s).send({\n            from: to,\n            gasPrice,\n            gas,\n            value\n          }).on('transactionHash', hash => {\n            resolve(hash);\n          }).on('receipt', receipt => {\n            console.log(receipt, 'in service add liquidity');\n            toast.success('Liquidity removed successfully.');\n          }).on('error', (error, receipt) => {\n            reject(error);\n          });\n        } else {\n          const gas = await contract.methods.removeLiquidityETHWithPermit(token, liquidity, amountTokenMin, amountETHMin, to, deadline, approveMax, v, r, s).estimateGas({\n            from: to,\n            value\n          });\n          contract.methods.removeLiquidityETHWithPermit(token, liquidity, amountTokenMin, amountETHMin, to, deadline, approveMax, v, r, s).send({\n            from: to,\n            gasPrice,\n            gas,\n            value\n          }).on('transactionHash', hash => {\n            resolve(hash);\n          }).on('receipt', receipt => {\n            console.log(receipt, 'in service add liquidity');\n            toast.success('Liquidity removed successfully.');\n          }).on('error', (error, receipt) => {\n            reject(error);\n          });\n        }\n      } else {\n        //without permit\n        // for Anchor Tokens\n        const supportingCheck = DEFLATIONNARY_TOKENS.find(ele => ele.toLowerCase() === token.toLowerCase());\n\n        if (supportingCheck) {\n          const gas = await contract.methods.removeLiquidityETHSupportingFeeOnTransferTokens(token, liquidity, amountTokenMin, amountETHMin, to, deadline).estimateGas({\n            from: to,\n            value\n          });\n          contract.methods.removeLiquidityETHSupportingFeeOnTransferTokens(token, liquidity, amountTokenMin, amountETHMin, to, deadline).send({\n            from: to,\n            gasPrice,\n            gas,\n            value\n          }).on('transactionHash', hash => {\n            resolve(hash);\n          }).on('receipt', receipt => {\n            console.log(receipt, 'in service add liquidity');\n            toast.success('Liquidity removed successfully.');\n          }).on('error', (error, receipt) => {\n            reject(error);\n          });\n        } else {\n          const gas = await contract.methods.removeLiquidityETH(token, liquidity, amountTokenMin, amountETHMin, to, deadline).estimateGas({\n            from: to,\n            value\n          });\n          contract.methods.removeLiquidityETH(token, liquidity, amountTokenMin, amountETHMin, to, deadline).send({\n            from: to,\n            gasPrice,\n            gas,\n            value\n          }).on('transactionHash', hash => {\n            resolve(hash);\n          }).on('receipt', receipt => {\n            console.log(receipt, 'in service add liquidity');\n            toast.success('Liquidity removed successfully.');\n          }).on('error', (error, receipt) => {\n            reject(error);\n          });\n        }\n      }\n    } catch (error) {\n      console.log('remove liquidity issue', '------------', error);\n      reject(error);\n    }\n  });\n};\n\nconst swapExactTokensForTokens = async (data, a1, a2) => {\n  return new Promise(async (resolve, reject) => {\n    let {\n      amountIn,\n      amountOutMin,\n      path,\n      to,\n      deadline,\n      value\n    } = data;\n    const web3 = await ContractServices.callWeb3();\n    const contract = await ContractServices.callContract(MAIN_CONTRACT_LIST.router.address, MAIN_CONTRACT_LIST.router.abi);\n    const gasPrice = await ContractServices.calculateGasPrice();\n    const checkDeflationnaryTokens = DEFLATIONNARY_TOKENS.find(element => element.toLowerCase() === a1.toLowerCase());\n\n    if (checkDeflationnaryTokens) {\n      try {\n        const gas = await contract.methods.swapExactTokensForTokensSupportingFeeOnTransferTokens(amountIn, amountOutMin, path, to, deadline).estimateGas({\n          from: to\n        });\n        value = await web3.utils.toHex(value);\n        contract.methods.swapExactTokensForTokensSupportingFeeOnTransferTokens(amountIn, amountOutMin, path, to, deadline).send({\n          from: to,\n          gasPrice,\n          gas,\n          value\n        }).on('transactionHash', hash => {\n          resolve(hash);\n        }).on('receipt', receipt => {\n          console.log(receipt, 'in service add liquidity');\n          toast.success('Swap transaction executed successfully');\n        }).on('error', (error, receipt) => {\n          reject(error);\n        });\n      } catch (error) {\n        reject(error);\n      }\n    } else {\n      try {\n        const gas = await contract.methods.swapExactTokensForTokens(amountIn, amountOutMin, path, to, deadline).estimateGas({\n          from: to\n        });\n        value = await web3.utils.toHex(value);\n        contract.methods.swapExactTokensForTokens(amountIn, amountOutMin, path, to, deadline).send({\n          from: to,\n          gasPrice,\n          gas,\n          value\n        }).on('transactionHash', hash => {\n          resolve(hash);\n        }).on('receipt', receipt => {\n          console.log(receipt, 'in service add liquidity');\n          toast.success('Swap transaction executed successfully');\n        }).on('error', (error, receipt) => {\n          reject(error);\n        });\n      } catch (error) {\n        reject(error);\n      }\n    }\n  });\n};\n\nconst swapTokensForExactTokens = async data => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      let {\n        amountIn,\n        amountOutMin,\n        path,\n        to,\n        deadline,\n        value\n      } = data;\n      const web3 = await ContractServices.callWeb3();\n      const contract = await ContractServices.callContract(MAIN_CONTRACT_LIST.router.address, MAIN_CONTRACT_LIST.router.abi);\n      const gasPrice = await ContractServices.calculateGasPrice();\n      const gas = await contract.methods.swapTokensForExactTokens(amountIn, amountOutMin, path, to, deadline).estimateGas({\n        from: to\n      });\n      value = await web3.utils.toHex(value);\n      contract.methods.swapTokensForExactTokens(amountIn, amountOutMin, path, to, deadline).send({\n        from: to,\n        gasPrice,\n        gas,\n        value\n      }).on('transactionHash', hash => {\n        resolve(hash);\n      }).on('receipt', receipt => {\n        console.log(receipt, 'in service add liquidity');\n        toast.success('Swap transaction executed successfully');\n      }).on('error', (error, receipt) => {\n        reject(error);\n      });\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\n\nconst swapExactETHForTokens = async (data, handleBalance) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      let {\n        amountOutMin,\n        path,\n        to,\n        deadline,\n        value\n      } = data;\n      const web3 = await ContractServices.callWeb3();\n      const contract = await ContractServices.callContract(MAIN_CONTRACT_LIST.router.address, MAIN_CONTRACT_LIST.router.abi);\n      const gasPrice = await ContractServices.calculateGasPrice();\n      const gas = await contract.methods.swapExactETHForTokens(amountOutMin, path, to, deadline).estimateGas({\n        from: to,\n        value\n      });\n      value = await web3.utils.toHex(value);\n      contract.methods.swapExactETHForTokens(amountOutMin, path, to, deadline).send({\n        from: to,\n        gasPrice,\n        gas,\n        value\n      }).on('transactionHash', hash => {\n        resolve(hash);\n      }).on('receipt', receipt => {\n        handleBalance();\n        toast.success('Swap transaction executed successfully');\n      }).on('error', (error, receipt) => {\n        reject(error);\n      });\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\n\nconst swapETHForExactTokens = async data => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      let {\n        amountOutMin,\n        path,\n        to,\n        deadline,\n        value\n      } = data;\n      const web3 = await ContractServices.callWeb3();\n      const contract = await ContractServices.callContract(MAIN_CONTRACT_LIST.router.address, MAIN_CONTRACT_LIST.router.abi);\n      const gasPrice = await ContractServices.calculateGasPrice();\n      value = await web3.utils.toHex(value);\n      console.log(\"Checking here:\", data);\n      const gas = await contract.methods.swapETHForExactTokens(amountOutMin, path, to, deadline).estimateGas({\n        from: to,\n        value\n      });\n      contract.methods.swapETHForExactTokens(amountOutMin, path, to, deadline).send({\n        from: to,\n        gasPrice,\n        gas,\n        value\n      }).on('transactionHash', hash => {\n        resolve(hash);\n      }).on('receipt', receipt => {\n        console.log(receipt, 'in service add liquidity');\n        toast.success('Swap transaction executed successfully');\n      }).on('error', (error, receipt) => {\n        reject(error);\n      });\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\n\nconst getPairNonces = async (pair, address) => {\n  try {\n    const contract = await ContractServices.callContract(pair, MAIN_CONTRACT_LIST.pair.abi);\n    return contract.methods.nonces(address).call();\n  } catch (err) {\n    return err;\n  }\n};\n\nconst signRemoveTransaction = async (d, pair) => {\n  try {\n    const {\n      owner,\n      spender,\n      deadline,\n      value\n    } = d;\n    const web3 = await ContractServices.callWeb3();\n    let chainId = await web3.currentProvider.chainId;\n    chainId = await web3.utils.hexToNumber(chainId);\n    const nonce = await getPairNonces(pair, owner);\n    const EIP712Domain = [{\n      name: 'name',\n      type: 'string'\n    }, {\n      name: 'version',\n      type: 'string'\n    }, {\n      name: 'chainId',\n      type: 'uint256'\n    }, {\n      name: 'verifyingContract',\n      type: 'address'\n    }];\n    const domain = {\n      name: 'NiobSwap LPs',\n      version: '1',\n      value,\n      chainId,\n      verifyingContract: pair\n    };\n    const Permit = [{\n      name: 'owner',\n      type: 'address'\n    }, {\n      name: 'spender',\n      type: 'address'\n    }, {\n      name: 'value',\n      type: 'uint256'\n    }, {\n      name: 'nonce',\n      type: 'uint256'\n    }, {\n      name: 'deadline',\n      type: 'uint256'\n    }];\n    const message = {\n      owner,\n      spender,\n      value,\n      nonce: web3.utils.toHex(nonce),\n      deadline\n    };\n    const data = JSON.stringify({\n      types: {\n        EIP712Domain,\n        Permit\n      },\n      domain,\n      primaryType: 'Permit',\n      message\n    }); //old function\n    // const res = await web3.currentProvider.send('eth_signTypedData_v4', [owner, data]);\n    // console.log(data, res, 'before---------------')\n\n    const from = owner;\n    const params = [from, data];\n    const method = 'eth_signTypedData_v4';\n    const res = await web3.currentProvider.request({\n      method,\n      params,\n      from\n    });\n\n    try {\n      return await splitSignature(res);\n    } catch (err) {\n      console.log('split signature error', err);\n      return err;\n    }\n  } catch (err) {\n    return err;\n  }\n}; ///////////////////////////////\n\n\nfunction isHexable(value) {\n  return !!value.toHexString;\n}\n\nfunction addSlice(array) {\n  if (array.slice) {\n    return array;\n  }\n\n  array.slice = function () {\n    const args = Array.prototype.slice.call(arguments);\n    return addSlice(Array.prototype.slice.apply(array, args));\n  };\n\n  return array;\n}\n\nfunction isBytesLike(value) {\n  return isHexString(value) && !(value.length % 2) || isBytes(value);\n}\n\nfunction isBytes(value) {\n  if (value == null) {\n    return false;\n  }\n\n  if (typeof value === \"string\") {\n    return false;\n  }\n\n  if (value.length == null) {\n    return false;\n  }\n\n  for (let i = 0; i < value.length; i++) {\n    const v = value[i];\n\n    if (typeof v !== \"number\" || v < 0 || v >= 256 || v % 1) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction arrayify(value, options) {\n  if (!options) {\n    options = {};\n  }\n\n  if (typeof value === \"number\") {\n    // throw new Error(value, \"invalid arrayify value\");\n    const result = [];\n\n    while (value) {\n      result.unshift(value & 0xff);\n      value = parseInt(String(value / 256));\n    }\n\n    if (result.length === 0) {\n      result.push(0);\n    }\n\n    return addSlice(result);\n  }\n\n  if (options.allowMissingPrefix && typeof value === \"string\" && value.substring(0, 2) !== \"0x\") {\n    value = \"0x\" + value;\n  }\n\n  if (isHexable(value)) {\n    value = value.toHexString();\n  }\n\n  if (isHexString(value)) {\n    let hex = value.substring(2);\n\n    if (hex.length % 2) {\n      if (options.hexPad === \"left\") {\n        hex = \"0x0\" + hex.substring(2);\n      } else if (options.hexPad === \"right\") {\n        hex += \"0\";\n      } else {\n        throw new Error(\"hex data is odd-length\", \"value\", value);\n      }\n    }\n\n    const result = [];\n\n    for (let i = 0; i < hex.length; i += 2) {\n      result.push(parseInt(hex.substring(i, i + 2), 16));\n    }\n\n    return addSlice(result);\n  }\n\n  if (isBytes(value)) {\n    return addSlice(value);\n  }\n\n  return new Error(\"invalid arrayify value\", \"value\", value);\n}\n\nfunction zeroPad(value, length) {\n  value = arrayify(value);\n\n  if (value.length > length) {\n    throw new Error(\"value out of range\", \"value\", arguments[0]);\n  }\n\n  const result = [length];\n  result.set(value, length - value.length);\n  return addSlice(result);\n}\n\nfunction isHexString(value, length) {\n  if (typeof value !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n    return false;\n  }\n\n  if (length && value.length !== 2 + 2 * length) {\n    return false;\n  }\n\n  return true;\n}\n\nconst HexCharacters = \"0123456789abcdef\";\n\nfunction hexlify(value, options) {\n  if (!options) {\n    options = {};\n  }\n\n  if (typeof value === \"number\") {\n    // logger.checkSafeUint53(value, \"invalid hexlify value\");\n    let hex = \"\";\n\n    while (value) {\n      hex = HexCharacters[value & 0xf] + hex;\n      value = Math.floor(value / 16);\n    }\n\n    if (hex.length) {\n      if (hex.length % 2) {\n        hex = \"0\" + hex;\n      }\n\n      return \"0x\" + hex;\n    }\n\n    return \"0x00\";\n  }\n\n  if (typeof value === \"bigint\") {\n    value = value.toString(16);\n\n    if (value.length % 2) {\n      return \"0x0\" + value;\n    }\n\n    return \"0x\" + value;\n  }\n\n  if (options.allowMissingPrefix && typeof value === \"string\" && value.substring(0, 2) !== \"0x\") {\n    value = \"0x\" + value;\n  }\n\n  if (isHexable(value)) {\n    return value.toHexString();\n  }\n\n  if (isHexString(value)) {\n    if (value.length % 2) {\n      if (options.hexPad === \"left\") {\n        value = \"0x0\" + value.toString().substring(2);\n      } else if (options.hexPad === \"right\") {\n        value += \"0\";\n      } else {\n        throw new Error(\"hex data is odd-length\", \"value\", value);\n      }\n    }\n\n    return value.toString().toLowerCase();\n  }\n\n  if (isBytes(value)) {\n    let result = \"0x\";\n\n    for (let i = 0; i < value.length; i++) {\n      let v = value[i];\n      result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];\n    }\n\n    return result;\n  }\n\n  return new Error(\"invalid hexlify value\", \"value\", value);\n}\n\nfunction hexZeroPad(value, length) {\n  if (typeof value !== \"string\") {\n    value = hexlify(value);\n  } else if (!isHexString(value)) {\n    throw new Error(\"invalid hex string\", \"value\", value);\n  }\n\n  if (value.length > 2 * length + 2) {\n    throw new Error(\"value out of range\", \"value\", arguments[1]);\n  }\n\n  while (value.length < 2 * length + 2) {\n    value = \"0x0\" + value.substring(2);\n  }\n\n  return value;\n}\n\nconst splitSignature = async signature => {\n  const result = {\n    r: \"0x\",\n    s: \"0x\",\n    _vs: \"0x\",\n    recoveryParam: 0,\n    v: 0\n  };\n\n  if (isBytesLike(signature)) {\n    const bytes = arrayify(signature);\n\n    if (bytes.length !== 65) {\n      throw new Error(\"invalid signature string; must be 65 bytes\", \"signature\", signature);\n    } // Get the r, s and v\n\n\n    result.r = hexlify(bytes.slice(0, 32));\n    result.s = hexlify(bytes.slice(32, 64));\n    result.v = bytes[64]; // Allow a recid to be used as the v\n\n    if (result.v < 27) {\n      if (result.v === 0 || result.v === 1) {\n        result.v += 27;\n      } else {\n        throw new Error(\"signature invalid v byte\", \"signature\", signature);\n      }\n    } // Compute recoveryParam from v\n\n\n    result.recoveryParam = 1 - result.v % 2; // Compute _vs from recoveryParam and s\n\n    if (result.recoveryParam) {\n      bytes[32] |= 0x80;\n    }\n\n    result._vs = hexlify(bytes.slice(32, 64));\n  } else {\n    result.r = signature.r;\n    result.s = signature.s;\n    result.v = signature.v;\n    result.recoveryParam = signature.recoveryParam;\n    result._vs = signature._vs; // If the _vs is available, use it to populate missing s, v and recoveryParam\n    // and verify non-missing s, v and recoveryParam\n\n    if (result._vs != null) {\n      const vs = zeroPad(arrayify(result._vs), 32);\n      result._vs = hexlify(vs); // Set or check the recid\n\n      const recoveryParam = vs[0] >= 128 ? 1 : 0;\n\n      if (result.recoveryParam == null) {\n        result.recoveryParam = recoveryParam;\n      } else if (result.recoveryParam !== recoveryParam) {\n        throw new Error(\"signature recoveryParam mismatch _vs\", \"signature\", signature);\n      } // Set or check the s\n\n\n      vs[0] &= 0x7f;\n      const s = hexlify(vs);\n\n      if (result.s == null) {\n        result.s = s;\n      } else if (result.s !== s) {\n        throw new Error(\"signature v mismatch _vs\", \"signature\", signature);\n      }\n    } // Use recid and v to populate each other\n\n\n    if (result.recoveryParam == null) {\n      if (result.v == null) {\n        throw new Error(\"signature missing v and recoveryParam\", \"signature\", signature);\n      } else if (result.v === 0 || result.v === 1) {\n        result.recoveryParam = result.v;\n      } else {\n        result.recoveryParam = 1 - result.v % 2;\n      }\n    } else {\n      if (result.v == null) {\n        result.v = 27 + result.recoveryParam;\n      } else if (result.recoveryParam !== 1 - result.v % 2) {\n        throw new Error(\"signature recoveryParam mismatch v\", \"signature\", signature);\n      }\n    }\n\n    if (result.r == null || !isHexString(result.r)) {\n      throw new Error(\"signature missing or invalid r\", \"signature\", signature);\n    } else {\n      result.r = hexZeroPad(result.r, 32);\n    }\n\n    if (result.s == null || !isHexString(result.s)) {\n      throw new Error(\"signature missing or invalid s\", \"signature\", signature);\n    } else {\n      result.s = hexZeroPad(result.s, 32);\n    }\n\n    const vs = arrayify(result.s);\n\n    if (vs[0] >= 128) {\n      throw new Error(\"signature s out of range\", \"signature\", signature);\n    }\n\n    if (result.recoveryParam) {\n      vs[0] |= 0x80;\n    }\n\n    const _vs = hexlify(vs);\n\n    if (result._vs) {\n      if (!isHexString(result._vs)) {\n        throw new Error(\"signature invalid _vs\", \"signature\", signature);\n      }\n\n      result._vs = hexZeroPad(result._vs, 32);\n    } // Set or check the _vs\n\n\n    if (result._vs == null) {\n      result._vs = _vs;\n    } else if (result._vs !== _vs) {\n      throw new Error(\"signature _vs mismatch v and s\", \"signature\", signature);\n    }\n  }\n\n  return result;\n};\n\nconst swapTokensForExactETH = async data => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      let {\n        amountOut,\n        amountInMax,\n        path,\n        to,\n        deadline,\n        value\n      } = data;\n      const web3 = await ContractServices.callWeb3();\n      const contract = await ContractServices.callContract(MAIN_CONTRACT_LIST.router.address, MAIN_CONTRACT_LIST.router.abi);\n      const gasPrice = await ContractServices.calculateGasPrice();\n      value = await web3.utils.toHex(value);\n      const gas = await contract.methods.swapTokensForExactETH(amountOut, amountInMax, path, to, deadline).estimateGas({\n        from: to\n      });\n      contract.methods.swapTokensForExactETH(amountOut, amountInMax, path, to, deadline).send({\n        from: to,\n        gasPrice,\n        gas\n      }).on('transactionHash', hash => {\n        resolve(hash);\n      }).on('receipt', receipt => {\n        console.log(receipt, 'in service add liquidity');\n        toast.success('Liquidity added successfully.');\n      }).on('error', (error, receipt) => {\n        reject(error);\n      });\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\n\nconst swapExactTokensForETH = async (data, a1, a2) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      let {\n        amountIn,\n        amountOutMin,\n        path,\n        to,\n        deadline,\n        value\n      } = data;\n      const web3 = await ContractServices.callWeb3();\n      const contract = await ContractServices.callContract(MAIN_CONTRACT_LIST.router.address, MAIN_CONTRACT_LIST.router.abi);\n      const gasPrice = await ContractServices.calculateGasPrice();\n      value = await web3.utils.toHex(value);\n      const checkDeflationnaryToken = DEFLATIONNARY_TOKENS.find(element => element.toLowerCase() == a1.toLowerCase());\n\n      if (checkDeflationnaryToken && a2.toLowerCase() === WETH.toLowerCase()) {\n        try {\n          const gas = await contract.methods.swapExactTokensForETHSupportingFeeOnTransferTokens(amountIn, amountOutMin, path, to, deadline).estimateGas({\n            from: to\n          });\n          contract.methods.swapExactTokensForETHSupportingFeeOnTransferTokens(amountIn, amountOutMin, path, to, deadline).send({\n            from: to,\n            gasPrice,\n            gas\n          }).on('transactionHash', hash => {\n            resolve(hash);\n          }).on('receipt', receipt => {\n            console.log(receipt, 'in service add liquidity');\n            toast.success('Liquidity added successfully.');\n          }).on('error', (error, receipt) => {\n            reject(error);\n          });\n        } catch (error) {\n          reject(error);\n        }\n      } else {\n        // console.log(\"HEREEEEEE ELSE:\", data);\n        try {\n          const gas = await contract.methods.swapExactTokensForETH(amountIn, amountOutMin, path, to, deadline).estimateGas({\n            from: to\n          });\n          contract.methods.swapExactTokensForETH(amountIn, amountOutMin, path, to, deadline).send({\n            from: to,\n            gasPrice,\n            gas\n          }).on('transactionHash', hash => {\n            resolve(hash);\n          }).on('receipt', receipt => {\n            console.log(receipt, 'in service add liquidity');\n            toast.success('Liquidity added successfully.');\n          }).on('error', (error, receipt) => {\n            reject(error);\n          });\n        } catch (error) {\n          reject(error);\n        }\n      }\n    } catch (error) {\n      reject(error);\n    }\n  });\n}; //exporting functions\n\n\nexport const ExchangeService = {\n  getPair,\n  getAmountsOut,\n  getReserves,\n  addLiquidity,\n  addLiquidityETH,\n  removeLiquidityWithPermit,\n  removeLiquidityETHWithPermit,\n  allPairs,\n  swapExactTokensForTokens,\n  swapTokensForExactTokens,\n  swapExactETHForTokens,\n  swapETHForExactTokens,\n  signRemoveTransaction,\n  swapTokensForExactETH,\n  swapExactTokensForETH,\n  getTokenZero,\n  getTokenOne,\n  getTotalSupply,\n  getTokenStaked,\n  getBurnedToken,\n  getAmountsIn,\n  getPairFromPancakeFactory\n};","map":{"version":3,"sources":["/home/user/Desktop/nm/SaitaSwap/src/services/ExchangeService.js"],"names":["MAIN_CONTRACT_LIST","WETH","BURN_ADDRESS","DEFLATIONNARY_TOKENS","TOKEN_LIST","pancakeFactory","toast","ContractServices","BigNumber","allPairs","contract","callContract","factory","address","abi","methods","call","error","getPair","token1","token2","getPairFromPancakeFactory","getTokenZero","currentPairAddress","pair","token0","getTokenOne","getAmountsOut","amountIn","decimals1","getDecimals","addAmountIn","calAmount","toFixed","toString","toLowerCase","router","panCakeRouter","result","pushArray","i","length","decimals","path","Number","push","getAmountsIn","amountOut","addAmountOut","getReserves","pairAddress","getTotalSupply","totalSupply","getTokenStaked","callTokenContract","balanceOf","farm","console","log","getBurnedToken","anchorNew","addLiquidity","data","Promise","resolve","reject","tokenA","tokenB","amountADesired","amountBDesired","amountAMin","amountBMin","to","deadline","value","web3","callWeb3","gasPrice","calculateGasPrice","gas","estimateGas","from","utils","toHex","send","on","hash","receipt","success","addLiquidityETH","token","amountTokenDesired","amountTokenMin","amountETHMin","removeLiquidityWithPermit","liquidity","approveMax","v","r","s","checkSignature","removeLiquidity","removeLiquidityETHWithPermit","supportingCheck","find","ele","removeLiquidityETHWithPermitSupportingFeeOnTransferTokens","removeLiquidityETHSupportingFeeOnTransferTokens","removeLiquidityETH","swapExactTokensForTokens","a1","a2","amountOutMin","checkDeflationnaryTokens","element","swapExactTokensForTokensSupportingFeeOnTransferTokens","swapTokensForExactTokens","swapExactETHForTokens","handleBalance","swapETHForExactTokens","getPairNonces","nonces","err","signRemoveTransaction","d","owner","spender","chainId","currentProvider","hexToNumber","nonce","EIP712Domain","name","type","domain","version","verifyingContract","Permit","message","JSON","stringify","types","primaryType","params","method","res","request","splitSignature","isHexable","toHexString","addSlice","array","slice","args","Array","prototype","arguments","apply","isBytesLike","isHexString","isBytes","arrayify","options","unshift","parseInt","String","allowMissingPrefix","substring","hex","hexPad","Error","zeroPad","set","match","HexCharacters","hexlify","Math","floor","hexZeroPad","signature","_vs","recoveryParam","bytes","vs","swapTokensForExactETH","amountInMax","swapExactTokensForETH","checkDeflationnaryToken","swapExactTokensForETHSupportingFeeOnTransferTokens","ExchangeService"],"mappings":"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","sourcesContent":["// import Web3 from \"web3\"\nimport { MAIN_CONTRACT_LIST, WETH, BURN_ADDRESS, DEFLATIONNARY_TOKENS, TOKEN_LIST, pancakeFactory } from \"../assets/tokens\"\nimport { toast } from \"../components/Toast/Toast\";\nimport { ContractServices } from \"./ContractServices\";\nimport { BigNumber } from \"bignumber.js\"\n\nconst allPairs = async () => {\n  try {\n    const contract = await ContractServices.callContract(MAIN_CONTRACT_LIST.factory.address, MAIN_CONTRACT_LIST.factory.abi);\n    return await contract.methods.allPairs().call();\n  } catch (error) {\n    return error;\n  }\n}\n\nconst getPair = async (token1, token2) => {\n  try {\n    const contract = await ContractServices.callContract(MAIN_CONTRACT_LIST.factory.address, MAIN_CONTRACT_LIST.factory.abi);\n    return await contract.methods.getPair(token1, token2).call();\n  } catch (error) {\n    return error;\n  }\n};\n\nconst getPairFromPancakeFactory = async (token1, token2) => {\n  try {\n    const contract = await ContractServices.callContract(pancakeFactory, MAIN_CONTRACT_LIST.factory.abi);\n    return await contract.methods.getPair(token1, token2).call();\n  } catch (error) {\n    return error;\n  }\n};\n\nconst getTokenZero = async (currentPairAddress) => {\n  try {\n    const contract = await ContractServices.callContract(currentPairAddress, MAIN_CONTRACT_LIST.pair.abi);\n    return await contract.methods.token0().call();\n  } catch (error) {\n    return error;\n  }\n};\n\nconst getTokenOne = async (currentPairAddress) => {\n  try {\n    const contract = await ContractServices.callContract(currentPairAddress, MAIN_CONTRACT_LIST.pair.abi);\n    return await contract.methods.token1().call();\n  } catch (error) {\n    return error;\n  }\n};\n\nconst getAmountsOut = async (amountIn, pair) => {\n  try {\n\n    const decimals1 = await ContractServices.getDecimals(pair[0]);\n    const addAmountIn = amountIn * 10 ** decimals1;\n\n    let calAmount = BigNumber(addAmountIn).toFixed();\n    calAmount.toString();\n    let contract;\n    if ((pair[0].toLowerCase() === TOKEN_LIST[1].address.toLowerCase()) || (pair[1].toLowerCase() === TOKEN_LIST[1].address.toLowerCase())) {\n      contract = await ContractServices.callContract(MAIN_CONTRACT_LIST.router.address, MAIN_CONTRACT_LIST.router.abi);\n    } else if (\n      ((pair[0].toLowerCase() === TOKEN_LIST[0].address.toLowerCase()) || (pair[0].toLowerCase() === TOKEN_LIST[2].address.toLowerCase())\n      ) && ((pair[1].toLowerCase() === TOKEN_LIST[0].address.toLowerCase()) || (pair[1].toLowerCase() === TOKEN_LIST[2].address.toLowerCase())\n      )) {\n      contract = await ContractServices.callContract(MAIN_CONTRACT_LIST.router.address, MAIN_CONTRACT_LIST.router.abi);\n    }\n    else {\n      contract = await ContractServices.callContract(MAIN_CONTRACT_LIST.panCakeRouter.address, MAIN_CONTRACT_LIST.router.abi);\n    }\n\n    const result = await contract.methods.getAmountsOut(calAmount, pair).call();\n\n    let pushArray = [];\n    for (let i = 0; i < result.length; i++) {\n      const decimals = await ContractServices.getDecimals(pair[i]);\n      const path = Number(result[i]) / 10 ** decimals\n      pushArray.push(path);\n    }\n    return pushArray;\n  } catch (error) {\n    return error;\n  }\n}\n\nconst getAmountsIn = async (amountOut, pair) => {\n  try {\n    const decimals1 = await ContractServices.getDecimals(pair[0]);\n    const addAmountOut = amountOut * 10 ** decimals1;\n\n    let calAmount = BigNumber(addAmountOut).toFixed();\n    calAmount.toString();\n    let contract;\n    if ((pair[0].toLowerCase() === TOKEN_LIST[1].address.toLowerCase()) || (pair[1].toLowerCase() === TOKEN_LIST[1].address.toLowerCase())) {\n      contract = await ContractServices.callContract(MAIN_CONTRACT_LIST.router.address, MAIN_CONTRACT_LIST.router.abi);\n    } else if (\n      ((pair[0].toLowerCase() === TOKEN_LIST[0].address.toLowerCase()) || (pair[0].toLowerCase() === TOKEN_LIST[2].address.toLowerCase())\n      ) && ((pair[1].toLowerCase() === TOKEN_LIST[0].address.toLowerCase()) || (pair[1].toLowerCase() === TOKEN_LIST[2].address.toLowerCase())\n      )) {\n      contract = await ContractServices.callContract(MAIN_CONTRACT_LIST.router.address, MAIN_CONTRACT_LIST.router.abi);\n    } else {\n      contract = await ContractServices.callContract(MAIN_CONTRACT_LIST.panCakeRouter.address, MAIN_CONTRACT_LIST.router.abi);\n    }\n    const result = await contract.methods.getAmountsIn(calAmount, pair).call();\n    let pushArray = [];\n    for (let i = 0; i < result.length; i++) {\n      const decimals = await ContractServices.getDecimals(pair[i]);\n      const path = Number(result[i]) / 10 ** decimals\n      pushArray.push(path);\n    }\n    return pushArray;\n  } catch (error) {\n    return error;\n  }\n}\n\nconst getReserves = async (pairAddress) => {\n  try {\n    const contract = await ContractServices.callContract(pairAddress, MAIN_CONTRACT_LIST.pair.abi);\n    return await contract.methods.getReserves().call();\n  } catch (error) {\n    return error;\n  }\n}\n\nconst getTotalSupply = async (pairAddress) => {\n  try {\n    const contract = await ContractServices.callContract(pairAddress, MAIN_CONTRACT_LIST.pair.abi);\n    const decimals = await contract.methods.decimals().call();\n    let result = await contract.methods.totalSupply().call();\n    result = (Number(result) / 10 ** decimals).toFixed(5);\n    return Number(result);\n\n  } catch (error) {\n    return error;\n  }\n}\n\nconst getTokenStaked = async (pairAddress) => {\n  try {\n    const contract = await ContractServices.callTokenContract(pairAddress);\n    const decimals = await contract.methods.decimals().call();\n\n    let result = await contract.methods.balanceOf(MAIN_CONTRACT_LIST.farm.address).call();\n    result = (Number(result) / 10 ** decimals).toFixed(5);\n    return Number(result);\n  } catch (error) {\n    console.log(\"Error:\", error);\n    return error;\n  }\n};\n\nconst getBurnedToken = async () => {\n  try {\n    const contract = await ContractServices.callTokenContract(MAIN_CONTRACT_LIST.anchorNew.address);\n    if (contract) {\n      const decimals = await contract.methods.decimals().call();\n\n      let result = await contract.methods.balanceOf(BURN_ADDRESS).call();\n      result = (Number(result) / 10 ** decimals).toFixed(2);\n      return Number(result);\n    }\n    return 0;\n\n  } catch (error) {\n    console.log(\"Error:\", error);\n    return error;\n  }\n};\n\nconst addLiquidity = async (data) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      let {\n        tokenA,\n        tokenB,\n        amountADesired,\n        amountBDesired,\n        amountAMin,\n        amountBMin,\n        to,\n        deadline,\n        value\n      } = data;\n      const web3 = await ContractServices.callWeb3();\n      const contract = await ContractServices.callContract(MAIN_CONTRACT_LIST.router.address, MAIN_CONTRACT_LIST.router.abi);\n      const gasPrice = await ContractServices.calculateGasPrice();\n\n      const gas = await contract.methods.addLiquidity(\n        tokenA,\n        tokenB,\n        amountADesired,\n        amountBDesired,\n        amountAMin,\n        amountBMin,\n        to,\n        deadline\n      ).estimateGas({ from: to });\n      value = await web3.utils.toHex(value);\n\n      contract.methods.addLiquidity(\n        tokenA,\n        tokenB,\n        amountADesired,\n        amountBDesired,\n        amountAMin,\n        amountBMin,\n        to,\n        deadline\n      ).send({ from: to, gasPrice, gas, value })\n        .on('transactionHash', (hash) => {\n          resolve(hash);\n        })\n        .on('receipt', (receipt) => {\n          toast.success('Liquidity added successfully.');\n        })\n        .on('error', (error, receipt) => {\n          reject(error);\n        });\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\nconst addLiquidityETH = async (data) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      let {\n        token,\n        amountTokenDesired,\n        amountTokenMin,\n        amountETHMin,\n        to,\n        deadline,\n        value\n      } = data;\n      const web3 = await ContractServices.callWeb3();\n      value = await web3.utils.toHex(value);\n\n      const contract = await ContractServices.callContract(MAIN_CONTRACT_LIST.router.address, MAIN_CONTRACT_LIST.router.abi);\n      const gasPrice = await ContractServices.calculateGasPrice();\n      // value = await web3.utils.toHex(value);\n\n      const gas = await contract.methods.addLiquidityETH(\n        token,\n        amountTokenDesired,\n        amountTokenMin,\n        amountETHMin,\n        to,\n        deadline\n      ).estimateGas({ from: to, value });\n\n      contract.methods.addLiquidityETH(\n        token,\n        amountTokenDesired,\n        amountTokenMin,\n        amountETHMin,\n        to,\n        deadline\n      ).send({ from: to, gasPrice, gas, value })\n        .on('transactionHash', (hash) => {\n          resolve(hash);\n        })\n        .on('receipt', (receipt) => {\n          toast.success('Liquidity added successfully.');\n        })\n        .on('error', (error, receipt) => {\n          reject(error);\n        });\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\nconst removeLiquidityWithPermit = async (data) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      let {\n        tokenA,\n        tokenB,\n        liquidity,\n        amountAMin,\n        amountBMin,\n        to,\n        deadline,\n        value,\n        approveMax,\n        v, r, s, checkSignature\n      } = data;\n      const web3 = await ContractServices.callWeb3();\n      const contract = await ContractServices.callContract(MAIN_CONTRACT_LIST.router.address, MAIN_CONTRACT_LIST.router.abi);\n      const gasPrice = await ContractServices.calculateGasPrice();\n\n      if (checkSignature) {\n\n        const gas = await contract.methods.removeLiquidityWithPermit(\n          tokenA,\n          tokenB,\n          liquidity,\n          amountAMin,\n          amountBMin,\n          to,\n          deadline,\n          approveMax,\n          v, r, s\n        ).estimateGas({ from: to });\n        value = await web3.utils.toHex(value);\n\n        contract.methods.removeLiquidityWithPermit(\n          tokenA,\n          tokenB,\n          liquidity,\n          amountAMin,\n          amountBMin,\n          to,\n          deadline,\n          approveMax,\n          v, r, s\n        ).send({ from: to, gasPrice, gas, value })\n          .on('transactionHash', (hash) => {\n            resolve(hash);\n          })\n          .on('receipt', (receipt) => {\n            console.log(receipt, 'in service add liquidity')\n            toast.success('Liquidity removed successfully.');\n          })\n          .on('error', (error, receipt) => {\n            reject(error);\n          });\n      } else {\n        const gas = await contract.methods.removeLiquidity(\n          tokenA,\n          tokenB,\n          liquidity,\n          amountAMin,\n          amountBMin,\n          to,\n          deadline\n        ).estimateGas({ from: to });\n        value = await web3.utils.toHex(value);\n\n        contract.methods.removeLiquidity(\n          tokenA,\n          tokenB,\n          liquidity,\n          amountAMin,\n          amountBMin,\n          to,\n          deadline\n        ).send({ from: to, gasPrice, gas, value })\n          .on('transactionHash', (hash) => {\n            resolve(hash);\n          })\n          .on('receipt', (receipt) => {\n            console.log(receipt, 'in service add liquidity')\n            toast.success('Liquidity removed successfully.');\n          })\n          .on('error', (error, receipt) => {\n            reject(error);\n          });\n      }\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\nconst removeLiquidityETHWithPermit = async (data) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      let {\n        token,\n        liquidity,\n        amountTokenMin,\n        amountETHMin,\n        to,\n        deadline,\n        value,\n        approveMax, v, r, s, checkSignature\n      } = data;\n      value = '0';\n\n      const contract = await ContractServices.callContract(MAIN_CONTRACT_LIST.router.address, MAIN_CONTRACT_LIST.router.abi);\n      const gasPrice = await ContractServices.calculateGasPrice();\n\n      if (checkSignature) {\n\n        // for Anchor Tokens\n        const supportingCheck = DEFLATIONNARY_TOKENS.find(ele => ele.toLowerCase() === token.toLowerCase());\n\n        if (supportingCheck) {\n          const gas = await contract.methods.removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n            token,\n            liquidity,\n            amountTokenMin,\n            amountETHMin,\n            to,\n            deadline,\n            approveMax,\n            v, r, s\n          ).estimateGas({ from: to, value });\n\n          contract.methods.removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n            token,\n            liquidity,\n            amountTokenMin,\n            amountETHMin,\n            to,\n            deadline,\n            approveMax,\n            v, r, s\n          ).send({ from: to, gasPrice, gas, value })\n            .on('transactionHash', (hash) => {\n              resolve(hash);\n            })\n            .on('receipt', (receipt) => {\n              console.log(receipt, 'in service add liquidity')\n              toast.success('Liquidity removed successfully.');\n            })\n            .on('error', (error, receipt) => {\n              reject(error);\n            });\n        } else {\n          const gas = await contract.methods.removeLiquidityETHWithPermit(\n            token,\n            liquidity,\n            amountTokenMin,\n            amountETHMin,\n            to,\n            deadline,\n            approveMax,\n            v, r, s\n          ).estimateGas({ from: to, value });\n\n          contract.methods.removeLiquidityETHWithPermit(\n            token,\n            liquidity,\n            amountTokenMin,\n            amountETHMin,\n            to,\n            deadline,\n            approveMax,\n            v, r, s\n          ).send({ from: to, gasPrice, gas, value })\n            .on('transactionHash', (hash) => {\n              resolve(hash);\n            })\n            .on('receipt', (receipt) => {\n              console.log(receipt, 'in service add liquidity')\n              toast.success('Liquidity removed successfully.');\n            })\n            .on('error', (error, receipt) => {\n              reject(error);\n            });\n        }\n      } else {//without permit\n        // for Anchor Tokens\n        const supportingCheck = DEFLATIONNARY_TOKENS.find(ele => ele.toLowerCase() === token.toLowerCase());\n\n        if (supportingCheck) {\n          const gas = await contract.methods.removeLiquidityETHSupportingFeeOnTransferTokens(\n            token,\n            liquidity,\n            amountTokenMin,\n            amountETHMin,\n            to,\n            deadline\n          ).estimateGas({ from: to, value });\n\n          contract.methods.removeLiquidityETHSupportingFeeOnTransferTokens(\n            token,\n            liquidity,\n            amountTokenMin,\n            amountETHMin,\n            to,\n            deadline\n          ).send({ from: to, gasPrice, gas, value })\n            .on('transactionHash', (hash) => {\n              resolve(hash);\n            })\n            .on('receipt', (receipt) => {\n              console.log(receipt, 'in service add liquidity')\n              toast.success('Liquidity removed successfully.');\n            })\n            .on('error', (error, receipt) => {\n              reject(error);\n            });\n        } else {\n          const gas = await contract.methods.removeLiquidityETH(\n            token,\n            liquidity,\n            amountTokenMin,\n            amountETHMin,\n            to,\n            deadline\n          ).estimateGas({ from: to, value });\n\n          contract.methods.removeLiquidityETH(\n            token,\n            liquidity,\n            amountTokenMin,\n            amountETHMin,\n            to,\n            deadline\n          ).send({ from: to, gasPrice, gas, value })\n            .on('transactionHash', (hash) => {\n              resolve(hash);\n            })\n            .on('receipt', (receipt) => {\n              console.log(receipt, 'in service add liquidity')\n              toast.success('Liquidity removed successfully.');\n            })\n            .on('error', (error, receipt) => {\n              reject(error);\n            });\n        }\n      }\n    } catch (error) {\n      console.log('remove liquidity issue', '------------', error)\n      reject(error);\n    }\n  });\n}\nconst swapExactTokensForTokens = async (data, a1, a2) => {\n  return new Promise(async (resolve, reject) => {\n\n    let {\n      amountIn,\n      amountOutMin,\n      path,\n      to,\n      deadline,\n      value\n    } = data;\n\n    const web3 = await ContractServices.callWeb3();\n    const contract = await ContractServices.callContract(MAIN_CONTRACT_LIST.router.address, MAIN_CONTRACT_LIST.router.abi);\n    const gasPrice = await ContractServices.calculateGasPrice();\n    const checkDeflationnaryTokens = DEFLATIONNARY_TOKENS.find(element => element.toLowerCase() === a1.toLowerCase());\n\n    if (checkDeflationnaryTokens) {\n      try {\n        const gas = await contract.methods.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n          amountIn,\n          amountOutMin,\n          path,\n          to,\n          deadline\n        ).estimateGas({ from: to });\n\n        value = await web3.utils.toHex(value);\n\n        contract.methods.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n          amountIn,\n          amountOutMin,\n          path,\n          to,\n          deadline\n        ).send({ from: to, gasPrice, gas, value })\n          .on('transactionHash', (hash) => {\n            resolve(hash);\n          })\n          .on('receipt', (receipt) => {\n            console.log(receipt, 'in service add liquidity')\n            toast.success('Swap transaction executed successfully');\n          })\n          .on('error', (error, receipt) => {\n            reject(error);\n          });\n      } catch (error) {\n        reject(error);\n      }\n\n    } else {\n      try {\n        const gas = await contract.methods.swapExactTokensForTokens(\n          amountIn,\n          amountOutMin,\n          path,\n          to,\n          deadline\n        ).estimateGas({ from: to });\n\n        value = await web3.utils.toHex(value);\n\n        contract.methods.swapExactTokensForTokens(\n          amountIn,\n          amountOutMin,\n          path,\n          to,\n          deadline\n        ).send({ from: to, gasPrice, gas, value })\n          .on('transactionHash', (hash) => {\n            resolve(hash);\n          })\n          .on('receipt', (receipt) => {\n            console.log(receipt, 'in service add liquidity')\n            toast.success('Swap transaction executed successfully');\n          })\n          .on('error', (error, receipt) => {\n            reject(error);\n          });\n      } catch (error) {\n        reject(error);\n      }\n    }\n  });\n}\n\nconst swapTokensForExactTokens = async (data) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      let {\n        amountIn,\n        amountOutMin,\n        path,\n        to,\n        deadline,\n        value\n      } = data;\n\n      const web3 = await ContractServices.callWeb3();\n      const contract = await ContractServices.callContract(MAIN_CONTRACT_LIST.router.address, MAIN_CONTRACT_LIST.router.abi);\n      const gasPrice = await ContractServices.calculateGasPrice();\n      const gas = await contract.methods.swapTokensForExactTokens(\n        amountIn,\n        amountOutMin,\n        path,\n        to,\n        deadline\n      ).estimateGas({ from: to });\n      value = await web3.utils.toHex(value);\n      contract.methods.swapTokensForExactTokens(\n        amountIn,\n        amountOutMin,\n        path,\n        to,\n        deadline\n      ).send({ from: to, gasPrice, gas, value })\n        .on('transactionHash', (hash) => {\n          resolve(hash);\n        })\n        .on('receipt', (receipt) => {\n          console.log(receipt, 'in service add liquidity')\n          toast.success('Swap transaction executed successfully');\n        })\n        .on('error', (error, receipt) => {\n          reject(error);\n        });\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n\nconst swapExactETHForTokens = async (data, handleBalance) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      let {\n        amountOutMin,\n        path,\n        to,\n        deadline,\n        value\n      } = data;\n      const web3 = await ContractServices.callWeb3();\n      const contract = await ContractServices.callContract(MAIN_CONTRACT_LIST.router.address, MAIN_CONTRACT_LIST.router.abi);\n      const gasPrice = await ContractServices.calculateGasPrice();\n      const gas = await contract.methods.swapExactETHForTokens(\n        amountOutMin,\n        path,\n        to,\n        deadline\n      ).estimateGas({ from: to, value });\n\n      value = await web3.utils.toHex(value);\n      contract.methods.swapExactETHForTokens(\n        amountOutMin,\n        path,\n        to,\n        deadline\n      ).send({ from: to, gasPrice, gas, value })\n        .on('transactionHash', (hash) => {\n          resolve(hash);\n        })\n        .on('receipt', (receipt) => {\n          handleBalance();\n          toast.success('Swap transaction executed successfully');\n        })\n        .on('error', (error, receipt) => {\n          reject(error);\n        });\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n\nconst swapETHForExactTokens = async (data) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      let {\n        amountOutMin,\n        path,\n        to,\n        deadline,\n        value\n      } = data;\n      const web3 = await ContractServices.callWeb3();\n      const contract = await ContractServices.callContract(MAIN_CONTRACT_LIST.router.address, MAIN_CONTRACT_LIST.router.abi);\n      const gasPrice = await ContractServices.calculateGasPrice();\n      value = await web3.utils.toHex(value);\n      console.log(\"Checking here:\", data);\n      const gas = await contract.methods.swapETHForExactTokens(\n        amountOutMin,\n        path,\n        to,\n        deadline\n      ).estimateGas({ from: to, value });\n      contract.methods.swapETHForExactTokens(\n        amountOutMin,\n        path,\n        to,\n        deadline\n      ).send({ from: to, gasPrice, gas, value })\n        .on('transactionHash', (hash) => {\n          resolve(hash);\n        })\n        .on('receipt', (receipt) => {\n          console.log(receipt, 'in service add liquidity')\n          toast.success('Swap transaction executed successfully');\n        })\n        .on('error', (error, receipt) => {\n          reject(error);\n        });\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\nconst getPairNonces = async (pair, address) => {\n  try {\n    const contract = await ContractServices.callContract(pair, MAIN_CONTRACT_LIST.pair.abi);\n    return contract.methods.nonces(address).call();\n  } catch (err) {\n    return err;\n  }\n}\n\nconst signRemoveTransaction = async (d, pair) => {\n  try {\n    const { owner, spender, deadline, value } = d;\n    const web3 = await ContractServices.callWeb3();\n\n    let chainId = await web3.currentProvider.chainId;\n    chainId = await web3.utils.hexToNumber(chainId);\n\n    const nonce = await getPairNonces(pair, owner);\n\n    const EIP712Domain = [\n      { name: 'name', type: 'string' },\n      { name: 'version', type: 'string' },\n      { name: 'chainId', type: 'uint256' },\n      { name: 'verifyingContract', type: 'address' },\n    ]\n    const domain = {\n      name: 'NiobSwap LPs',\n      version: '1',\n      value,\n      chainId,\n      verifyingContract: pair,\n    }\n    const Permit = [\n      { name: 'owner', type: 'address' },\n      { name: 'spender', type: 'address' },\n      { name: 'value', type: 'uint256' },\n      { name: 'nonce', type: 'uint256' },\n      { name: 'deadline', type: 'uint256' },\n    ]\n    const message = {\n      owner,\n      spender,\n      value,\n      nonce: web3.utils.toHex(nonce),\n      deadline,\n    }\n    const data = JSON.stringify({\n      types: {\n        EIP712Domain,\n        Permit,\n      },\n      domain,\n      primaryType: 'Permit',\n      message,\n    });\n\n    //old function\n    // const res = await web3.currentProvider.send('eth_signTypedData_v4', [owner, data]);\n    // console.log(data, res, 'before---------------')\n\n    const from = owner;\n    const params = [from, data];\n    const method = 'eth_signTypedData_v4';\n\n    const res = await web3.currentProvider.request({\n      method,\n      params,\n      from,\n    });\n    try {\n      return await splitSignature(res);\n    } catch (err) {\n      console.log('split signature error', err);\n      return err;\n    }\n  } catch (err) {\n    return err;\n  }\n}\n\n///////////////////////////////\nfunction isHexable(value) {\n  return !!(value.toHexString);\n}\nfunction addSlice(array) {\n  if (array.slice) { return array; }\n\n  array.slice = function () {\n    const args = Array.prototype.slice.call(arguments);\n    return addSlice(Array.prototype.slice.apply(array, args));\n  }\n  return array;\n}\nfunction isBytesLike(value) {\n  return ((isHexString(value) && !(value.length % 2)) || isBytes(value));\n}\nfunction isBytes(value) {\n  if (value == null) { return false; }\n\n  if (typeof (value) === \"string\") { return false; }\n  if (value.length == null) { return false; }\n\n  for (let i = 0; i < value.length; i++) {\n    const v = value[i];\n    if (typeof (v) !== \"number\" || v < 0 || v >= 256 || (v % 1)) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction arrayify(value, options) {\n  if (!options) { options = {}; }\n\n  if (typeof (value) === \"number\") {\n    // throw new Error(value, \"invalid arrayify value\");\n\n    const result = [];\n    while (value) {\n      result.unshift(value & 0xff);\n      value = parseInt(String(value / 256));\n    }\n    if (result.length === 0) { result.push(0); }\n\n    return addSlice(result);\n  }\n\n  if (options.allowMissingPrefix && typeof (value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n    value = \"0x\" + value;\n  }\n\n  if (isHexable(value)) { value = value.toHexString(); }\n\n  if (isHexString(value)) {\n    let hex = (value).substring(2);\n    if (hex.length % 2) {\n      if (options.hexPad === \"left\") {\n        hex = \"0x0\" + hex.substring(2);\n      } else if (options.hexPad === \"right\") {\n        hex += \"0\";\n      } else {\n        throw new Error(\"hex data is odd-length\", \"value\", value);\n      }\n    }\n\n    const result = [];\n    for (let i = 0; i < hex.length; i += 2) {\n      result.push(parseInt(hex.substring(i, i + 2), 16));\n    }\n\n    return addSlice(result);\n  }\n\n  if (isBytes(value)) {\n    return addSlice(value);\n  }\n\n  return new Error(\"invalid arrayify value\", \"value\", value);\n}\n\nfunction zeroPad(value, length) {\n  value = arrayify(value);\n\n  if (value.length > length) {\n    throw new Error(\"value out of range\", \"value\", arguments[0]);\n  }\n\n  const result = [length];\n  result.set(value, length - value.length);\n  return addSlice(result);\n}\n\n\nfunction isHexString(value, length) {\n  if (typeof (value) !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n    return false\n  }\n  if (length && value.length !== 2 + 2 * length) { return false; }\n  return true;\n}\n\nconst HexCharacters = \"0123456789abcdef\";\n\nfunction hexlify(value, options) {\n  if (!options) { options = {}; }\n\n  if (typeof (value) === \"number\") {\n    // logger.checkSafeUint53(value, \"invalid hexlify value\");\n\n    let hex = \"\";\n    while (value) {\n      hex = HexCharacters[value & 0xf] + hex;\n      value = Math.floor(value / 16);\n    }\n\n    if (hex.length) {\n      if (hex.length % 2) { hex = \"0\" + hex; }\n      return \"0x\" + hex;\n    }\n\n    return \"0x00\";\n  }\n\n  if (typeof (value) === \"bigint\") {\n    value = value.toString(16);\n    if (value.length % 2) { return (\"0x0\" + value); }\n    return \"0x\" + value;\n  }\n\n  if (options.allowMissingPrefix && typeof (value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n    value = \"0x\" + value;\n  }\n\n  if (isHexable(value)) { return value.toHexString(); }\n\n  if (isHexString(value)) {\n    if ((value).length % 2) {\n      if (options.hexPad === \"left\") {\n        value = \"0x0\" + (value.toString()).substring(2);\n      } else if (options.hexPad === \"right\") {\n        value += \"0\";\n      } else {\n        throw new Error(\"hex data is odd-length\", \"value\", value);\n      }\n    }\n    return (value.toString()).toLowerCase();\n  }\n\n  if (isBytes(value)) {\n    let result = \"0x\";\n    for (let i = 0; i < value.length; i++) {\n      let v = value[i];\n      result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];\n    }\n    return result;\n  }\n\n  return new Error(\"invalid hexlify value\", \"value\", value);\n}\n\nfunction hexZeroPad(value, length) {\n  if (typeof (value) !== \"string\") {\n    value = hexlify(value);\n  } else if (!isHexString(value)) {\n    throw new Error(\"invalid hex string\", \"value\", value);\n  }\n\n  if (value.length > 2 * length + 2) {\n    throw new Error(\"value out of range\", \"value\", arguments[1]);\n  }\n\n  while (value.length < 2 * length + 2) {\n    value = \"0x0\" + value.substring(2);\n  }\n  return value;\n}\n\nconst splitSignature = async (signature) => {\n  const result = {\n    r: \"0x\",\n    s: \"0x\",\n    _vs: \"0x\",\n    recoveryParam: 0,\n    v: 0\n  };\n\n  if (isBytesLike(signature)) {\n    const bytes = arrayify(signature);\n    if (bytes.length !== 65) {\n      throw new Error(\"invalid signature string; must be 65 bytes\", \"signature\", signature);\n    }\n\n    // Get the r, s and v\n    result.r = hexlify(bytes.slice(0, 32));\n    result.s = hexlify(bytes.slice(32, 64));\n    result.v = bytes[64];\n\n    // Allow a recid to be used as the v\n    if (result.v < 27) {\n      if (result.v === 0 || result.v === 1) {\n        result.v += 27;\n      } else {\n        throw new Error(\"signature invalid v byte\", \"signature\", signature);\n      }\n    }\n\n    // Compute recoveryParam from v\n    result.recoveryParam = 1 - (result.v % 2);\n\n    // Compute _vs from recoveryParam and s\n    if (result.recoveryParam) { bytes[32] |= 0x80; }\n    result._vs = hexlify(bytes.slice(32, 64))\n\n  } else {\n    result.r = signature.r;\n    result.s = signature.s;\n    result.v = signature.v;\n    result.recoveryParam = signature.recoveryParam;\n    result._vs = signature._vs;\n\n    // If the _vs is available, use it to populate missing s, v and recoveryParam\n    // and verify non-missing s, v and recoveryParam\n    if (result._vs != null) {\n      const vs = zeroPad(arrayify(result._vs), 32);\n      result._vs = hexlify(vs);\n\n      // Set or check the recid\n      const recoveryParam = ((vs[0] >= 128) ? 1 : 0);\n      if (result.recoveryParam == null) {\n        result.recoveryParam = recoveryParam;\n      } else if (result.recoveryParam !== recoveryParam) {\n        throw new Error(\"signature recoveryParam mismatch _vs\", \"signature\", signature);\n      }\n\n      // Set or check the s\n      vs[0] &= 0x7f;\n      const s = hexlify(vs);\n      if (result.s == null) {\n        result.s = s;\n      } else if (result.s !== s) {\n        throw new Error(\"signature v mismatch _vs\", \"signature\", signature);\n      }\n    }\n\n    // Use recid and v to populate each other\n    if (result.recoveryParam == null) {\n      if (result.v == null) {\n        throw new Error(\"signature missing v and recoveryParam\", \"signature\", signature);\n      } else if (result.v === 0 || result.v === 1) {\n        result.recoveryParam = result.v;\n      } else {\n        result.recoveryParam = 1 - (result.v % 2);\n      }\n    } else {\n      if (result.v == null) {\n        result.v = 27 + result.recoveryParam;\n      } else if (result.recoveryParam !== (1 - (result.v % 2))) {\n        throw new Error(\"signature recoveryParam mismatch v\", \"signature\", signature);\n      }\n    }\n\n    if (result.r == null || !isHexString(result.r)) {\n      throw new Error(\"signature missing or invalid r\", \"signature\", signature);\n    } else {\n      result.r = hexZeroPad(result.r, 32);\n    }\n\n    if (result.s == null || !isHexString(result.s)) {\n      throw new Error(\"signature missing or invalid s\", \"signature\", signature);\n    } else {\n      result.s = hexZeroPad(result.s, 32);\n    }\n\n    const vs = arrayify(result.s);\n    if (vs[0] >= 128) {\n      throw new Error(\"signature s out of range\", \"signature\", signature);\n    }\n    if (result.recoveryParam) { vs[0] |= 0x80; }\n    const _vs = hexlify(vs);\n\n    if (result._vs) {\n      if (!isHexString(result._vs)) {\n        throw new Error(\"signature invalid _vs\", \"signature\", signature);\n      }\n      result._vs = hexZeroPad(result._vs, 32);\n    }\n\n    // Set or check the _vs\n    if (result._vs == null) {\n      result._vs = _vs;\n    } else if (result._vs !== _vs) {\n      throw new Error(\"signature _vs mismatch v and s\", \"signature\", signature);\n    }\n  }\n  return result;\n}\n\nconst swapTokensForExactETH = async (data) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      let {\n        amountOut,\n        amountInMax,\n        path,\n        to,\n        deadline,\n        value\n      } = data;\n      const web3 = await ContractServices.callWeb3();\n      const contract = await ContractServices.callContract(MAIN_CONTRACT_LIST.router.address, MAIN_CONTRACT_LIST.router.abi);\n      const gasPrice = await ContractServices.calculateGasPrice();\n      value = await web3.utils.toHex(value);\n\n      const gas = await contract.methods.swapTokensForExactETH(\n        amountOut,\n        amountInMax,\n        path,\n        to,\n        deadline,\n      ).estimateGas({ from: to });\n      contract.methods.swapTokensForExactETH(\n        amountOut,\n        amountInMax,\n        path,\n        to,\n        deadline,\n      ).send({ from: to, gasPrice, gas })\n        .on('transactionHash', (hash) => {\n          resolve(hash);\n        })\n        .on('receipt', (receipt) => {\n          console.log(receipt, 'in service add liquidity')\n          toast.success('Liquidity added successfully.');\n        })\n        .on('error', (error, receipt) => {\n          reject(error);\n        });\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n\nconst swapExactTokensForETH = async (data, a1, a2) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      let {\n        amountIn,\n        amountOutMin,\n        path,\n        to,\n        deadline,\n        value\n      } = data;\n      const web3 = await ContractServices.callWeb3();\n      const contract = await ContractServices.callContract(MAIN_CONTRACT_LIST.router.address, MAIN_CONTRACT_LIST.router.abi);\n      const gasPrice = await ContractServices.calculateGasPrice();\n      value = await web3.utils.toHex(value);\n\n      const checkDeflationnaryToken = DEFLATIONNARY_TOKENS.find(element => element.toLowerCase() == a1.toLowerCase());\n\n      if ((checkDeflationnaryToken) && (a2.toLowerCase() === WETH.toLowerCase())) {\n        try {\n          const gas = await contract.methods.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            amountIn,\n            amountOutMin,\n            path,\n            to,\n            deadline,\n          ).estimateGas({ from: to });\n\n          contract.methods.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            amountIn,\n            amountOutMin,\n            path,\n            to,\n            deadline,\n          ).send({ from: to, gasPrice, gas })\n            .on('transactionHash', (hash) => {\n              resolve(hash);\n            })\n            .on('receipt', (receipt) => {\n              console.log(receipt, 'in service add liquidity');\n              toast.success('Liquidity added successfully.');\n            })\n            .on('error', (error, receipt) => {\n              reject(error);\n            });\n        } catch (error) {\n          reject(error);\n        }\n\n      } else {\n        // console.log(\"HEREEEEEE ELSE:\", data);\n        try {\n          const gas = await contract.methods.swapExactTokensForETH(\n            amountIn,\n            amountOutMin,\n            path,\n            to,\n            deadline,\n          ).estimateGas({ from: to });\n\n\n          contract.methods.swapExactTokensForETH(\n            amountIn,\n            amountOutMin,\n            path,\n            to,\n            deadline,\n          ).send({ from: to, gasPrice, gas })\n            .on('transactionHash', (hash) => {\n              resolve(hash);\n            })\n            .on('receipt', (receipt) => {\n              console.log(receipt, 'in service add liquidity');\n              toast.success('Liquidity added successfully.');\n            })\n            .on('error', (error, receipt) => {\n              reject(error);\n            });\n        } catch (error) {\n          reject(error);\n        }\n\n      }\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n//exporting functions\nexport const ExchangeService = {\n  getPair,\n  getAmountsOut,\n  getReserves,\n  addLiquidity,\n  addLiquidityETH,\n  removeLiquidityWithPermit,\n  removeLiquidityETHWithPermit,\n  allPairs,\n  swapExactTokensForTokens,\n  swapTokensForExactTokens,\n  swapExactETHForTokens,\n  swapETHForExactTokens,\n  signRemoveTransaction,\n  swapTokensForExactETH,\n  swapExactTokensForETH,\n  getTokenZero,\n  getTokenOne,\n  getTotalSupply,\n  getTokenStaked,\n  getBurnedToken,\n  getAmountsIn,\n  getPairFromPancakeFactory\n}\n"]},"metadata":{},"sourceType":"module"}