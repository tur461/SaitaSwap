{"ast":null,"code":"var _jsxFileName = \"/home/user/Desktop/nm/SaitaSwap/src/pages/Trade/AddLiquidity.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Container, Col } from \"react-bootstrap\";\nimport ConnectWallet from \"../../components/ConnectWallet/ConnectWallet\";\nimport CardCustom from \"../../components/cardCustom/CardCustom\";\nimport ButtonPrimary from \"../../components/Button/Button\";\nimport SelectCoin from \"../../components/selectCoin/SelectCoin\";\nimport Plusicon from \"../../assets/images/plus_yellow.png\";\nimport ModalCurrency from \"../../components/Modal/ModalCurrency/ModalCurrency\";\nimport ButtonBack from \"../../components/buttonBack/ButtonBack\";\nimport \"./Trade.scss\";\nimport SettingModal from \"../../components/Modal/SettingModal/SettingModal\";\nimport SettingIcon from \"../../assets/images/Settings-Icon.svg\";\nimport TimerIcon from \"../../assets/images/ionic-ios-timer.svg\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { MAIN_CONTRACT_LIST, TOKEN_LIST, WETH } from \"../../assets/tokens\";\nimport { ContractServices } from \"../../services/ContractServices\";\nimport { toast } from \"../../components/Toast/Toast\";\nimport { ExchangeService } from \"../../services/ExchangeService\";\nimport { addTransaction, checkUserLpTokens, searchTokenByNameOrAddress, startLoading, stopLoading } from \"../../redux/actions\";\nimport { BigNumber } from \"bignumber.js\";\nimport SupplyModal from \"../../components/SupplyModal/SupplyModal\";\nimport RecentTransactions from \"../../components/RecentTransactions/RecentTransactions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst AddLiquidity = props => {\n  _s();\n\n  const tokenList = useSelector(state => state.persist.tokenList);\n  const [show, setShow] = useState(false);\n\n  const handleClose = () => setShow(false);\n\n  const [show1, setShow1] = useState(false);\n\n  const handleClose1 = () => setShow1(false);\n\n  const handleShow1 = () => setShow1(true);\n\n  const [settingShow, setsettingShow] = useState(false);\n\n  const settingClose = () => setsettingShow(false);\n\n  const [showRecent, setShowRecent] = useState(false);\n\n  const supplyModalClose = () => setShowSupplyModal(false);\n\n  const recentTransactionsClose = () => setShowRecent(false);\n\n  const settinghandleShow = () => setsettingShow(true);\n\n  const [search, setSearch] = useState(\"\");\n  const [max, setMax] = useState(true);\n  const dispatch = useDispatch();\n  const MINIMUM_LIQUIDITY = 10 ** 3;\n  const isUserConnected = useSelector(state => state.persist.isUserConnected);\n  const walletType = useSelector(state => state.persist.walletType);\n  const deadline = useSelector(state => state.persist.deadline);\n  const slippagePercentage = useSelector(state => state.persist.slippagePercentage);\n  const [modalCurrency, setModalCurrency] = useState(false);\n  const [tokenOne, setTokenOne] = useState(TOKEN_LIST[0]);\n  const [tokenTwo, setTokenTwo] = useState({});\n  const [tokenOneValue, setTokenOneValue] = useState();\n  const [tokenTwoValue, setTokenTwoValue] = useState();\n  const [sharePoolValue, setSharePoolValue] = useState(100);\n  const [tokenOneCurrency, setCurrencyNameForTokenOne] = useState(TOKEN_LIST[0].symbol);\n  const [tokenTwoCurrency, setCurrencyNameForTokenTwo] = useState(\"Select a token\");\n  const [tokenOneBalance, setTokenOneBalance] = useState(0);\n  const [tokenTwoBalance, setTokenTwoBalance] = useState(0);\n  const [tokenOneDeposit, setTokenOneDeposit] = useState(0);\n  const [tokenTwoDeposit, setTokenTwoDeposit] = useState(0);\n  const [tokenOneApproval, setTokenOneApproval] = useState(false);\n  const [tokenTwoApproval, setTokenTwoApproval] = useState(false);\n  const [tokenOneApproved, setTokenOneApproved] = useState(false);\n  const [tokenTwoApproved, setTokenTwoApproved] = useState(false);\n  const [lpTokenBalance, setLpTokenBalance] = useState(0);\n  const [tokenType, setTokenType] = useState(\"TK1\");\n  const [showSupplyModal, setShowSupplyModal] = useState(false);\n  const [filteredTokenList, setFilteredTokenList] = useState([]);\n  const [approvalConfirmation, setApprovalConfirmation] = useState(false);\n  const [liquidityConfirmation, setLiquidityConfirmation] = useState(false);\n  const [selectedCurrency, setSelectedCurrency] = useState(\"\");\n  const [currentPairAddress, setCurrentPairAddress] = useState(\"\");\n  const [firstProvider, setFirstProvider] = useState(false);\n  const [showPoolShare, setShowPoolShare] = useState(false);\n  const [showTransactionModal, setShowTransactionModal] = useState(false);\n  const [txHash, setTxHash] = useState(\"\");\n  useEffect(() => {\n    setFilteredTokenList(tokenList.filter(token => token.name.toLowerCase().includes(search.toLowerCase())));\n    init();\n  }, [search, tokenList]);\n\n  const init = async () => {\n    if (isUserConnected) {\n      const oneBalance = await ContractServices.getBNBBalance(isUserConnected);\n      setTokenOneBalance(oneBalance);\n      const {\n        lptoken\n      } = props;\n\n      if (lptoken) {\n        setCurrentPairAddress(lptoken.pair);\n        setLpTokenBalance(lptoken.balance);\n        setSharePoolValue(lptoken.poolShare);\n\n        if (lptoken.token0Obj) {\n          setTokenOne(lptoken.token0Obj);\n          setCurrencyNameForTokenOne(lptoken.token0Obj.symbol);\n          setTokenOneDeposit(lptoken.token0Deposit);\n          let tokenBal = 0;\n\n          if (lptoken.token0Obj.address === \"BNB\") {\n            tokenBal = oneBalance;\n          } else {\n            tokenBal = await ContractServices.getTokenBalance(lptoken.token0Obj.address, isUserConnected);\n          }\n\n          setTokenOneBalance(tokenBal);\n        }\n\n        if (lptoken.token1Obj) {\n          setTokenTwo(lptoken.token1Obj);\n          setCurrencyNameForTokenTwo(lptoken.token1Obj.symbol);\n          setTokenTwoDeposit(lptoken.token1Deposit);\n          let tokenBal = 0;\n\n          if (lptoken.token1Obj.address === \"BNB\") {\n            tokenBal = oneBalance;\n          } else {\n            tokenBal = await ContractServices.getTokenBalance(lptoken.token1Obj.address, isUserConnected);\n          }\n\n          setTokenTwoBalance(tokenBal);\n        }\n      }\n    }\n  };\n\n  const closeTransactionModal = () => {\n    setShowTransactionModal(false);\n    props.backBtn();\n    window.location.reload();\n  };\n\n  const onHandleOpenModal = tokenType => {\n    if (!isUserConnected) {\n      return toast.error(\"Connect wallet first!\");\n    }\n\n    setShow(true);\n    setFilteredTokenList(tokenList);\n    setSelectedCurrency(tokenType === \"TK1\" ? tokenTwoCurrency : tokenOneCurrency);\n    setModalCurrency({\n      modalCurrency: true\n    });\n    setTokenType(tokenType);\n  };\n\n  const onHandleSelectCurrency = async (token, selecting) => {\n    const {\n      address,\n      symbol\n    } = token;\n\n    if (!isUserConnected) {\n      return toast.error(\"Connect wallet first!\");\n    }\n\n    let a1,\n        a2,\n        oneBalance = 0,\n        twoBalance = 0;\n\n    if (selecting === \"TK1\") {\n      handleClose();\n      a1 = address;\n\n      if (address === \"BNB\") {\n        oneBalance = await ContractServices.getBNBBalance(isUserConnected);\n        setTokenOneApproved(true);\n      } else {\n        setTokenOneApproved(false);\n        oneBalance = await ContractServices.getTokenBalance(address, isUserConnected);\n      }\n\n      setTokenOne(token);\n      setCurrencyNameForTokenOne(symbol);\n      setTokenOneBalance(oneBalance);\n\n      if (tokenTwo.address) {\n        a2 = tokenTwo.address;\n      }\n\n      if (tokenOneValue > 0) {\n        const r = await getAllowance(tokenOneValue, \"TK1\");\n      }\n    }\n\n    if (selecting === \"TK2\") {\n      handleClose();\n      a2 = address;\n\n      if (address === \"BNB\") {\n        setTokenTwoApproved(true);\n        twoBalance = await ContractServices.getBNBBalance(isUserConnected);\n      } else {\n        setTokenTwoApproved(false);\n        twoBalance = await ContractServices.getTokenBalance(address, isUserConnected);\n      }\n\n      setTokenTwo(token);\n      setCurrencyNameForTokenTwo(symbol);\n      setTokenTwoBalance(twoBalance);\n\n      if (tokenOne.address) {\n        a1 = tokenOne.address;\n      }\n\n      if (tokenTwoValue > 0) {\n        const r = await getAllowance(tokenTwoValue, \"TK2\");\n      }\n    }\n\n    setModalCurrency(!modalCurrency);\n    setSearch(\"\");\n    setFilteredTokenList(tokenList);\n\n    if (a1 && a2) {\n      let currentPairAddress;\n\n      if (a1 === \"BNB\") {\n        a1 = WETH; //WETH\n\n        currentPairAddress = await ExchangeService.getPair(a1, a2);\n      } else if (a2 === \"BNB\") {\n        a2 = WETH; //WETH\n\n        currentPairAddress = await ExchangeService.getPair(a1, a2);\n      } else {\n        currentPairAddress = await ExchangeService.getPair(a1, a2);\n      }\n\n      if (currentPairAddress !== \"0x0000000000000000000000000000000000000000\") {\n        setCurrentPairAddress(currentPairAddress);\n        const lpTokenBalance = await ContractServices.getTokenBalance(currentPairAddress, isUserConnected);\n        const d1 = await ContractServices.getDecimals(a1);\n        const d2 = await ContractServices.getDecimals(a2);\n        const reserves = await ExchangeService.getReserves(currentPairAddress);\n        calculateLiquidityPercentageWithSelectCurrency(reserves, d1, d2, lpTokenBalance, currentPairAddress);\n        setLpTokenBalance(lpTokenBalance);\n        setFirstProvider(false);\n        setShowPoolShare(true); // xxxxxxxxx\n        // const reserves = await ExchangeService.getReserves(currentPairAddress);\n        // calculateLiquidityPercentage(reserves, amt1, amt2);\n        // console.log('qqqqq', currentPairAddress);\n        // const reserves = await ExchangeService.getReserves(currentPairAddress);\n        // console.log('aaaaa', reserves);\n        // await calculateLiquidityPercentage(reserves, 0.1, 0.02);\n        // console.log('wwww', result);\n      } else {\n        setCurrentPairAddress(\"\");\n        setFirstProvider(true);\n        setShowPoolShare(true);\n        setLpTokenBalance(0);\n      }\n    }\n  };\n\n  const getAllowance = async (amount, tokenType) => {\n    if (tokenType === \"TK1\") {\n      if (isUserConnected && tokenOne.address !== \"BNB\") {\n        let allowance = await ContractServices.allowanceToken(tokenOne.address, MAIN_CONTRACT_LIST.router.address, isUserConnected);\n        allowance = Number(allowance) / 10 ** Number(tokenOne.decimals); // console.log(allowance, 'token 1')\n\n        if (amount > allowance) {\n          setTokenOneApproval(true);\n        } else {\n          setTokenOneApproved(true);\n        }\n      } else {\n        setTokenOneApproved(true);\n      }\n    }\n\n    if (tokenType === \"TK2\") {\n      if (isUserConnected && tokenTwo.address !== \"BNB\") {\n        let allowance = await ContractServices.allowanceToken(tokenTwo.address, MAIN_CONTRACT_LIST.router.address, isUserConnected);\n        allowance = Number(allowance) / 10 ** Number(tokenTwo.decimals); // console.log(allowance, 'token 2')\n\n        if (amount > allowance) {\n          setTokenTwoApproval(true);\n        } else {\n          setTokenTwoApproved(true);\n        }\n      } else {\n        setTokenTwoApproved(true);\n      }\n    }\n\n    return true;\n  };\n\n  const handleTokenValue = async (amount, tokenType) => {\n    let amt1, amt2;\n\n    if (tokenType === \"TK1\") {\n      setTokenOneValue(amount);\n      amt1 = amount;\n      const r = await getAllowance(amount, tokenType);\n\n      if (r && tokenOne.address && tokenTwo.address && amount > 0) {\n        let tokenAddress = tokenOne.address;\n\n        if (tokenOne.address === \"BNB\") {\n          tokenAddress = WETH;\n        }\n\n        if (currentPairAddress) {\n          const tk0 = await ExchangeService.getTokenZero(currentPairAddress);\n          const tk1 = await ExchangeService.getTokenOne(currentPairAddress);\n          const reserves = await ExchangeService.getReserves(currentPairAddress);\n          const token0Decimal = await ContractServices.getDecimals(tk0);\n          const token1Decimal = await ContractServices.getDecimals(tk1);\n\n          if (tk0 && reserves) {\n            let a;\n\n            if (tokenAddress.toLowerCase() === tk0.toLowerCase()) {\n              a = (amount * (reserves[1] / 10 ** token1Decimal / (reserves[0] / 10 ** token0Decimal))).toFixed(5);\n            } else {\n              a = (amount * (reserves[0] / 10 ** token0Decimal / (reserves[1] / 10 ** token1Decimal))).toFixed(5);\n            }\n\n            setTokenTwoValue(a);\n            amt2 = a;\n\n            if (!tokenTwoApproval) {\n              const r = await getAllowance(a, \"TK2\");\n              handleApprovalButton(\"TK2\");\n            }\n          }\n        }\n      }\n    }\n\n    if (tokenType === \"TK2\") {\n      setTokenTwoValue(amount);\n      amt2 = amount;\n      const r = await getAllowance(amount, tokenType);\n\n      if (r && tokenOne.address && tokenTwo.address && amount > 0) {\n        let tokenAddress = tokenTwo.address;\n\n        if (tokenTwo.address === \"BNB\") {\n          tokenAddress = WETH;\n        }\n\n        if (currentPairAddress) {\n          const tk0 = await ExchangeService.getTokenZero(currentPairAddress);\n          const tk1 = await ExchangeService.getTokenOne(currentPairAddress);\n          const reserves = await ExchangeService.getReserves(currentPairAddress);\n          const token0Decimal = await ContractServices.getDecimals(tk0);\n          const token1Decimal = await ContractServices.getDecimals(tk1);\n\n          if (tk0 && reserves) {\n            let a;\n\n            if (tokenAddress.toLowerCase() === tk0.toLowerCase()) {\n              a = (amount * (reserves[1] / 10 ** token1Decimal / (reserves[0] / 10 ** token0Decimal))).toFixed(5);\n            } else {\n              a = (amount * (reserves[0] / 10 ** token0Decimal / (reserves[1] / 10 ** token1Decimal))).toFixed(5);\n            }\n\n            setTokenOneValue(a);\n            amt1 = a;\n\n            if (!tokenOneApproval) {\n              const r = await getAllowance(a, \"TK1\");\n              handleApprovalButton(\"TK1\");\n            }\n          }\n        }\n      }\n    }\n\n    if (tokenOne.address && tokenTwo.address) {\n      let a1 = tokenOne.address,\n          a2 = tokenTwo.address;\n      let currentPairAddress;\n\n      if (a1 === \"BNB\") {\n        a1 = WETH; //WETH\n\n        currentPairAddress = await ExchangeService.getPair(a1, a2);\n      } else if (a2 === \"BNB\") {\n        a2 = WETH; //WETH\n\n        currentPairAddress = await ExchangeService.getPair(a1, a2);\n      } else {\n        currentPairAddress = await ExchangeService.getPair(a1, a2);\n      }\n\n      if (currentPairAddress !== \"0x0000000000000000000000000000000000000000\") {\n        setCurrentPairAddress(currentPairAddress);\n        const lpTokenBalance = await ContractServices.getTokenBalance(currentPairAddress, isUserConnected);\n        setLpTokenBalance(lpTokenBalance);\n        const reserves = await ExchangeService.getReserves(currentPairAddress);\n        const ratio = await calculateLiquidityPercentage(reserves, amt1, amt2); // console.log(reserves, ratio, '---------------------------ratio');\n\n        setSharePoolValue(ratio);\n        setFirstProvider(false);\n        setShowPoolShare(true);\n      } else {\n        setCurrentPairAddress(\"\");\n        setFirstProvider(true);\n        setShowPoolShare(true);\n        setLpTokenBalance(0);\n      }\n    }\n  }; //call web3 approval function\n\n\n  const handleTokenApproval = async tokenType => {\n    const acc = await ContractServices.getDefaultAccount();\n\n    if (acc && acc.toLowerCase() !== isUserConnected.toLowerCase()) {\n      return toast.error(\"Wallet address doesn`t match!\");\n    }\n\n    if (approvalConfirmation) {\n      return toast.info(\"Token approval is processing\");\n    } // const value = (2*256 - 1).toString();\n\n\n    const value = \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n    let tokenAddress = \"BNB\";\n\n    if (tokenType === \"TK1\") {\n      tokenAddress = tokenOne.address;\n    }\n\n    if (tokenType === \"TK2\") {\n      tokenAddress = tokenTwo.address;\n    }\n\n    try {\n      dispatch(startLoading());\n      const r = await ContractServices.approveToken(isUserConnected, value, MAIN_CONTRACT_LIST.router.address, tokenAddress);\n\n      if (r.code == 4001) {\n        toast.error(\"User denied transaction signature.\");\n      } else {\n        setApprovalConfirmation(true);\n        let data = {\n          message: `Approve`,\n          tx: r.transactionHash\n        };\n\n        if (tokenType === \"TK1\") {\n          setTokenOneApproved(true);\n          setTokenOneApproval(false);\n          data.message = `Approve ${tokenOne.symbol}`;\n        }\n\n        if (tokenType === \"TK2\") {\n          setTokenTwoApproved(true);\n          setTokenTwoApproval(false);\n          data.message = `Approve ${tokenTwo.symbol}`;\n        }\n\n        dispatch(addTransaction(data));\n        setApprovalConfirmation(false);\n      }\n\n      dispatch(stopLoading());\n    } catch (err) {\n      setApprovalConfirmation(false);\n      dispatch(stopLoading());\n      console.log(err);\n      toast.error(\"Transaction Reverted!\");\n    }\n  };\n\n  const handleSearchToken = async data => {\n    try {\n      const res = await dispatch(searchTokenByNameOrAddress(data));\n      setFilteredTokenList(res);\n    } catch (error) {\n      toast.error(\"Something went wrong!\");\n    }\n  };\n\n  const handleApprovalButton = tokenType => {\n    if (tokenOneApproval && tokenType === \"TK1\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col button_unlockWallet\",\n        children: /*#__PURE__*/_jsxDEV(ButtonPrimary, {\n          className: \"swapBtn\",\n          title: `Approve ${tokenOne.symbol}`,\n          disabled: approvalConfirmation,\n          onClick: () => handleTokenApproval(tokenType)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 506,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 505,\n        columnNumber: 9\n      }, this);\n    }\n\n    if (tokenTwoApproval && tokenType === \"TK2\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col button_unlockWallet\",\n        children: /*#__PURE__*/_jsxDEV(ButtonPrimary, {\n          className: \"swapBtn\",\n          title: `Approve ${tokenTwo.symbol}`,\n          disabled: approvalConfirmation,\n          onClick: () => handleTokenApproval(tokenType)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 518,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 517,\n        columnNumber: 9\n      }, this);\n    } //dead code\n\n\n    return null;\n  };\n\n  const calculateLiquidityPercentageWithSelectCurrency = async (reserve, d1, d2, lpBalance, currentPairAddress) => {\n    const _reserve0 = Number(reserve[\"_reserve0\"]) / 10 ** d1;\n\n    const _reserve1 = Number(reserve[\"_reserve1\"]) / 10 ** d2;\n\n    let _totalSupply = await ContractServices.getTotalSupply(currentPairAddress);\n\n    let ratio = lpBalance / _totalSupply;\n\n    const t0 = (ratio * _reserve0).toFixed(5);\n\n    setTokenOneDeposit(t0);\n\n    const t1 = (ratio * _reserve1).toFixed(5);\n\n    setTokenTwoDeposit(t1);\n  };\n\n  const calculateLiquidityPercentage = async (reserve, amount0, amount1) => {\n    const _reserve0 = Number(reserve[\"_reserve0\"]) / 10 ** tokenOne.decimals;\n\n    const _reserve1 = Number(reserve[\"_reserve1\"]) / 10 ** tokenTwo.decimals;\n\n    let liquidity = 0;\n\n    let _totalSupply = await ContractServices.getTotalSupply(currentPairAddress);\n\n    let ratio = lpTokenBalance / _totalSupply;\n\n    const t0 = (ratio * _reserve0).toFixed(5);\n\n    setTokenOneDeposit(t0);\n\n    const t1 = (ratio * _reserve1).toFixed(5);\n\n    setTokenTwoDeposit(t1);\n\n    if (_totalSupply === 0) {\n      liquidity = Math.sqrt(amount0 * amount1) - MINIMUM_LIQUIDITY;\n      return 100;\n    } else {\n      liquidity = Math.min(amount0 * _totalSupply / _reserve0, amount1 * _totalSupply / _reserve1);\n    }\n\n    liquidity = (liquidity / (_totalSupply + liquidity) * 100).toFixed(2);\n    return liquidity;\n  };\n\n  const checkAddLiquidity = async () => {\n    if (!isUserConnected) {\n      handleShow1();\n    } else {\n      let address;\n\n      if (walletType === \"Metamask\") {\n        address = await ContractServices.isMetamaskInstalled(\"\");\n      }\n\n      if (walletType === \"BinanceChain\") {\n        address = await ContractServices.isBinanceChainInstalled();\n      }\n\n      if (isUserConnected.toLowerCase() !== address.toLowerCase()) {\n        return toast.error(\"Mismatch wallet address!\");\n      }\n\n      if (!tokenOne.address) {\n        return toast.error(\"Select first token!\");\n      }\n\n      if (!tokenTwo.address) {\n        return toast.error(\"Select second token!\");\n      }\n\n      if (tokenOneValue <= 0) {\n        return toast.error(\"Enter first token value!\");\n      }\n\n      if (tokenTwoValue <= 0) {\n        return toast.error(\"Enter second token value!\");\n      }\n\n      if (!tokenOneApproved) {\n        return toast.error(\"First Token approval is pending!\");\n      }\n\n      if (!tokenTwoApproved) {\n        return toast.error(\"Second Token approval is pending!\");\n      }\n\n      console.log(tokenOneBalance < tokenOneValue, tokenOneBalance, tokenOneValue);\n\n      if (tokenOneBalance < tokenOneValue) {\n        return toast.error(`Wallet have insufficient ${tokenOne.symbol} balance!`);\n      }\n\n      if (tokenTwoBalance < tokenTwoValue) {\n        return toast.error(`Wallet have insufficient ${tokenTwo.symbol} balance!`);\n      }\n\n      setShowSupplyModal(true);\n    }\n  };\n\n  const addLiquidity = async () => {\n    const acc = await ContractServices.getDefaultAccount();\n\n    if (acc && acc.toLowerCase() !== isUserConnected.toLowerCase()) {\n      return toast.error(\"Wallet address doesn`t match!\");\n    }\n\n    if (liquidityConfirmation) {\n      return toast.info(\"Transaction is processing!\");\n    }\n\n    setLiquidityConfirmation(true);\n    let value = 0,\n        checkBNB = false,\n        token;\n    let dl = Math.floor(new Date().getTime() / 1000);\n    dl = dl + deadline * 60;\n\n    if (tokenOne.address === \"BNB\") {\n      checkBNB = true;\n      value = tokenOneValue;\n      token = tokenTwo.address;\n    }\n\n    if (tokenTwo.address === \"BNB\") {\n      checkBNB = true;\n      value = tokenTwoValue;\n      token = tokenOne.address;\n    }\n\n    if (value > 0) {\n      value = value * 10 ** 18;\n    }\n\n    if (checkBNB) {\n      let amountETHMin = BigNumber(Math.floor(Number(value) - Number(value) * slippagePercentage / 100)).toFixed();\n      let amountTokenMin = \"\";\n      let amountTokenDesired = 0;\n\n      if (tokenOne.address === \"BNB\") {\n        amountTokenDesired = tokenTwoValue;\n        amountTokenMin = BigNumber(Math.floor((amountTokenDesired - amountTokenDesired * slippagePercentage / 100) * 10 ** tokenTwo.decimals)).toFixed();\n        amountTokenDesired = BigNumber(amountTokenDesired * 10 ** tokenTwo.decimals).toFixed();\n      }\n\n      if (tokenTwo.address === \"BNB\") {\n        amountTokenDesired = tokenOneValue;\n        amountTokenMin = BigNumber(Math.floor((amountTokenDesired - amountTokenDesired * slippagePercentage / 100) * 10 ** tokenOne.decimals)).toFixed();\n        amountTokenDesired = BigNumber(amountTokenDesired * 10 ** tokenOne.decimals).toFixed();\n      }\n\n      value = value.toString();\n      const data = {\n        token,\n        amountTokenDesired,\n        amountTokenMin,\n        amountETHMin,\n        to: isUserConnected,\n        deadline: dl,\n        value\n      };\n\n      try {\n        dispatch(startLoading());\n        const result = await ExchangeService.addLiquidityETH(data); // console.log(result, \"add liquidity transaction\");\n\n        dispatch(stopLoading());\n\n        if (result) {\n          setTxHash(result);\n          setShowTransactionModal(true);\n          setShowSupplyModal(false);\n          const data = {\n            message: `Add ${tokenOne.symbol} and ${tokenTwo.symbol}`,\n            tx: result\n          };\n          dispatch(addTransaction(data));\n          dispatch(checkUserLpTokens(false));\n        }\n\n        setLiquidityConfirmation(false);\n      } catch (err) {\n        dispatch(stopLoading());\n        const message = await ContractServices.web3ErrorHandle(err);\n        toast.error(message);\n        setLiquidityConfirmation(false);\n      }\n    } else {\n      let amountADesired = tokenOneValue;\n      let amountBDesired = tokenTwoValue;\n      let amountAMin = Math.floor(amountADesired - amountADesired * slippagePercentage / 100);\n      let amountBMin = Math.floor(amountBDesired - amountBDesired * slippagePercentage / 100);\n      amountADesired = BigNumber(amountADesired * 10 ** tokenOne.decimals).toFixed();\n      amountBDesired = BigNumber(amountBDesired * 10 ** tokenTwo.decimals).toFixed();\n      amountAMin = BigNumber(amountAMin * 10 ** tokenOne.decimals).toFixed();\n      amountBMin = BigNumber(amountBMin * 10 ** tokenOne.decimals).toFixed();\n      let dl = Math.floor(new Date().getTime() / 1000);\n      dl = dl + deadline * 60;\n      const data = {\n        tokenA: tokenOne.address,\n        tokenB: tokenTwo.address,\n        amountADesired,\n        amountBDesired,\n        amountAMin,\n        amountBMin,\n        to: isUserConnected,\n        deadline: dl,\n        value\n      };\n\n      try {\n        dispatch(startLoading());\n        const result = await ExchangeService.addLiquidity(data); // console.log(result, \"add liquidity transaction\");\n\n        dispatch(stopLoading());\n\n        if (result) {\n          setTxHash(result);\n          setShowTransactionModal(true);\n          setShowSupplyModal(false);\n          const data = {\n            message: `Add ${tokenOne.symbol} and ${tokenTwo.symbol}`,\n            tx: result\n          };\n          dispatch(addTransaction(data));\n          dispatch(checkUserLpTokens(false));\n        }\n\n        setLiquidityConfirmation(false);\n      } catch (err) {\n        console.log(err);\n        dispatch(stopLoading());\n        const message = await ContractServices.web3ErrorHandle(err);\n        toast.error(message);\n        setLiquidityConfirmation(false);\n      }\n    }\n  };\n\n  const calculateFraction = tokenType => {\n    let r = 0;\n\n    if (tokenOneValue && tokenTwoValue) {\n      if (tokenType === \"TK1\") {\n        if (tokenOneValue === 0) return 0;\n        r = tokenTwoValue / tokenOneValue;\n      }\n\n      if (tokenType === \"TK2\") {\n        if (tokenTwoValue === 0) return 0;\n        r = tokenOneValue / tokenTwoValue;\n      }\n\n      return Number(r.toFixed(5));\n    } else {\n      return 0;\n    }\n  };\n\n  const handleMaxBalance = async amountIn => {\n    if (!isUserConnected) {\n      return toast.error('Connect wallet first!');\n    }\n\n    if (tokenOne.address === 'BNB') {\n      // .002 BNB is reserved for saving gas fee \n      const bnbBalance = (await ContractServices.getBNBBalance(isUserConnected)) - 0.1;\n      handleTokenValue(bnbBalance, amountIn);\n      setMax(false);\n    } else {\n      // __ amount of particular token must be reserved for saving -needs to be fixed \n      const tokenBalance = await ContractServices.getTokenBalance(tokenOne.address, isUserConnected);\n      handleTokenValue(tokenBalance, amountIn);\n      setMax(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Container, {\n      fluid: true,\n      className: \"swapScreen comnSection\",\n      children: /*#__PURE__*/_jsxDEV(CardCustom, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"settingSec\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"in_title\",\n            children: [/*#__PURE__*/_jsxDEV(ButtonBack, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 823,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n              className: \"ps-5\",\n              children: \"Add Liquidity\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 824,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 822,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"settingIcon\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: TimerIcon,\n              onClick: () => setShowRecent(true),\n              className: \"timerImg\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 827,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              src: SettingIcon,\n              onClick: () => settinghandleShow(true)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 832,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 826,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 821,\n          columnNumber: 11\n        }, this), firstProvider && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"firstPro_Note\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"You are the first liquidity provider.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 837,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"The ratio of tokens you add will set the price of this pool.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 838,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Once you are happy with the rate click supply to review.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 841,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 836,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"liquidtySec\",\n          children: [/*#__PURE__*/_jsxDEV(SelectCoin, {\n            label: `Balance: ${tokenOneBalance}`,\n            coinImage: tokenOne === null || tokenOne === void 0 ? void 0 : tokenOne.icon,\n            value: tokenOneCurrency,\n            onClick: () => onHandleOpenModal(\"TK1\"),\n            inputLabel: \"Input\",\n            className: \"mb-0\",\n            placeholder: \"0.0\",\n            onChange: e => handleTokenValue(e.target.value, \"TK1\"),\n            defaultValue: tokenOneValue,\n            max: max,\n            onMax: () => handleMaxBalance('TK1')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 846,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"convert_plus\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: Plusicon,\n              style: {\n                width: 22\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 861,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 860,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(SelectCoin, {\n            label: `Balance: ${tokenTwoBalance}`,\n            coinImage: tokenTwo === null || tokenTwo === void 0 ? void 0 : tokenTwo.icon,\n            value: tokenTwoCurrency,\n            onClick: () => onHandleOpenModal(\"TK2\"),\n            inputLabel: \"Input\",\n            className: \"mb-0\",\n            placeholder: \"0.0\",\n            onChange: e => handleTokenValue(e.target.value, \"TK2\"),\n            defaultValue: tokenTwoValue,\n            max: false\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 864,\n            columnNumber: 15\n          }, this), showPoolShare && /*#__PURE__*/_jsxDEV(Col, {\n            className: \"poolSec\",\n            children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n              children: \"PRICES AND POOL SHARE\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 879,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"poolDiv\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: [calculateFraction(\"TK1\"), \" per\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 883,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n                  children: [\" \", tokenTwoCurrency, \" per \", tokenOneCurrency]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 884,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 881,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: [calculateFraction(\"TK2\"), \" per\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 891,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n                  children: [\" \", tokenOneCurrency, \" per \", tokenTwoCurrency]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 892,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 889,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: [sharePoolValue, \"% \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 898,\n                  columnNumber: 39\n                }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n                  children: \"Share of Pool\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 899,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 897,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 880,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 878,\n            columnNumber: 15\n          }, this), currentPairAddress && /*#__PURE__*/_jsxDEV(Col, {\n            className: \"lp-class\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"LP Tokens in your Wallet\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 906,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              className: \"LptokensList\",\n              children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                    className: \"sc-fWPcDo bUpjCL\",\n                    alt: \"icon 1\",\n                    src: tokenOne === null || tokenOne === void 0 ? void 0 : tokenOne.icon\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 910,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                    className: \"sc-fWPcDo bUpjCL\",\n                    alt: \"icon 2\",\n                    src: tokenTwo === null || tokenTwo === void 0 ? void 0 : tokenTwo.icon\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 915,\n                    columnNumber: 23\n                  }, this), \"\\xA0\\xA0\", `${tokenOneCurrency}/${tokenTwoCurrency}`, \":\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 909,\n                  columnNumber: 21\n                }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: lpTokenBalance === null || lpTokenBalance === void 0 ? void 0 : lpTokenBalance.toFixed(5)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 923,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 908,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [tokenOne.symbol, \": \", /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: tokenOneDeposit\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 926,\n                  columnNumber: 40\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 925,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [\" \", tokenTwo.symbol, \": \", /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: tokenTwoDeposit\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 930,\n                  columnNumber: 40\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 928,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 907,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 905,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 844,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          className: \"swapBtn_col\",\n          children: [handleApprovalButton(\"TK1\"), handleApprovalButton(\"TK2\"), /*#__PURE__*/_jsxDEV(ButtonPrimary, {\n            className: \"swapBtn dismissBtn\",\n            title: isUserConnected ? \"Supply\" : \"Unlock Wallet\" // onClick={() => handleShow1(true)}\n            ,\n            onClick: () => checkAddLiquidity()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 940,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 936,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 820,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 819,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ModalCurrency, {\n      show: show,\n      handleClose: handleClose,\n      tokenList: filteredTokenList,\n      searchToken: handleSearchToken,\n      searchByName: setSearch,\n      selectCurrency: onHandleSelectCurrency,\n      tokenType: tokenType,\n      currencyName: selectedCurrency,\n      handleOrder: setFilteredTokenList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 949,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ConnectWallet, {\n      show: show1,\n      handleShow: handleShow1,\n      handleClose: handleClose1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 960,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SettingModal, {\n      show: settingShow,\n      handleShow: settinghandleShow,\n      handleClose: settingClose\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 965,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SupplyModal, {\n      show: showSupplyModal,\n      handleClose: supplyModalClose,\n      addLiquidity: addLiquidity,\n      liquidityConfirmation: liquidityConfirmation,\n      tokenOneCurrency: tokenOneCurrency,\n      tokenOneValue: tokenOneValue,\n      tokenTwoCurrency: tokenTwoCurrency,\n      tokenTwoValue: tokenTwoValue,\n      calculateFraction: calculateFraction,\n      sharePoolValue: sharePoolValue,\n      tokenOne: tokenOne,\n      tokenTwo: tokenTwo,\n      slippagePercentage: slippagePercentage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 970,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RecentTransactions, {\n      show: showRecent,\n      handleClose: recentTransactionsClose\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 985,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(AddLiquidity, \"8BRZjCV458kkwWyow9e3iVNQK4k=\", false, function () {\n  return [useSelector, useDispatch, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = AddLiquidity;\nexport default AddLiquidity;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddLiquidity\");","map":{"version":3,"sources":["/home/user/Desktop/nm/SaitaSwap/src/pages/Trade/AddLiquidity.js"],"names":["React","useEffect","useState","Container","Col","ConnectWallet","CardCustom","ButtonPrimary","SelectCoin","Plusicon","ModalCurrency","ButtonBack","SettingModal","useSelector","useDispatch","MAIN_CONTRACT_LIST","TOKEN_LIST","WETH","ContractServices","toast","ExchangeService","addTransaction","checkUserLpTokens","searchTokenByNameOrAddress","startLoading","stopLoading","BigNumber","SupplyModal","RecentTransactions","AddLiquidity","props","tokenList","state","persist","show","setShow","handleClose","show1","setShow1","handleClose1","handleShow1","settingShow","setsettingShow","settingClose","showRecent","setShowRecent","supplyModalClose","setShowSupplyModal","recentTransactionsClose","settinghandleShow","search","setSearch","max","setMax","dispatch","MINIMUM_LIQUIDITY","isUserConnected","walletType","deadline","slippagePercentage","modalCurrency","setModalCurrency","tokenOne","setTokenOne","tokenTwo","setTokenTwo","tokenOneValue","setTokenOneValue","tokenTwoValue","setTokenTwoValue","sharePoolValue","setSharePoolValue","tokenOneCurrency","setCurrencyNameForTokenOne","symbol","tokenTwoCurrency","setCurrencyNameForTokenTwo","tokenOneBalance","setTokenOneBalance","tokenTwoBalance","setTokenTwoBalance","tokenOneDeposit","setTokenOneDeposit","tokenTwoDeposit","setTokenTwoDeposit","tokenOneApproval","setTokenOneApproval","tokenTwoApproval","setTokenTwoApproval","tokenOneApproved","setTokenOneApproved","tokenTwoApproved","setTokenTwoApproved","lpTokenBalance","setLpTokenBalance","tokenType","setTokenType","showSupplyModal","filteredTokenList","setFilteredTokenList","approvalConfirmation","setApprovalConfirmation","liquidityConfirmation","setLiquidityConfirmation","selectedCurrency","setSelectedCurrency","currentPairAddress","setCurrentPairAddress","firstProvider","setFirstProvider","showPoolShare","setShowPoolShare","showTransactionModal","setShowTransactionModal","txHash","setTxHash","filter","token","name","toLowerCase","includes","init","oneBalance","getBNBBalance","lptoken","pair","balance","poolShare","token0Obj","token0Deposit","tokenBal","address","getTokenBalance","token1Obj","token1Deposit","closeTransactionModal","backBtn","window","location","reload","onHandleOpenModal","error","onHandleSelectCurrency","selecting","a1","a2","twoBalance","r","getAllowance","getPair","d1","getDecimals","d2","reserves","getReserves","calculateLiquidityPercentageWithSelectCurrency","amount","allowance","allowanceToken","router","Number","decimals","handleTokenValue","amt1","amt2","tokenAddress","tk0","getTokenZero","tk1","getTokenOne","token0Decimal","token1Decimal","a","toFixed","handleApprovalButton","ratio","calculateLiquidityPercentage","handleTokenApproval","acc","getDefaultAccount","info","value","approveToken","code","data","message","tx","transactionHash","err","console","log","handleSearchToken","res","reserve","lpBalance","_reserve0","_reserve1","_totalSupply","getTotalSupply","t0","t1","amount0","amount1","liquidity","Math","sqrt","min","checkAddLiquidity","isMetamaskInstalled","isBinanceChainInstalled","addLiquidity","checkBNB","dl","floor","Date","getTime","amountETHMin","amountTokenMin","amountTokenDesired","toString","to","result","addLiquidityETH","web3ErrorHandle","amountADesired","amountBDesired","amountAMin","amountBMin","tokenA","tokenB","calculateFraction","handleMaxBalance","amountIn","bnbBalance","tokenBalance","TimerIcon","SettingIcon","icon","e","target","width"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Container, Col } from \"react-bootstrap\";\nimport ConnectWallet from \"../../components/ConnectWallet/ConnectWallet\";\nimport CardCustom from \"../../components/cardCustom/CardCustom\";\nimport ButtonPrimary from \"../../components/Button/Button\";\nimport SelectCoin from \"../../components/selectCoin/SelectCoin\";\nimport Plusicon from \"../../assets/images/plus_yellow.png\";\nimport ModalCurrency from \"../../components/Modal/ModalCurrency/ModalCurrency\";\nimport ButtonBack from \"../../components/buttonBack/ButtonBack\";\nimport \"./Trade.scss\";\nimport SettingModal from \"../../components/Modal/SettingModal/SettingModal\";\nimport SettingIcon from \"../../assets/images/Settings-Icon.svg\";\nimport TimerIcon from \"../../assets/images/ionic-ios-timer.svg\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { MAIN_CONTRACT_LIST, TOKEN_LIST, WETH } from \"../../assets/tokens\";\nimport { ContractServices } from \"../../services/ContractServices\";\nimport { toast } from \"../../components/Toast/Toast\";\nimport { ExchangeService } from \"../../services/ExchangeService\";\nimport {\n  addTransaction,\n  checkUserLpTokens,\n  searchTokenByNameOrAddress,\n  startLoading,\n  stopLoading,\n} from \"../../redux/actions\";\nimport { BigNumber } from \"bignumber.js\";\nimport SupplyModal from \"../../components/SupplyModal/SupplyModal\";\nimport RecentTransactions from \"../../components/RecentTransactions/RecentTransactions\";\n\nconst AddLiquidity = (props) => {\n  const tokenList = useSelector((state) => state.persist.tokenList);\n\n  const [show, setShow] = useState(false);\n  const handleClose = () => setShow(false);\n  const [show1, setShow1] = useState(false);\n  const handleClose1 = () => setShow1(false);\n  const handleShow1 = () => setShow1(true);\n  const [settingShow, setsettingShow] = useState(false);\n  const settingClose = () => setsettingShow(false);\n  const [showRecent, setShowRecent] = useState(false);\n  const supplyModalClose = () => setShowSupplyModal(false);\n  const recentTransactionsClose = () => setShowRecent(false);\n  const settinghandleShow = () => setsettingShow(true);\n  const [search, setSearch] = useState(\"\");\n  const [max, setMax] = useState(true);\n\n  const dispatch = useDispatch();\n\n  const MINIMUM_LIQUIDITY = 10 ** 3;\n\n  const isUserConnected = useSelector((state) => state.persist.isUserConnected);\n  const walletType = useSelector((state) => state.persist.walletType);\n  const deadline = useSelector((state) => state.persist.deadline);\n  const slippagePercentage = useSelector(\n    (state) => state.persist.slippagePercentage\n  );\n\n  const [modalCurrency, setModalCurrency] = useState(false);\n  const [tokenOne, setTokenOne] = useState(TOKEN_LIST[0]);\n  const [tokenTwo, setTokenTwo] = useState({});\n  const [tokenOneValue, setTokenOneValue] = useState();\n  const [tokenTwoValue, setTokenTwoValue] = useState();\n  const [sharePoolValue, setSharePoolValue] = useState(100);\n  const [tokenOneCurrency, setCurrencyNameForTokenOne] = useState(\n    TOKEN_LIST[0].symbol\n  );\n  const [tokenTwoCurrency, setCurrencyNameForTokenTwo] =\n    useState(\"Select a token\");\n  const [tokenOneBalance, setTokenOneBalance] = useState(0);\n  const [tokenTwoBalance, setTokenTwoBalance] = useState(0);\n  const [tokenOneDeposit, setTokenOneDeposit] = useState(0);\n  const [tokenTwoDeposit, setTokenTwoDeposit] = useState(0);\n  const [tokenOneApproval, setTokenOneApproval] = useState(false);\n  const [tokenTwoApproval, setTokenTwoApproval] = useState(false);\n\n  const [tokenOneApproved, setTokenOneApproved] = useState(false);\n  const [tokenTwoApproved, setTokenTwoApproved] = useState(false);\n\n  const [lpTokenBalance, setLpTokenBalance] = useState(0);\n  const [tokenType, setTokenType] = useState(\"TK1\");\n  const [showSupplyModal, setShowSupplyModal] = useState(false);\n\n  const [filteredTokenList, setFilteredTokenList] = useState([]);\n  const [approvalConfirmation, setApprovalConfirmation] = useState(false);\n  const [liquidityConfirmation, setLiquidityConfirmation] = useState(false);\n\n  const [selectedCurrency, setSelectedCurrency] = useState(\"\");\n\n  const [currentPairAddress, setCurrentPairAddress] = useState(\"\");\n  const [firstProvider, setFirstProvider] = useState(false);\n  const [showPoolShare, setShowPoolShare] = useState(false);\n  const [showTransactionModal, setShowTransactionModal] = useState(false);\n  const [txHash, setTxHash] = useState(\"\");\n\n  useEffect(() => {\n    setFilteredTokenList(tokenList.filter((token) => token.name.toLowerCase().includes(search.toLowerCase())));\n    init();\n  }, [search, tokenList]);\n\n  const init = async () => {\n    if (isUserConnected) {\n      const oneBalance = await ContractServices.getBNBBalance(isUserConnected);\n      setTokenOneBalance(oneBalance);\n\n      const { lptoken } = props;\n      if (lptoken) {\n        setCurrentPairAddress(lptoken.pair);\n        setLpTokenBalance(lptoken.balance);\n        setSharePoolValue(lptoken.poolShare);\n        if (lptoken.token0Obj) {\n          setTokenOne(lptoken.token0Obj);\n          setCurrencyNameForTokenOne(lptoken.token0Obj.symbol);\n          setTokenOneDeposit(lptoken.token0Deposit);\n          let tokenBal = 0;\n          if (lptoken.token0Obj.address === \"BNB\") {\n            tokenBal = oneBalance;\n          } else {\n            tokenBal = await ContractServices.getTokenBalance(\n              lptoken.token0Obj.address,\n              isUserConnected\n            );\n          }\n          setTokenOneBalance(tokenBal);\n        }\n        if (lptoken.token1Obj) {\n          setTokenTwo(lptoken.token1Obj);\n          setCurrencyNameForTokenTwo(lptoken.token1Obj.symbol);\n          setTokenTwoDeposit(lptoken.token1Deposit);\n          let tokenBal = 0;\n          if (lptoken.token1Obj.address === \"BNB\") {\n            tokenBal = oneBalance;\n          } else {\n            tokenBal = await ContractServices.getTokenBalance(\n              lptoken.token1Obj.address,\n              isUserConnected\n            );\n          }\n          setTokenTwoBalance(tokenBal);\n        }\n      }\n    }\n  };\n\n  const closeTransactionModal = () => {\n    setShowTransactionModal(false);\n    props.backBtn();\n    window.location.reload();\n  };\n\n  const onHandleOpenModal = (tokenType) => {\n    if (!isUserConnected) {\n      return toast.error(\"Connect wallet first!\");\n    }\n    setShow(true);\n    setFilteredTokenList(tokenList);\n    setSelectedCurrency(\n      tokenType === \"TK1\" ? tokenTwoCurrency : tokenOneCurrency\n    );\n    setModalCurrency({\n      modalCurrency: true,\n    });\n    setTokenType(tokenType);\n  };\n  const onHandleSelectCurrency = async (token, selecting) => {\n\n    const { address, symbol } = token;\n    if (!isUserConnected) {\n      return toast.error(\"Connect wallet first!\");\n    }\n    let a1,\n      a2,\n      oneBalance = 0,\n      twoBalance = 0;\n    if (selecting === \"TK1\") {\n      handleClose();\n      a1 = address;\n      if (address === \"BNB\") {\n        oneBalance = await ContractServices.getBNBBalance(isUserConnected);\n        setTokenOneApproved(true);\n      } else {\n        setTokenOneApproved(false);\n        oneBalance = await ContractServices.getTokenBalance(\n          address,\n          isUserConnected\n        );\n      }\n      setTokenOne(token);\n      setCurrencyNameForTokenOne(symbol);\n      setTokenOneBalance(oneBalance);\n      if (tokenTwo.address) {\n        a2 = tokenTwo.address;\n      }\n      if (tokenOneValue > 0) {\n        const r = await getAllowance(tokenOneValue, \"TK1\");\n      }\n    }\n    if (selecting === \"TK2\") {\n      handleClose();\n      a2 = address;\n      if (address === \"BNB\") {\n        setTokenTwoApproved(true);\n        twoBalance = await ContractServices.getBNBBalance(isUserConnected);\n      } else {\n        setTokenTwoApproved(false);\n        twoBalance = await ContractServices.getTokenBalance(\n          address,\n          isUserConnected\n        );\n      }\n      setTokenTwo(token);\n      setCurrencyNameForTokenTwo(symbol);\n      setTokenTwoBalance(twoBalance);\n      if (tokenOne.address) {\n        a1 = tokenOne.address;\n      }\n      if (tokenTwoValue > 0) {\n        const r = await getAllowance(tokenTwoValue, \"TK2\");\n      }\n    }\n    setModalCurrency(!modalCurrency);\n    setSearch(\"\");\n    setFilteredTokenList(tokenList);\n\n    if (a1 && a2) {\n      let currentPairAddress;\n      if (a1 === \"BNB\") {\n        a1 = WETH; //WETH\n        currentPairAddress = await ExchangeService.getPair(a1, a2);\n      } else if (a2 === \"BNB\") {\n        a2 = WETH; //WETH\n        currentPairAddress = await ExchangeService.getPair(a1, a2);\n      } else {\n        currentPairAddress = await ExchangeService.getPair(a1, a2);\n      }\n\n      if (currentPairAddress !== \"0x0000000000000000000000000000000000000000\") {\n        setCurrentPairAddress(currentPairAddress);\n        const lpTokenBalance = await ContractServices.getTokenBalance(\n          currentPairAddress,\n          isUserConnected\n        );\n        const d1 = await ContractServices.getDecimals(a1);\n        const d2 = await ContractServices.getDecimals(a2);\n        const reserves = await ExchangeService.getReserves(currentPairAddress);\n        calculateLiquidityPercentageWithSelectCurrency(reserves, d1, d2, lpTokenBalance, currentPairAddress);\n        setLpTokenBalance(lpTokenBalance);\n        setFirstProvider(false);\n        setShowPoolShare(true);\n        // xxxxxxxxx\n        // const reserves = await ExchangeService.getReserves(currentPairAddress);\n        // calculateLiquidityPercentage(reserves, amt1, amt2);\n        // console.log('qqqqq', currentPairAddress);\n        // const reserves = await ExchangeService.getReserves(currentPairAddress);\n        // console.log('aaaaa', reserves);\n        // await calculateLiquidityPercentage(reserves, 0.1, 0.02);\n        // console.log('wwww', result);\n      } else {\n        setCurrentPairAddress(\"\");\n        setFirstProvider(true);\n        setShowPoolShare(true);\n        setLpTokenBalance(0);\n      }\n    }\n  };\n\n  const getAllowance = async (amount, tokenType) => {\n    if (tokenType === \"TK1\") {\n      if (isUserConnected && tokenOne.address !== \"BNB\") {\n        let allowance = await ContractServices.allowanceToken(\n          tokenOne.address,\n          MAIN_CONTRACT_LIST.router.address,\n          isUserConnected\n        );\n        allowance = Number(allowance) / 10 ** Number(tokenOne.decimals);\n        // console.log(allowance, 'token 1')\n        if (amount > allowance) {\n          setTokenOneApproval(true);\n        } else {\n          setTokenOneApproved(true);\n        }\n      } else {\n        setTokenOneApproved(true);\n      }\n    }\n    if (tokenType === \"TK2\") {\n      if (isUserConnected && tokenTwo.address !== \"BNB\") {\n        let allowance = await ContractServices.allowanceToken(\n          tokenTwo.address,\n          MAIN_CONTRACT_LIST.router.address,\n          isUserConnected\n        );\n        allowance = Number(allowance) / 10 ** Number(tokenTwo.decimals);\n        // console.log(allowance, 'token 2')\n        if (amount > allowance) {\n          setTokenTwoApproval(true);\n        } else {\n          setTokenTwoApproved(true);\n        }\n      } else {\n        setTokenTwoApproved(true);\n      }\n    }\n    return true;\n  };\n\n  const handleTokenValue = async (amount, tokenType) => {\n    let amt1, amt2;\n    if (tokenType === \"TK1\") {\n      setTokenOneValue(amount);\n      amt1 = amount;\n      const r = await getAllowance(amount, tokenType);\n      if (r && tokenOne.address && tokenTwo.address && amount > 0) {\n        let tokenAddress = tokenOne.address;\n        if (tokenOne.address === \"BNB\") {\n          tokenAddress = WETH;\n        }\n\n        if (currentPairAddress) {\n          const tk0 = await ExchangeService.getTokenZero(currentPairAddress);\n          const tk1 = await ExchangeService.getTokenOne(currentPairAddress);\n          const reserves = await ExchangeService.getReserves(\n            currentPairAddress\n          );\n          const token0Decimal = await ContractServices.getDecimals(tk0);\n          const token1Decimal = await ContractServices.getDecimals(tk1);\n\n          if (tk0 && reserves) {\n            let a;\n            if (tokenAddress.toLowerCase() === tk0.toLowerCase()) {\n              a = (\n                amount *\n                (reserves[1] /\n                  10 ** token1Decimal /\n                  (reserves[0] / 10 ** token0Decimal))\n              ).toFixed(5);\n            } else {\n              a = (\n                amount *\n                (reserves[0] /\n                  10 ** token0Decimal /\n                  (reserves[1] / 10 ** token1Decimal))\n              ).toFixed(5);\n            }\n            setTokenTwoValue(a);\n            amt2 = a;\n            if (!tokenTwoApproval) {\n              const r = await getAllowance(a, \"TK2\");\n              handleApprovalButton(\"TK2\");\n            }\n          }\n        }\n      }\n    }\n    if (tokenType === \"TK2\") {\n      setTokenTwoValue(amount);\n      amt2 = amount;\n      const r = await getAllowance(amount, tokenType);\n      if (r && tokenOne.address && tokenTwo.address && amount > 0) {\n        let tokenAddress = tokenTwo.address;\n        if (tokenTwo.address === \"BNB\") {\n          tokenAddress = WETH;\n        }\n        if (currentPairAddress) {\n          const tk0 = await ExchangeService.getTokenZero(currentPairAddress);\n          const tk1 = await ExchangeService.getTokenOne(currentPairAddress);\n          const reserves = await ExchangeService.getReserves(\n            currentPairAddress\n          );\n          const token0Decimal = await ContractServices.getDecimals(tk0);\n          const token1Decimal = await ContractServices.getDecimals(tk1);\n\n          if (tk0 && reserves) {\n            let a;\n            if (tokenAddress.toLowerCase() === tk0.toLowerCase()) {\n              a = (\n                amount *\n                (reserves[1] /\n                  10 ** token1Decimal /\n                  (reserves[0] / 10 ** token0Decimal))\n              ).toFixed(5);\n            } else {\n              a = (\n                amount *\n                (reserves[0] /\n                  10 ** token0Decimal /\n                  (reserves[1] / 10 ** token1Decimal))\n              ).toFixed(5);\n            }\n            setTokenOneValue(a);\n            amt1 = a;\n            if (!tokenOneApproval) {\n              const r = await getAllowance(a, \"TK1\");\n              handleApprovalButton(\"TK1\");\n            }\n          }\n        }\n      }\n    }\n    if (tokenOne.address && tokenTwo.address) {\n      let a1 = tokenOne.address,\n        a2 = tokenTwo.address;\n\n      let currentPairAddress;\n      if (a1 === \"BNB\") {\n        a1 = WETH; //WETH\n        currentPairAddress = await ExchangeService.getPair(a1, a2);\n      } else if (a2 === \"BNB\") {\n        a2 = WETH; //WETH\n        currentPairAddress = await ExchangeService.getPair(a1, a2);\n      } else {\n        currentPairAddress = await ExchangeService.getPair(a1, a2);\n      }\n      if (currentPairAddress !== \"0x0000000000000000000000000000000000000000\") {\n        setCurrentPairAddress(currentPairAddress);\n        const lpTokenBalance = await ContractServices.getTokenBalance(\n          currentPairAddress,\n          isUserConnected\n        );\n        setLpTokenBalance(lpTokenBalance);\n\n        const reserves = await ExchangeService.getReserves(currentPairAddress);\n        const ratio = await calculateLiquidityPercentage(reserves, amt1, amt2);\n        // console.log(reserves, ratio, '---------------------------ratio');\n        setSharePoolValue(ratio);\n\n        setFirstProvider(false);\n        setShowPoolShare(true);\n      } else {\n        setCurrentPairAddress(\"\");\n        setFirstProvider(true);\n        setShowPoolShare(true);\n        setLpTokenBalance(0);\n      }\n    }\n  };\n  //call web3 approval function\n  const handleTokenApproval = async (tokenType) => {\n    const acc = await ContractServices.getDefaultAccount();\n    if (acc && acc.toLowerCase() !== isUserConnected.toLowerCase()) {\n      return toast.error(\"Wallet address doesn`t match!\");\n    }\n    if (approvalConfirmation) {\n      return toast.info(\"Token approval is processing\");\n    }\n    // const value = (2*256 - 1).toString();\n    const value =\n      \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n    let tokenAddress = \"BNB\";\n    if (tokenType === \"TK1\") {\n      tokenAddress = tokenOne.address;\n    }\n    if (tokenType === \"TK2\") {\n      tokenAddress = tokenTwo.address;\n    }\n    try {\n      dispatch(startLoading());\n      const r = await ContractServices.approveToken(\n        isUserConnected,\n        value,\n        MAIN_CONTRACT_LIST.router.address,\n        tokenAddress\n      );\n      if (r.code == 4001) {\n        toast.error(\"User denied transaction signature.\");\n      } else {\n        setApprovalConfirmation(true);\n        let data = {\n          message: `Approve`,\n          tx: r.transactionHash,\n        };\n        if (tokenType === \"TK1\") {\n          setTokenOneApproved(true);\n          setTokenOneApproval(false);\n\n          data.message = `Approve ${tokenOne.symbol}`;\n        }\n        if (tokenType === \"TK2\") {\n          setTokenTwoApproved(true);\n          setTokenTwoApproval(false);\n          data.message = `Approve ${tokenTwo.symbol}`;\n        }\n        dispatch(addTransaction(data));\n        setApprovalConfirmation(false);\n      }\n      dispatch(stopLoading());\n    } catch (err) {\n      setApprovalConfirmation(false);\n      dispatch(stopLoading());\n      console.log(err);\n      toast.error(\"Transaction Reverted!\");\n    }\n  };\n\n  const handleSearchToken = async (data) => {\n    try {\n      const res = await dispatch(searchTokenByNameOrAddress(data));\n      setFilteredTokenList(res);\n    } catch (error) {\n      toast.error(\"Something went wrong!\");\n    }\n  }\n  const handleApprovalButton = (tokenType) => {\n    if (tokenOneApproval && tokenType === \"TK1\") {\n      return (\n        <div className=\"col button_unlockWallet\">\n          <ButtonPrimary\n            className=\"swapBtn\"\n            title={`Approve ${tokenOne.symbol}`}\n            disabled={approvalConfirmation}\n            onClick={() => handleTokenApproval(tokenType)}\n          />\n        </div>\n      );\n    }\n    if (tokenTwoApproval && tokenType === \"TK2\") {\n      return (\n        <div className=\"col button_unlockWallet\">\n          <ButtonPrimary\n            className=\"swapBtn\"\n            title={`Approve ${tokenTwo.symbol}`}\n            disabled={approvalConfirmation}\n            onClick={() => handleTokenApproval(tokenType)}\n          />\n        </div>\n      );\n    }\n    //dead code\n    return null;\n  };\n  const calculateLiquidityPercentageWithSelectCurrency = async (reserve, d1, d2, lpBalance, currentPairAddress) => {\n    const _reserve0 = Number(reserve[\"_reserve0\"]) / 10 ** d1;\n    const _reserve1 = Number(reserve[\"_reserve1\"]) / 10 ** d2;\n\n    let _totalSupply = await ContractServices.getTotalSupply(\n      currentPairAddress\n    );\n\n    let ratio = lpBalance / _totalSupply;\n    const t0 = (ratio * _reserve0).toFixed(5);\n    setTokenOneDeposit(t0);\n    const t1 = (ratio * _reserve1).toFixed(5);\n    setTokenTwoDeposit(t1);\n  };\n  const calculateLiquidityPercentage = async (reserve, amount0, amount1) => {\n    const _reserve0 = Number(reserve[\"_reserve0\"]) / 10 ** tokenOne.decimals;\n    const _reserve1 = Number(reserve[\"_reserve1\"]) / 10 ** tokenTwo.decimals;\n\n    let liquidity = 0;\n    let _totalSupply = await ContractServices.getTotalSupply(\n      currentPairAddress\n    );\n\n    let ratio = lpTokenBalance / _totalSupply;\n    const t0 = (ratio * _reserve0).toFixed(5);\n    setTokenOneDeposit(t0);\n    const t1 = (ratio * _reserve1).toFixed(5);\n    setTokenTwoDeposit(t1);\n\n\n    if (_totalSupply === 0) {\n      liquidity = Math.sqrt(amount0 * amount1) - MINIMUM_LIQUIDITY;\n      return 100;\n    } else {\n      liquidity = Math.min(\n        (amount0 * _totalSupply) / _reserve0,\n        (amount1 * _totalSupply) / _reserve1\n      );\n    }\n\n    liquidity = ((liquidity / (_totalSupply + liquidity)) * 100).toFixed(2);\n    return liquidity;\n  };\n  const checkAddLiquidity = async () => {\n    if (!isUserConnected) {\n      handleShow1();\n    } else {\n      let address;\n      if (walletType === \"Metamask\") {\n        address = await ContractServices.isMetamaskInstalled(\"\");\n      }\n      if (walletType === \"BinanceChain\") {\n        address = await ContractServices.isBinanceChainInstalled();\n      }\n\n      if (isUserConnected.toLowerCase() !== address.toLowerCase()) {\n        return toast.error(\"Mismatch wallet address!\");\n      }\n      if (!tokenOne.address) {\n        return toast.error(\"Select first token!\");\n      }\n      if (!tokenTwo.address) {\n        return toast.error(\"Select second token!\");\n      }\n      if (tokenOneValue <= 0) {\n        return toast.error(\"Enter first token value!\");\n      }\n      if (tokenTwoValue <= 0) {\n        return toast.error(\"Enter second token value!\");\n      }\n      if (!tokenOneApproved) {\n        return toast.error(\"First Token approval is pending!\");\n      }\n      if (!tokenTwoApproved) {\n        return toast.error(\"Second Token approval is pending!\");\n      }\n      console.log(\n        tokenOneBalance < tokenOneValue,\n        tokenOneBalance,\n        tokenOneValue\n      );\n      if (tokenOneBalance < tokenOneValue) {\n        return toast.error(\n          `Wallet have insufficient ${tokenOne.symbol} balance!`\n        );\n      }\n      if (tokenTwoBalance < tokenTwoValue) {\n        return toast.error(\n          `Wallet have insufficient ${tokenTwo.symbol} balance!`\n        );\n      }\n      setShowSupplyModal(true);\n    }\n  };\n\n  const addLiquidity = async () => {\n    const acc = await ContractServices.getDefaultAccount();\n    if (acc && acc.toLowerCase() !== isUserConnected.toLowerCase()) {\n      return toast.error(\"Wallet address doesn`t match!\");\n    }\n    if (liquidityConfirmation) {\n      return toast.info(\"Transaction is processing!\");\n    }\n    setLiquidityConfirmation(true);\n    let value = 0,\n      checkBNB = false,\n      token;\n\n    let dl = Math.floor(new Date().getTime() / 1000);\n    dl = dl + deadline * 60;\n\n    if (tokenOne.address === \"BNB\") {\n      checkBNB = true;\n      value = tokenOneValue;\n      token = tokenTwo.address;\n    }\n    if (tokenTwo.address === \"BNB\") {\n      checkBNB = true;\n      value = tokenTwoValue;\n      token = tokenOne.address;\n    }\n    if (value > 0) {\n      value = value * 10 ** 18;\n    }\n    if (checkBNB) {\n      let amountETHMin = BigNumber(\n        Math.floor(Number(value) - (Number(value) * slippagePercentage) / 100)\n      ).toFixed();\n      let amountTokenMin = \"\";\n      let amountTokenDesired = 0;\n      if (tokenOne.address === \"BNB\") {\n        amountTokenDesired = tokenTwoValue;\n        amountTokenMin = BigNumber(\n          Math.floor(\n            (amountTokenDesired -\n              (amountTokenDesired * slippagePercentage) / 100) *\n            10 ** tokenTwo.decimals\n          )\n        ).toFixed();\n        amountTokenDesired = BigNumber(\n          amountTokenDesired * 10 ** tokenTwo.decimals\n        ).toFixed();\n      }\n      if (tokenTwo.address === \"BNB\") {\n        amountTokenDesired = tokenOneValue;\n        amountTokenMin = BigNumber(\n          Math.floor(\n            (amountTokenDesired -\n              (amountTokenDesired * slippagePercentage) / 100) *\n            10 ** tokenOne.decimals\n          )\n        ).toFixed();\n        amountTokenDesired = BigNumber(\n          amountTokenDesired * 10 ** tokenOne.decimals\n        ).toFixed();\n      }\n      value = value.toString();\n\n      const data = {\n        token,\n        amountTokenDesired,\n        amountTokenMin,\n        amountETHMin,\n        to: isUserConnected,\n        deadline: dl,\n        value,\n      };\n      try {\n        dispatch(startLoading());\n        const result = await ExchangeService.addLiquidityETH(data);\n        // console.log(result, \"add liquidity transaction\");\n        dispatch(stopLoading());\n\n        if (result) {\n          setTxHash(result);\n          setShowTransactionModal(true);\n          setShowSupplyModal(false);\n\n          const data = {\n            message: `Add ${tokenOne.symbol} and ${tokenTwo.symbol}`,\n            tx: result,\n          };\n          dispatch(addTransaction(data));\n          dispatch(checkUserLpTokens(false));\n        }\n        setLiquidityConfirmation(false);\n      } catch (err) {\n        dispatch(stopLoading());\n        const message = await ContractServices.web3ErrorHandle(err);\n        toast.error(message);\n        setLiquidityConfirmation(false);\n      }\n    } else {\n      let amountADesired = tokenOneValue;\n      let amountBDesired = tokenTwoValue;\n\n      let amountAMin = Math.floor(\n        amountADesired - (amountADesired * slippagePercentage) / 100\n      );\n      let amountBMin = Math.floor(\n        amountBDesired - (amountBDesired * slippagePercentage) / 100\n      );\n\n      amountADesired = BigNumber(\n        amountADesired * 10 ** tokenOne.decimals\n      ).toFixed();\n      amountBDesired = BigNumber(\n        amountBDesired * 10 ** tokenTwo.decimals\n      ).toFixed();\n      amountAMin = BigNumber(amountAMin * 10 ** tokenOne.decimals).toFixed();\n      amountBMin = BigNumber(amountBMin * 10 ** tokenOne.decimals).toFixed();\n\n      let dl = Math.floor(new Date().getTime() / 1000);\n      dl = dl + deadline * 60;\n\n      const data = {\n        tokenA: tokenOne.address,\n        tokenB: tokenTwo.address,\n        amountADesired,\n        amountBDesired,\n        amountAMin,\n        amountBMin,\n        to: isUserConnected,\n        deadline: dl,\n        value,\n      };\n      try {\n        dispatch(startLoading());\n        const result = await ExchangeService.addLiquidity(data);\n        // console.log(result, \"add liquidity transaction\");\n\n        dispatch(stopLoading());\n        if (result) {\n          setTxHash(result);\n          setShowTransactionModal(true);\n          setShowSupplyModal(false);\n\n          const data = {\n            message: `Add ${tokenOne.symbol} and ${tokenTwo.symbol}`,\n            tx: result,\n          };\n          dispatch(addTransaction(data));\n          dispatch(checkUserLpTokens(false));\n        }\n        setLiquidityConfirmation(false);\n      } catch (err) {\n        console.log(err);\n        dispatch(stopLoading());\n        const message = await ContractServices.web3ErrorHandle(err);\n        toast.error(message);\n        setLiquidityConfirmation(false);\n      }\n    }\n  };\n  const calculateFraction = (tokenType) => {\n    let r = 0;\n    if (tokenOneValue && tokenTwoValue) {\n      if (tokenType === \"TK1\") {\n        if (tokenOneValue === 0) return 0;\n        r = tokenTwoValue / tokenOneValue;\n      }\n      if (tokenType === \"TK2\") {\n        if (tokenTwoValue === 0) return 0;\n        r = tokenOneValue / tokenTwoValue;\n      }\n      return Number(r.toFixed(5));\n    } else {\n      return 0;\n    }\n  };\n\n  const handleMaxBalance = async (amountIn) => {\n    if (!isUserConnected) {\n      return toast.error('Connect wallet first!');\n    }\n    if (tokenOne.address === 'BNB') {\n      // .002 BNB is reserved for saving gas fee \n      const bnbBalance = await ContractServices.getBNBBalance(isUserConnected) - 0.1;\n      handleTokenValue(bnbBalance, amountIn);\n      setMax(false);\n    } else {\n      // __ amount of particular token must be reserved for saving -needs to be fixed \n      const tokenBalance = await ContractServices.getTokenBalance(tokenOne.address, isUserConnected);\n      handleTokenValue(tokenBalance, amountIn);\n      setMax(false);\n    }\n  }\n  return (\n    <>\n      <Container fluid className=\"swapScreen comnSection\">\n        <CardCustom>\n          <div className=\"settingSec\">\n            <div className=\"in_title\">\n              <ButtonBack />\n              <h4 className=\"ps-5\">Add Liquidity</h4>\n            </div>\n            <div className=\"settingIcon\">\n              <img\n                src={TimerIcon}\n                onClick={() => setShowRecent(true)}\n                className=\"timerImg\"\n              />\n              <img src={SettingIcon} onClick={() => settinghandleShow(true)} />\n            </div>\n          </div>\n          {firstProvider && (\n            <div className=\"firstPro_Note\">\n              <p>You are the first liquidity provider.</p>\n              <p>\n                The ratio of tokens you add will set the price of this pool.\n              </p>\n              <p>Once you are happy with the rate click supply to review.</p>\n            </div>\n          )}\n          <div className=\"liquidtySec\">\n            {\n              <SelectCoin\n                label={`Balance: ${tokenOneBalance}`}\n                coinImage={tokenOne?.icon}\n                value={tokenOneCurrency}\n                onClick={() => onHandleOpenModal(\"TK1\")}\n                inputLabel=\"Input\"\n                className=\"mb-0\"\n                placeholder=\"0.0\"\n                onChange={(e) => handleTokenValue(e.target.value, \"TK1\")}\n                defaultValue={tokenOneValue}\n                max={max}\n                onMax={() => handleMaxBalance('TK1')}\n              />\n            }\n            <div className=\"convert_plus\">\n              <img src={Plusicon} style={{ width: 22 }} />\n            </div>\n            {\n              <SelectCoin\n                label={`Balance: ${tokenTwoBalance}`}\n                coinImage={tokenTwo?.icon}\n                value={tokenTwoCurrency}\n                onClick={() => onHandleOpenModal(\"TK2\")}\n                inputLabel=\"Input\"\n                className=\"mb-0\"\n                placeholder=\"0.0\"\n                onChange={(e) => handleTokenValue(e.target.value, \"TK2\")}\n                defaultValue={tokenTwoValue}\n                max={false}\n              />\n            }\n            {showPoolShare && (\n              <Col className=\"poolSec\">\n                <h6>PRICES AND POOL SHARE</h6>\n                <div className=\"poolDiv\">\n                  <span>\n                    {calculateFraction(\"TK1\")} per\n                    <br />\n                    <small>\n                      {\" \"}\n                      {tokenTwoCurrency} per {tokenOneCurrency}\n                    </small>\n                  </span>\n                  <span>\n                    {calculateFraction(\"TK2\")} per\n                    <br />\n                    <small>\n                      {\" \"}\n                      {tokenOneCurrency} per {tokenTwoCurrency}\n                    </small>\n                  </span>\n                  <span>\n                    {sharePoolValue}% <br />\n                    <small>Share of Pool</small>\n                  </span>\n                </div>\n              </Col>\n            )}\n            {currentPairAddress && (\n              <Col className=\"lp-class\">\n                <h4>LP Tokens in your Wallet</h4>\n                <ul className=\"LptokensList\">\n                  <li>\n                    <span>\n                      <img\n                        className=\"sc-fWPcDo bUpjCL\"\n                        alt=\"icon 1\"\n                        src={tokenOne?.icon}\n                      />\n                      <img\n                        className=\"sc-fWPcDo bUpjCL\"\n                        alt=\"icon 2\"\n                        src={tokenTwo?.icon}\n                      />\n                      &nbsp;&nbsp;\n                      {`${tokenOneCurrency}/${tokenTwoCurrency}`}:\n                    </span>{\" \"}\n                    <span>{lpTokenBalance?.toFixed(5)}</span>\n                  </li>\n                  <li>\n                    {tokenOne.symbol}: <span>{tokenOneDeposit}</span>\n                  </li>\n                  <li>\n                    {\" \"}\n                    {tokenTwo.symbol}: <span>{tokenTwoDeposit}</span>\n                  </li>\n                </ul>\n              </Col>\n            )}\n          </div>\n          <Col className=\"swapBtn_col\">\n            {handleApprovalButton(\"TK1\")}\n            {handleApprovalButton(\"TK2\")}\n\n            <ButtonPrimary\n              className=\"swapBtn dismissBtn\"\n              title={isUserConnected ? \"Supply\" : \"Unlock Wallet\"}\n              // onClick={() => handleShow1(true)}\n              onClick={() => checkAddLiquidity()}\n            />\n          </Col>\n        </CardCustom>\n      </Container>\n      <ModalCurrency\n        show={show}\n        handleClose={handleClose}\n        tokenList={filteredTokenList}\n        searchToken={handleSearchToken}\n        searchByName={setSearch}\n        selectCurrency={onHandleSelectCurrency}\n        tokenType={tokenType}\n        currencyName={selectedCurrency}\n        handleOrder={setFilteredTokenList}\n      />\n      <ConnectWallet\n        show={show1}\n        handleShow={handleShow1}\n        handleClose={handleClose1}\n      />\n      <SettingModal\n        show={settingShow}\n        handleShow={settinghandleShow}\n        handleClose={settingClose}\n      />\n      <SupplyModal\n        show={showSupplyModal}\n        handleClose={supplyModalClose}\n        addLiquidity={addLiquidity}\n        liquidityConfirmation={liquidityConfirmation}\n        tokenOneCurrency={tokenOneCurrency}\n        tokenOneValue={tokenOneValue}\n        tokenTwoCurrency={tokenTwoCurrency}\n        tokenTwoValue={tokenTwoValue}\n        calculateFraction={calculateFraction}\n        sharePoolValue={sharePoolValue}\n        tokenOne={tokenOne}\n        tokenTwo={tokenTwo}\n        slippagePercentage={slippagePercentage}\n      />\n      <RecentTransactions\n        show={showRecent}\n        handleClose={recentTransactionsClose}\n      />\n    </>\n  );\n};\n\nexport default AddLiquidity;\n"]},"metadata":{},"sourceType":"module"}