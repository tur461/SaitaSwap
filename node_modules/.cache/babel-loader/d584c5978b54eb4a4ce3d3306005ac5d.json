{"ast":null,"code":"import axios from \"axios\";\nimport { toast } from \"../components/Toast/Toast\";\nimport { removeToken } from \"../Helpers/storageHelper\";\nimport { AUTH_TOKEN_KEY } from \"../constant\";\nexport { _fetch as fetch };\n\nfunction handleError(error, reject) {\n  console.log(\"ERRRRR\", error);\n\n  if (!error) {// toast.error(\"Something went wrong, Please try again\");\n  }\n\n  if (error) {\n    if (error.data === \"jwt expired\") {\n      toast.error(\"Session expired\");\n      setTimeout(() => {\n        localStorage.clear();\n        removeToken(AUTH_TOKEN_KEY);\n        window.location.reload();\n      }, 2000);\n    }\n\n    reject(error);\n    return;\n  }\n}\n\nfunction handleResponse(successs, resolve) {\n  resolve(successs);\n  return;\n}\n\nfunction setMehod(method, path, body, options, params) {\n  let config = {};\n\n  if (options) {\n    if (options.jwt) {\n      config.headers = {\n        \"api-access-token\": options.jwt\n      };\n    }\n  }\n\n  params = params ? \"?\" + new URLSearchParams(params).toString() : \"\";\n\n  if (method === \"get\" || method === \"delete\") {\n    return axios[method](`${path}${params}`, config);\n  }\n\n  if (method === \"post\" || method === \"put\") {\n    return axios[method](`${path}`, body, config);\n  }\n}\n\nfunction _fetch(method, path, body, options, params) {\n  return new Promise((resolve, reject) => {\n    return setMehod(method, path, body, options, params).then(function (response) {\n      handleResponse(response, resolve);\n      return;\n    }).catch(function (error) {\n      handleError(error.response, reject);\n      return;\n    });\n  });\n}","map":{"version":3,"sources":["/home/user/Desktop/nm/SaitaSwap/src/services/Fetch.js"],"names":["axios","toast","removeToken","AUTH_TOKEN_KEY","_fetch","fetch","handleError","error","reject","console","log","data","setTimeout","localStorage","clear","window","location","reload","handleResponse","successs","resolve","setMehod","method","path","body","options","params","config","jwt","headers","URLSearchParams","toString","Promise","then","response","catch"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,2BAAtB;AACA,SAASC,WAAT,QAA4B,0BAA5B;AACA,SAASC,cAAT,QAA+B,aAA/B;AACA,SAASC,MAAM,IAAIC,KAAnB;;AAEA,SAASC,WAAT,CAAqBC,KAArB,EAA4BC,MAA5B,EAAoC;AAClCC,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBH,KAAtB;;AACA,MAAI,CAACA,KAAL,EAAY,CACV;AACD;;AACD,MAAIA,KAAJ,EAAW;AACT,QAAIA,KAAK,CAACI,IAAN,KAAe,aAAnB,EAAkC;AAChCV,MAAAA,KAAK,CAACM,KAAN,CAAY,iBAAZ;AACAK,MAAAA,UAAU,CAAC,MAAM;AACfC,QAAAA,YAAY,CAACC,KAAb;AACAZ,QAAAA,WAAW,CAACC,cAAD,CAAX;AACAY,QAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACD,OAJS,EAIP,IAJO,CAAV;AAMD;;AACDT,IAAAA,MAAM,CAACD,KAAD,CAAN;AACA;AACD;AACF;;AAED,SAASW,cAAT,CAAwBC,QAAxB,EAAkCC,OAAlC,EAA2C;AACzCA,EAAAA,OAAO,CAACD,QAAD,CAAP;AACA;AACD;;AAED,SAASE,QAAT,CAAkBC,MAAlB,EAA0BC,IAA1B,EAAgCC,IAAhC,EAAsCC,OAAtC,EAA+CC,MAA/C,EAAuD;AACrD,MAAIC,MAAM,GAAG,EAAb;;AACA,MAAIF,OAAJ,EAAa;AACX,QAAIA,OAAO,CAACG,GAAZ,EAAiB;AACfD,MAAAA,MAAM,CAACE,OAAP,GAAiB;AACf,4BAAoBJ,OAAO,CAACG;AADb,OAAjB;AAGD;AACF;;AACDF,EAAAA,MAAM,GAAGA,MAAM,GAAG,MAAM,IAAII,eAAJ,CAAoBJ,MAApB,EAA4BK,QAA5B,EAAT,GAAkD,EAAjE;;AACA,MAAIT,MAAM,KAAK,KAAX,IAAoBA,MAAM,KAAK,QAAnC,EAA6C;AAC3C,WAAOtB,KAAK,CAACsB,MAAD,CAAL,CAAe,GAAEC,IAAK,GAAEG,MAAO,EAA/B,EAAkCC,MAAlC,CAAP;AACD;;AACD,MAAIL,MAAM,KAAK,MAAX,IAAqBA,MAAM,KAAK,KAApC,EAA2C;AACzC,WAAOtB,KAAK,CAACsB,MAAD,CAAL,CAAe,GAAEC,IAAK,EAAtB,EAAyBC,IAAzB,EAA+BG,MAA/B,CAAP;AACD;AACF;;AAED,SAASvB,MAAT,CAAgBkB,MAAhB,EAAwBC,IAAxB,EAA8BC,IAA9B,EAAoCC,OAApC,EAA6CC,MAA7C,EAAqD;AACnD,SAAO,IAAIM,OAAJ,CAAY,CAACZ,OAAD,EAAUZ,MAAV,KAAqB;AACtC,WAAOa,QAAQ,CAACC,MAAD,EAASC,IAAT,EAAeC,IAAf,EAAqBC,OAArB,EAA8BC,MAA9B,CAAR,CACJO,IADI,CACC,UAAUC,QAAV,EAAoB;AACxBhB,MAAAA,cAAc,CAACgB,QAAD,EAAWd,OAAX,CAAd;AACA;AACD,KAJI,EAKJe,KALI,CAKE,UAAU5B,KAAV,EAAiB;AACtBD,MAAAA,WAAW,CAACC,KAAK,CAAC2B,QAAP,EAAiB1B,MAAjB,CAAX;AACA;AACD,KARI,CAAP;AASD,GAVM,CAAP;AAWD","sourcesContent":["import axios from \"axios\";\nimport { toast } from \"../components/Toast/Toast\";\nimport { removeToken } from \"../Helpers/storageHelper\"\nimport { AUTH_TOKEN_KEY } from \"../constant\"\nexport { _fetch as fetch };\n\nfunction handleError(error, reject) {\n  console.log(\"ERRRRR\", error)\n  if (!error) {\n    // toast.error(\"Something went wrong, Please try again\");\n  }\n  if (error) {\n    if (error.data === \"jwt expired\") {\n      toast.error(\"Session expired\");\n      setTimeout(() => {\n        localStorage.clear();\n        removeToken(AUTH_TOKEN_KEY);\n        window.location.reload();\n      }, 2000);\n\n    }\n    reject(error);\n    return;\n  }\n}\n\nfunction handleResponse(successs, resolve) {\n  resolve(successs);\n  return;\n}\n\nfunction setMehod(method, path, body, options, params) {\n  let config = {};\n  if (options) {\n    if (options.jwt) {\n      config.headers = {\n        \"api-access-token\": options.jwt\n      };\n    }\n  }\n  params = params ? \"?\" + new URLSearchParams(params).toString() : \"\";\n  if (method === \"get\" || method === \"delete\") {\n    return axios[method](`${path}${params}`, config);\n  }\n  if (method === \"post\" || method === \"put\") {\n    return axios[method](`${path}`, body, config);\n  }\n}\n\nfunction _fetch(method, path, body, options, params) {\n  return new Promise((resolve, reject) => {\n    return setMehod(method, path, body, options, params)\n      .then(function (response) {\n        handleResponse(response, resolve);\n        return;\n      })\n      .catch(function (error) {\n        handleError(error.response, reject);\n        return;\n      });\n  });\n}\n"]},"metadata":{},"sourceType":"module"}