{"ast":null,"code":"import { MAIN_CONTRACT_LIST } from \"../assets/tokens\";\nimport { toast } from \"../components/Toast/Toast\";\nimport { ContractServices } from \"./ContractServices\";\n\nconst poolLength = async () => {\n  try {\n    const contract = await ContractServices.callContract(MAIN_CONTRACT_LIST.farm.address, MAIN_CONTRACT_LIST.farm.abi);\n    return await contract.methods.poolLength().call();\n  } catch (error) {\n    return error;\n  }\n};\n\nconst poolInfo = async (index, type) => {\n  try {\n    const contract = await ContractServices.callContract(MAIN_CONTRACT_LIST.farm.address, MAIN_CONTRACT_LIST.farm.abi);\n    const result = await contract.methods.poolInfo(index).call();\n    const poolType = await contract.methods.poolType(result.lpToken).call();\n\n    if (poolType === type) {\n      return result;\n    }\n\n    return false;\n  } catch (error) {\n    return error;\n  }\n};\n\nconst niobId = async () => {\n  try {\n    const contract = await ContractServices.callContract(MAIN_CONTRACT_LIST.farm.address, MAIN_CONTRACT_LIST.farm.abi);\n    return await contract.methods.niobId().call();\n  } catch (error) {\n    return error;\n  }\n};\n\nconst farmAndPoolInfo = async index => {\n  try {\n    const contract = await ContractServices.callContract(MAIN_CONTRACT_LIST.farm.address, MAIN_CONTRACT_LIST.farm.abi);\n    const result = await contract.methods.poolInfo(index).call();\n    const poolType = await contract.methods.poolType(result.lpToken).call();\n\n    if (poolType === '1') {\n      return {\n        farm: result,\n        pool: false\n      };\n    }\n\n    if (poolType === '2') {\n      return {\n        farm: false,\n        pool: result\n      };\n    }\n\n    return false;\n  } catch (error) {\n    return error;\n  }\n};\n\nconst totalPoolInfo = async (index, type) => {\n  try {\n    const contract = await ContractServices.callContract(MAIN_CONTRACT_LIST.farm.address, MAIN_CONTRACT_LIST.farm.abi);\n    const result = await contract.methods.poolInfo(index).call();\n    const web3 = await ContractServices.callWeb3();\n    const latest = await web3.eth.getBlockNumber();\n    return {\n      poolInfo: result,\n      latest\n    };\n  } catch (error) {\n    return error;\n  }\n};\n\nconst getLpTokenDetails = async lpToken => {\n  try {\n    const contract = await ContractServices.callContract(lpToken, MAIN_CONTRACT_LIST.pair.abi);\n    const decimals = await contract.methods.decimals().call();\n    const token0 = await contract.methods.token0().call();\n    const token1 = await contract.methods.token1().call();\n    let symbol0 = await ContractServices.getTokenSymbol(token0);\n\n    if (symbol0 === 'WETH') {\n      symbol0 = 'BNB';\n    }\n\n    let symbol1 = await ContractServices.getTokenSymbol(token1);\n\n    if (symbol1 === 'WETH') {\n      symbol1 = 'BNB';\n    }\n\n    const lpTokenName = `${symbol0}-${symbol1} LP`;\n    return {\n      token0,\n      token1,\n      symbol0,\n      symbol1,\n      decimals,\n      lpTokenName\n    };\n  } catch (err) {\n    return err;\n  }\n};\n\nconst getPoolTokenDetails = async lpToken => {\n  try {\n    const decimals = await ContractServices.getDecimals(lpToken);\n    let symbol = await ContractServices.getTokenSymbol(lpToken);\n\n    if (symbol === 'WETH') {\n      symbol = 'BNB';\n    }\n\n    return {\n      symbol,\n      lpTokenName: symbol,\n      decimals\n    };\n  } catch (err) {\n    return err;\n  }\n};\n\nconst userInfo = async (index, address) => {\n  try {\n    const contract = await ContractServices.callContract(MAIN_CONTRACT_LIST.farm.address, MAIN_CONTRACT_LIST.farm.abi);\n    return await contract.methods.userInfo(index, address).call();\n  } catch (err) {\n    console.log(\"Error:\", err);\n    return err;\n  }\n};\n\nconst poolInfoo = async (index, address) => {\n  try {\n    const contract = await ContractServices.callContract(MAIN_CONTRACT_LIST.farm.address, MAIN_CONTRACT_LIST.farm.abi);\n    return await contract.methods.niob().call();\n  } catch (err) {\n    return err;\n  }\n};\n\nconst deposit = async data => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      let {\n        pid,\n        amount,\n        referrer,\n        from\n      } = data;\n      const contract = await ContractServices.callContract(MAIN_CONTRACT_LIST.farm.address, MAIN_CONTRACT_LIST.farm.abi);\n      const gasPrice = await ContractServices.calculateGasPrice();\n      const gas = await contract.methods.deposit(pid, amount, referrer).estimateGas({\n        from,\n        value: 0\n      });\n      contract.methods.deposit(pid, amount, referrer).send({\n        from,\n        gasPrice,\n        gas,\n        value: 0\n      }).on('transactionHash', hash => {\n        resolve(hash);\n      }).on('receipt', receipt => {\n        resolve(receipt);\n        toast.success('Token deposited successfully');\n      }).on('error', (error, receipt) => {\n        reject(error);\n      });\n    } catch (error) {\n      reject(error);\n      return error;\n    }\n  });\n};\n\nconst withdraw = async data => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      let {\n        pid,\n        amount,\n        from\n      } = data;\n      const contract = await ContractServices.callContract(MAIN_CONTRACT_LIST.farm.address, MAIN_CONTRACT_LIST.farm.abi);\n      const gasPrice = await ContractServices.calculateGasPrice();\n      const gas = await contract.methods.withdraw(pid, amount).estimateGas({\n        from,\n        value: 0\n      });\n      contract.methods.withdraw(pid, amount).send({\n        from,\n        gasPrice,\n        gas,\n        value: 0\n      }).on('transactionHash', hash => {\n        resolve(hash);\n      }).on('receipt', receipt => {\n        toast.success('LP withdrawn successfully.');\n      }).on('error', (error, receipt) => {\n        reject(error);\n      });\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\n\nconst withdrawNiob = async data => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      let {\n        pid,\n        amount,\n        from\n      } = data;\n      const contract = await ContractServices.callContract(MAIN_CONTRACT_LIST.farm.address, MAIN_CONTRACT_LIST.farm.abi);\n      const gasPrice = await ContractServices.calculateGasPrice();\n      const gas = await contract.methods.withdrawNiob(amount).estimateGas({\n        from,\n        value: 0\n      });\n      contract.methods.withdrawNiob(amount).send({\n        from,\n        gasPrice,\n        gas,\n        value: 0\n      }).on('transactionHash', hash => {\n        resolve(hash);\n      }).on('receipt', receipt => {\n        toast.success('LP withdrawn successfully.');\n      }).on('error', (error, receipt) => {\n        reject(error);\n      });\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\n\nconst canHarvest = async (pid, address) => {\n  try {\n    const contract = await ContractServices.callContract(MAIN_CONTRACT_LIST.farm.address, MAIN_CONTRACT_LIST.farm.abi);\n    return await contract.methods.canHarvest(pid, address).call();\n  } catch (err) {\n    return err;\n  }\n};\n\nconst pendingPanther = async (pid, address) => {\n  try {\n    const contract = await ContractServices.callContract(MAIN_CONTRACT_LIST.farm.address, MAIN_CONTRACT_LIST.farm.abi);\n    return await contract.methods.pendingNiob(pid, address).call();\n  } catch (err) {\n    return err;\n  }\n};\n\nconst totalAllocationPoint = async () => {\n  try {\n    const contractFarm = await ContractServices.callContract(MAIN_CONTRACT_LIST.farm.address, MAIN_CONTRACT_LIST.farm.abi);\n    return await contractFarm.methods.totalAllocPoint().call();\n  } catch (err) {\n    return err;\n  }\n};\n\nconst pantherPerBlock = async () => {\n  try {\n    const contractFarm = await ContractServices.callContract(MAIN_CONTRACT_LIST.farm.address, MAIN_CONTRACT_LIST.farm.abi);\n    return await contractFarm.methods.niobPerBlock().call();\n  } catch (err) {\n    return err;\n  }\n};\n\nconst getNiob = async address => {\n  try {\n    const contract = await ContractServices.callContract(MAIN_CONTRACT_LIST.farm.address, MAIN_CONTRACT_LIST.farm.abi); //const decimals = await ContractServices.getDecimals(address);\n\n    const res = await contract.methods.getWithdrawableNiob(address).call();\n    let niobTokens = 0;\n\n    if (res[0]) {\n      niobTokens = res[0] / 10 ** 18;\n    }\n\n    return niobTokens;\n  } catch (error) {\n    return error;\n  }\n};\n\nexport const FarmService = {\n  poolLength,\n  poolInfo,\n  getLpTokenDetails,\n  userInfo,\n  deposit,\n  withdraw,\n  withdrawNiob,\n  canHarvest,\n  pendingPanther,\n  getPoolTokenDetails,\n  poolInfoo,\n  totalAllocationPoint,\n  pantherPerBlock,\n  totalPoolInfo,\n  farmAndPoolInfo,\n  niobId,\n  getNiob\n};","map":{"version":3,"sources":["/home/user/Desktop/nm/SaitaSwap/src/services/FarmService.js"],"names":["MAIN_CONTRACT_LIST","toast","ContractServices","poolLength","contract","callContract","farm","address","abi","methods","call","error","poolInfo","index","type","result","poolType","lpToken","niobId","farmAndPoolInfo","pool","totalPoolInfo","web3","callWeb3","latest","eth","getBlockNumber","getLpTokenDetails","pair","decimals","token0","token1","symbol0","getTokenSymbol","symbol1","lpTokenName","err","getPoolTokenDetails","getDecimals","symbol","userInfo","console","log","poolInfoo","niob","deposit","data","Promise","resolve","reject","pid","amount","referrer","from","gasPrice","calculateGasPrice","gas","estimateGas","value","send","on","hash","receipt","success","withdraw","withdrawNiob","canHarvest","pendingPanther","pendingNiob","totalAllocationPoint","contractFarm","totalAllocPoint","pantherPerBlock","niobPerBlock","getNiob","res","getWithdrawableNiob","niobTokens","FarmService"],"mappings":"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","sourcesContent":["import { MAIN_CONTRACT_LIST } from \"../assets/tokens\";\nimport { toast } from \"../components/Toast/Toast\";\nimport { ContractServices } from \"./ContractServices\";\n\n\nconst poolLength = async () => {\n  try {\n    const contract = await ContractServices.callContract(MAIN_CONTRACT_LIST.farm.address, MAIN_CONTRACT_LIST.farm.abi);\n    return await contract.methods.poolLength().call();\n  } catch (error) {\n    return error;\n  }\n};\n\nconst poolInfo = async (index, type) => {\n  try {\n    const contract = await ContractServices.callContract(MAIN_CONTRACT_LIST.farm.address, MAIN_CONTRACT_LIST.farm.abi);\n    const result = await contract.methods.poolInfo(index).call();\n    const poolType = await contract.methods.poolType(result.lpToken).call();\n    if (poolType === type) {\n      return result;\n    }\n    return false;\n  } catch (error) {\n    return error;\n  }\n};\n\nconst niobId = async () => {\n  try {\n    const contract = await ContractServices.callContract(MAIN_CONTRACT_LIST.farm.address, MAIN_CONTRACT_LIST.farm.abi);\n    return await contract.methods.niobId().call();\n  } catch (error) {\n    return error;\n  }\n};\n\n\nconst farmAndPoolInfo = async (index) => {\n  try {\n    const contract = await ContractServices.callContract(MAIN_CONTRACT_LIST.farm.address, MAIN_CONTRACT_LIST.farm.abi);\n    const result = await contract.methods.poolInfo(index).call();\n    const poolType = await contract.methods.poolType(result.lpToken).call();\n\n    if (poolType === '1') {\n      return { farm: result, pool: false };\n    }\n    if (poolType === '2') {\n      return { farm: false, pool: result };\n    }\n    return false;\n  } catch (error) {\n    return error;\n  }\n};\nconst totalPoolInfo = async (index, type) => {\n  try {\n    const contract = await ContractServices.callContract(MAIN_CONTRACT_LIST.farm.address, MAIN_CONTRACT_LIST.farm.abi);\n    const result = await contract.methods.poolInfo(index).call();\n    const web3 = await ContractServices.callWeb3();\n    const latest = await web3.eth.getBlockNumber();\n    return { poolInfo: result, latest };\n  } catch (error) {\n    return error;\n  }\n};\n\nconst getLpTokenDetails = async (lpToken) => {\n  try {\n    const contract = await ContractServices.callContract(lpToken, MAIN_CONTRACT_LIST.pair.abi);\n    const decimals = await contract.methods.decimals().call();\n    const token0 = await contract.methods.token0().call();\n    const token1 = await contract.methods.token1().call();\n\n    let symbol0 = await ContractServices.getTokenSymbol(token0);\n    if (symbol0 === 'WETH') {\n      symbol0 = 'BNB';\n    }\n\n    let symbol1 = await ContractServices.getTokenSymbol(token1);\n    if (symbol1 === 'WETH') {\n      symbol1 = 'BNB';\n    }\n    const lpTokenName = `${symbol0}-${symbol1} LP`;\n    return {\n      token0,\n      token1,\n      symbol0,\n      symbol1,\n      decimals,\n      lpTokenName,\n    };\n  } catch (err) {\n    return err;\n  }\n}\nconst getPoolTokenDetails = async (lpToken) => {\n  try {\n    const decimals = await ContractServices.getDecimals(lpToken);\n\n\n    let symbol = await ContractServices.getTokenSymbol(lpToken);\n    if (symbol === 'WETH') {\n      symbol = 'BNB';\n    }\n\n    return {\n      symbol,\n      lpTokenName: symbol,\n      decimals\n    };\n  } catch (err) {\n    return err;\n  }\n}\nconst userInfo = async (index, address) => {\n  try {\n    const contract = await ContractServices.callContract(MAIN_CONTRACT_LIST.farm.address, MAIN_CONTRACT_LIST.farm.abi);\n    return await contract.methods.userInfo(index, address).call();\n  } catch (err) {\n    console.log(\"Error:\", err);\n    return err;\n  }\n}\n\nconst poolInfoo = async (index, address) => {\n  try {\n    const contract = await ContractServices.callContract(MAIN_CONTRACT_LIST.farm.address, MAIN_CONTRACT_LIST.farm.abi);\n    return await contract.methods.niob().call();\n  } catch (err) {\n    return err;\n  }\n}\n\n\n\nconst deposit = async (data) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      let {\n        pid,\n        amount,\n        referrer,\n        from\n      } = data;\n      const contract = await ContractServices.callContract(MAIN_CONTRACT_LIST.farm.address, MAIN_CONTRACT_LIST.farm.abi);\n      const gasPrice = await ContractServices.calculateGasPrice();\n\n      const gas = await contract.methods.deposit(\n        pid,\n        amount,\n        referrer\n      ).estimateGas({ from, value: 0 });\n\n      contract.methods.deposit(\n        pid,\n        amount,\n        referrer\n      ).send({ from, gasPrice, gas, value: 0 })\n        .on('transactionHash', (hash) => {\n          resolve(hash);\n        })\n        .on('receipt', (receipt) => {\n          resolve(receipt)\n          toast.success('Token deposited successfully');\n        })\n        .on('error', (error, receipt) => {\n          reject(error);\n        });\n    } catch (error) {\n      reject(error);\n      return error;\n    }\n  });\n}\nconst withdraw = async (data) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      let {\n        pid,\n        amount,\n        from\n      } = data;\n      const contract = await ContractServices.callContract(MAIN_CONTRACT_LIST.farm.address, MAIN_CONTRACT_LIST.farm.abi);\n      const gasPrice = await ContractServices.calculateGasPrice();\n\n      const gas = await contract.methods.withdraw(\n        pid,\n        amount\n      ).estimateGas({ from, value: 0 });\n\n      contract.methods.withdraw(\n        pid,\n        amount\n      ).send({ from, gasPrice, gas, value: 0 })\n        .on('transactionHash', (hash) => {\n          resolve(hash);\n        })\n        .on('receipt', (receipt) => {\n          toast.success('LP withdrawn successfully.');\n        })\n        .on('error', (error, receipt) => {\n          reject(error);\n        });\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\nconst withdrawNiob = async (data) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      let {\n        pid,\n        amount,\n        from\n      } = data;\n      const contract = await ContractServices.callContract(MAIN_CONTRACT_LIST.farm.address, MAIN_CONTRACT_LIST.farm.abi);\n      const gasPrice = await ContractServices.calculateGasPrice();\n\n      const gas = await contract.methods.withdrawNiob(\n        amount\n      ).estimateGas({ from, value: 0 });\n\n      contract.methods.withdrawNiob(\n        amount\n      ).send({ from, gasPrice, gas, value: 0 })\n        .on('transactionHash', (hash) => {\n          resolve(hash);\n        })\n        .on('receipt', (receipt) => {\n          toast.success('LP withdrawn successfully.');\n        })\n        .on('error', (error, receipt) => {\n          reject(error);\n        });\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\nconst canHarvest = async (pid, address) => {\n  try {\n    const contract = await ContractServices.callContract(MAIN_CONTRACT_LIST.farm.address, MAIN_CONTRACT_LIST.farm.abi);\n    return await contract.methods.canHarvest(pid, address).call();\n  } catch (err) {\n    return err;\n  }\n}\nconst pendingPanther = async (pid, address) => {\n  try {\n    const contract = await ContractServices.callContract(MAIN_CONTRACT_LIST.farm.address, MAIN_CONTRACT_LIST.farm.abi);\n    return await contract.methods.pendingNiob(pid, address).call();\n  } catch (err) {\n    return err;\n  }\n}\n\nconst totalAllocationPoint = async () => {\n  try {\n    const contractFarm = await ContractServices.callContract(MAIN_CONTRACT_LIST.farm.address, MAIN_CONTRACT_LIST.farm.abi);\n    return await contractFarm.methods.totalAllocPoint().call();\n  } catch (err) {\n    return err;\n  }\n}\nconst pantherPerBlock = async () => {\n  try {\n    const contractFarm = await ContractServices.callContract(MAIN_CONTRACT_LIST.farm.address, MAIN_CONTRACT_LIST.farm.abi);\n    return await contractFarm.methods.niobPerBlock().call();\n  } catch (err) {\n    return err;\n  }\n}\nconst getNiob = async (address) => {\n  try {\n    const contract = await ContractServices.callContract(MAIN_CONTRACT_LIST.farm.address, MAIN_CONTRACT_LIST.farm.abi);\n    //const decimals = await ContractServices.getDecimals(address);\n    const res = await contract.methods.getWithdrawableNiob(address).call();\n    let niobTokens = 0;\n    if (res[0]) {\n      niobTokens = (res[0] / 10 ** 18);\n    }\n    return niobTokens;\n  } catch (error) {\n    return error;\n  }\n};\nexport const FarmService = {\n  poolLength,\n  poolInfo,\n  getLpTokenDetails,\n  userInfo,\n  deposit,\n  withdraw,\n  withdrawNiob,\n  canHarvest,\n  pendingPanther,\n  getPoolTokenDetails,\n  poolInfoo,\n  totalAllocationPoint,\n  pantherPerBlock,\n  totalPoolInfo,\n  farmAndPoolInfo,\n  niobId,\n  getNiob\n};\n"]},"metadata":{},"sourceType":"module"}