{"ast":null,"code":"import Web3 from \"web3\";\nimport TOKEN_ABI from \"../assets/ABI/tokenContract.ABI.json\";\nimport { toast } from \"../components/Toast/Toast\";\nimport { NETWORK_CHAIN_ID, NETWORK_CHAIN_NAME, NETWORK_LINK, NETWORK_NATIVE_CURRENCY_DECIMALS, NETWORK_NATIVE_CURRENCY_NAME, NETWORK_NATIVE_CURRENCY_SYMBOL, NETWORK_RPC_URL } from '../constant';\nimport WalletConnectProvider from '@walletconnect/web3-provider';\nlet web3Object;\nlet contractOjbect;\nlet currentContractAddress;\nlet tokenContractObject;\nlet currentTokenAddress;\nlet walletTypeObject = 'Metamask';\nlet walletConnectProvider; //only for lp tokens\n\nconst convertToDecimals = async value => {\n  const decimals = 18;\n  return Number(value) / 10 ** decimals;\n};\n\nconst isMetamaskInstalled = async type => {\n  //Have to check the ethereum binding on the window object to see if it's installed\n  const {\n    ethereum,\n    web3\n  } = window;\n  const result = Boolean(ethereum && ethereum.isMetaMask);\n  walletTypeObject = 'Metamask';\n\n  if (result) {\n    //metamask\n    try {\n      const accounts = await ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      return accounts[0];\n    } catch (err) {\n      toast.error(err.message);\n      return false;\n    }\n  } else if (ethereum) {\n    //trust wallet\n    try {\n      const accounts = await ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      return accounts[0];\n    } catch (err) {\n      toast.error(err.message);\n      return false;\n    }\n  } else if (web3) {\n    //trustwallet\n    const accounts = await web3.eth.getAccounts();\n    return accounts[0];\n  } else {\n    if (type) {\n      toast.error(`Install ${type} extension first!`);\n    }\n\n    return false;\n  }\n};\n\nconst isBinanceChainInstalled = async () => {\n  //Have to check the ethereum binding on the window object to see if it's installed\n  const {\n    BinanceChain\n  } = window;\n\n  if (BinanceChain) {\n    walletTypeObject = 'BinanceChain';\n\n    try {\n      const accounts = await BinanceChain.request({\n        method: 'eth_requestAccounts'\n      });\n      return accounts[0];\n    } catch (err) {\n      toast.error(err.message);\n      return false;\n    }\n  } else {\n    toast.error(\"Install BinanceChain extension first!\");\n    return false;\n  }\n};\n\nconst walletWindowListener = async () => {\n  const {\n    BinanceChain,\n    ethereum\n  } = window;\n\n  if (walletTypeObject === 'Metamask') {\n    const result = Boolean(ethereum && ethereum.isMetaMask);\n\n    if (result) {\n      if (ethereum.chainId !== NETWORK_CHAIN_ID) {\n        try {\n          const chain = await ethereum.request({\n            method: 'wallet_switchEthereumChain',\n            params: [{\n              chainId: NETWORK_CHAIN_ID\n            }]\n          });\n        } catch (error) {\n          console.log('metamask error', error);\n\n          if ((error === null || error === void 0 ? void 0 : error.code) === 4902) {\n            try {\n              const addChain = await ethereum.request({\n                method: 'wallet_addEthereumChain',\n                params: [{\n                  chainId: NETWORK_CHAIN_ID,\n                  chainName: NETWORK_CHAIN_NAME,\n                  nativeCurrency: {\n                    name: NETWORK_NATIVE_CURRENCY_NAME,\n                    symbol: NETWORK_NATIVE_CURRENCY_SYMBOL,\n                    decimals: Number(NETWORK_NATIVE_CURRENCY_DECIMALS)\n                  },\n                  rpcUrls: [NETWORK_RPC_URL],\n                  blockExplorerUrls: [NETWORK_LINK]\n                }]\n              });\n              window.location.reload();\n            } catch (error) {}\n          }\n        }\n      }\n\n      ethereum.on('chainChanged', async chainId => {\n        if (chainId !== NETWORK_CHAIN_ID) {\n          // toast.error('Select Binance Smart Chain Mainnet Network in wallet!')\n          try {\n            const chain = await ethereum.request({\n              method: 'wallet_switchEthereumChain',\n              params: [{\n                chainId: NETWORK_CHAIN_ID\n              }]\n            });\n          } catch (error) {\n            console.log('metamask error', error);\n\n            if ((error === null || error === void 0 ? void 0 : error.code) === 4902) {\n              try {\n                const addChain = await ethereum.request({\n                  method: 'wallet_addEthereumChain',\n                  params: [{\n                    chainId: await window.ethereum.chainId,\n                    chainName: NETWORK_CHAIN_NAME,\n                    nativeCurrency: {\n                      name: NETWORK_NATIVE_CURRENCY_NAME,\n                      symbol: NETWORK_NATIVE_CURRENCY_SYMBOL,\n                      decimals: Number(NETWORK_NATIVE_CURRENCY_DECIMALS)\n                    },\n                    rpcUrls: [NETWORK_RPC_URL],\n                    blockExplorerUrls: [NETWORK_LINK]\n                  }]\n                });\n              } catch (error) {}\n            }\n          }\n        }\n      });\n    }\n  }\n\n  if (walletTypeObject === 'BinanceChain') {\n    if (BinanceChain) {\n      BinanceChain.on('chainChanged', async chainId => {\n        if (chainId !== NETWORK_CHAIN_ID) {\n          // toast.error('Select Binance Smart Chain Mainnet Network in wallet!')\n          try {\n            const chain = await BinanceChain.request({\n              method: 'wallet_switchEthereumChain',\n              params: [{\n                chainId: NETWORK_CHAIN_ID\n              }]\n            });\n          } catch (error) {\n            console.log('binance error', error);\n          }\n        }\n      });\n    }\n  }\n};\n\nconst callWeb3 = async () => {\n  if (web3Object) {\n    return web3Object;\n  }\n\n  const {\n    ethereum,\n    web3,\n    BinanceChain\n  } = window;\n\n  if (walletTypeObject === 'Metamask') {\n    if (ethereum && ethereum.isMetaMask) {\n      web3Object = new Web3(ethereum);\n      return web3Object;\n    } else if (ethereum) {\n      web3Object = new Web3(ethereum);\n      return web3Object;\n    } else if (web3) {\n      web3Object = new Web3(web3.currentProvider);\n      return web3Object;\n    } else {\n      toast.error(\"You have to install Wallet!\");\n    }\n  } else {\n    if (BinanceChain) {\n      web3Object = new Web3(BinanceChain);\n      return web3Object;\n    } else {\n      toast.error(\"You have to install Wallet!\");\n    }\n  }\n};\n\nconst callContract = async (contractAddress, contractABI) => {\n  if (contractOjbect && currentContractAddress && currentContractAddress.toLowerCase() === contractAddress.toLowerCase()) {\n    return contractOjbect;\n  }\n\n  const web3Object = await callWeb3();\n  currentContractAddress = contractAddress;\n  contractOjbect = new web3Object.eth.Contract(contractABI, contractAddress);\n  return contractOjbect;\n};\n\nconst callTokenContract = async tokenAddress => {\n  if (tokenContractObject && currentContractAddress && currentTokenAddress.toLowerCase() === tokenAddress.toLowerCase()) {\n    return tokenContractObject;\n  }\n\n  const web3Object = await callWeb3();\n  currentTokenAddress = tokenAddress;\n  tokenContractObject = new web3Object.eth.Contract(TOKEN_ABI, currentTokenAddress);\n  return tokenContractObject;\n};\n\nconst calculateGasPrice = async () => {\n  const web3 = await callWeb3();\n  return await web3.eth.getGasPrice();\n};\n\nconst getDefaultAccount = async () => {\n  const web3 = await callWeb3();\n  const accounts = await web3.eth.getAccounts();\n  return accounts[0];\n};\n\nconst approveToken = async (address, value, mainContractAddress, tokenAddress) => {\n  try {\n    const gasPrice = await calculateGasPrice();\n    const contract = await callTokenContract(tokenAddress); //calculate estimate gas limit\n\n    const gas = await contract.methods.approve(mainContractAddress, value).estimateGas({\n      from: address\n    });\n    return await contract.methods.approve(mainContractAddress, value).send({\n      from: address,\n      gasPrice,\n      gas\n    });\n  } catch (error) {\n    return error;\n  }\n};\n\nconst allowanceToken = async (tokenAddress, mainContractAddress, address) => {\n  try {\n    const contract = await callTokenContract(tokenAddress);\n    return await contract.methods.allowance(address, mainContractAddress).call();\n  } catch (error) {\n    return error;\n  }\n};\n\nconst getTokenBalance = async (tokenAddress, address) => {\n  try {\n    const contract = await callTokenContract(tokenAddress);\n    const decimals = await contract.methods.decimals().call();\n    let result = await contract.methods.balanceOf(address).call();\n    result = (Number(result) / 10 ** decimals).toFixed(5);\n    return Number(result);\n  } catch (error) {\n    console.log(\"Error:\", error);\n    return error;\n  }\n};\n\nconst getTokenBalanceFull = async (tokenAddress, address) => {\n  try {\n    const contract = await callTokenContract(tokenAddress);\n    const decimals = await contract.methods.decimals().call();\n    let result = await contract.methods.balanceOf(address).call();\n    result = result / 10 ** decimals;\n    return result;\n  } catch (error) {\n    console.log(\"Error:\", error);\n    return error;\n  }\n};\n\nconst getDecimals = async tokenAddress => {\n  try {\n    const contract = await callTokenContract(tokenAddress);\n    return await contract.methods.decimals().call();\n  } catch (error) {\n    return error;\n  }\n};\n\nconst getTokenName = async tokenAddress => {\n  try {\n    const contract = await callTokenContract(tokenAddress);\n    return await contract.methods.name().call();\n  } catch (error) {\n    return error;\n  }\n};\n\nconst getTokenSymbol = async tokenAddress => {\n  try {\n    const contract = await callTokenContract(tokenAddress);\n    return await contract.methods.symbol().call();\n  } catch (error) {\n    return error;\n  }\n};\n\nconst getBNBBalance = async address => {\n  try {\n    const web3 = await callWeb3();\n    let result = await web3.eth.getBalance(address);\n    result = (Number(result) / 10 ** 18).toFixed(5);\n    return Number(result);\n  } catch (error) {\n    return error;\n  }\n};\n\nconst setWalletType = async walletType => {\n  walletTypeObject = walletType;\n};\n\nconst getTotalSupply = async tokenAddress => {\n  try {\n    const contract = await callTokenContract(tokenAddress);\n    let result = await contract.methods.totalSupply().call();\n    const decimals = await contract.methods.decimals().call();\n    result = Number(result) / 10 ** Number(decimals);\n    return result;\n  } catch (error) {\n    return error;\n  }\n};\n\nconst web3ErrorHandle = async err => {\n  let message = 'Transaction Reverted!';\n\n  if (err.message.indexOf('Rejected') > -1) {\n    message = 'User denied the transaction!';\n  } else if (err.message && err.message.indexOf('User denied') > -1) {\n    message = 'User denied the transaction!';\n  } else if (err.message && err.message.indexOf('INSUFFICIENT_B') > -1) {\n    message = 'Insufficient value of second token!';\n  } else if (err.message && err.message.indexOf('INSUFFICIENT_A') > -1) {\n    message = 'Insufficient value of first token!';\n  } else {\n    console.log(err, err.message);\n  }\n\n  return message;\n};\n\nconst getLiquidity100Value = async (tokenAddress, address) => {\n  try {\n    const contract = await callTokenContract(tokenAddress);\n    return await contract.methods.balanceOf(address).call();\n  } catch (error) {\n    console.log(\"Error:\", error);\n    return error;\n  }\n};\n\nconst callWeb3ForWalletConnect = async provider => {\n  const provide = new WalletConnectProvider({\n    //infuraId: \"8570afa4d18b4c5d9cb3a629b08de069\",\n    rpc: {\n      97: 'https://data-seed-prebsc-2-s3.binance.org:8545/',\n      56: \"https://bsc-dataseed.binance.org/\"\n    },\n    chainId: 97,\n    network: \"binance\",\n    qrcode: true,\n    qrcodeModalOptions: {\n      mobileLinks: [\"rainbow\", \"metamask\", \"argent\", \"trust\", \"imtoken\", \"pillar\"],\n      desktopLinks: [\"encrypted ink\"]\n    }\n  });\n  const results = await provide.enable();\n  walletConnectProvider = provide;\n  web3Object = new Web3(provide); // return instance;\n}; //exporting functions\n\n\nexport const ContractServices = {\n  isMetamaskInstalled,\n  isBinanceChainInstalled,\n  callWeb3,\n  callContract,\n  calculateGasPrice,\n  approveToken,\n  getTokenBalance,\n  getTokenBalanceFull,\n  getDecimals,\n  getTokenName,\n  getTokenSymbol,\n  getBNBBalance,\n  setWalletType,\n  allowanceToken,\n  getTotalSupply,\n  convertToDecimals,\n  web3ErrorHandle,\n  getDefaultAccount,\n  callTokenContract,\n  walletWindowListener,\n  walletTypeObject,\n  getLiquidity100Value,\n  callWeb3ForWalletConnect\n};","map":{"version":3,"sources":["/home/user/Desktop/nm/SaitaSwap/src/services/ContractServices.js"],"names":["Web3","TOKEN_ABI","toast","NETWORK_CHAIN_ID","NETWORK_CHAIN_NAME","NETWORK_LINK","NETWORK_NATIVE_CURRENCY_DECIMALS","NETWORK_NATIVE_CURRENCY_NAME","NETWORK_NATIVE_CURRENCY_SYMBOL","NETWORK_RPC_URL","WalletConnectProvider","web3Object","contractOjbect","currentContractAddress","tokenContractObject","currentTokenAddress","walletTypeObject","walletConnectProvider","convertToDecimals","value","decimals","Number","isMetamaskInstalled","type","ethereum","web3","window","result","Boolean","isMetaMask","accounts","request","method","err","error","message","eth","getAccounts","isBinanceChainInstalled","BinanceChain","walletWindowListener","chainId","chain","params","console","log","code","addChain","chainName","nativeCurrency","name","symbol","rpcUrls","blockExplorerUrls","location","reload","on","callWeb3","currentProvider","callContract","contractAddress","contractABI","toLowerCase","Contract","callTokenContract","tokenAddress","calculateGasPrice","getGasPrice","getDefaultAccount","approveToken","address","mainContractAddress","gasPrice","contract","gas","methods","approve","estimateGas","from","send","allowanceToken","allowance","call","getTokenBalance","balanceOf","toFixed","getTokenBalanceFull","getDecimals","getTokenName","getTokenSymbol","getBNBBalance","getBalance","setWalletType","walletType","getTotalSupply","totalSupply","web3ErrorHandle","indexOf","getLiquidity100Value","callWeb3ForWalletConnect","provider","provide","rpc","network","qrcode","qrcodeModalOptions","mobileLinks","desktopLinks","results","enable","ContractServices"],"mappings":"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","sourcesContent":["import Web3 from \"web3\";\nimport TOKEN_ABI from \"../assets/ABI/tokenContract.ABI.json\";\nimport { toast } from \"../components/Toast/Toast\";\nimport { NETWORK_CHAIN_ID, NETWORK_CHAIN_NAME, NETWORK_LINK, NETWORK_NATIVE_CURRENCY_DECIMALS, NETWORK_NATIVE_CURRENCY_NAME, NETWORK_NATIVE_CURRENCY_SYMBOL, NETWORK_RPC_URL } from '../constant'\nimport WalletConnectProvider from '@walletconnect/web3-provider'\n\nlet web3Object;\nlet contractOjbect;\nlet currentContractAddress;\nlet tokenContractObject;\nlet currentTokenAddress;\nlet walletTypeObject = 'Metamask';\nlet walletConnectProvider;\n\n//only for lp tokens\nconst convertToDecimals = async (value) => {\n  const decimals = 18;\n  return Number(value) / 10 ** decimals;\n}\n\nconst isMetamaskInstalled = async (type) => {\n  //Have to check the ethereum binding on the window object to see if it's installed\n  const { ethereum, web3 } = window;\n  const result = Boolean(ethereum && ethereum.isMetaMask);\n  walletTypeObject = 'Metamask';\n  if (result) {\n    //metamask\n    try {\n      const accounts = await ethereum.request({ method: 'eth_requestAccounts' });\n      return accounts[0];\n    } catch (err) {\n      toast.error(err.message);\n      return false;\n    }\n  } else if (ethereum) {\n    //trust wallet\n    try {\n      const accounts = await ethereum.request({ method: 'eth_requestAccounts' });\n      return accounts[0];\n    } catch (err) {\n      toast.error(err.message);\n      return false;\n    }\n  } else if (web3) {\n    //trustwallet\n    const accounts = await web3.eth.getAccounts();\n    return accounts[0];\n  } else {\n    if (type) {\n      toast.error(`Install ${type} extension first!`);\n    }\n    return false;\n  }\n\n}\n\n\n\nconst isBinanceChainInstalled = async () => {\n  //Have to check the ethereum binding on the window object to see if it's installed\n  const { BinanceChain } = window;\n  if (BinanceChain) {\n    walletTypeObject = 'BinanceChain';\n    try {\n      const accounts = await BinanceChain.request({ method: 'eth_requestAccounts' });\n      return accounts[0];\n    } catch (err) {\n      toast.error(err.message);\n      return false;\n    }\n  } else {\n    toast.error(\"Install BinanceChain extension first!\");\n    return false;\n  }\n}\n\nconst walletWindowListener = async () => {\n  const { BinanceChain, ethereum } = window;\n  if (walletTypeObject === 'Metamask') {\n    const result = Boolean(ethereum && ethereum.isMetaMask);\n    if (result) {\n      if (ethereum.chainId !== NETWORK_CHAIN_ID) {\n        try {\n          const chain = await ethereum.request({\n            method: 'wallet_switchEthereumChain',\n            params: [{ chainId: NETWORK_CHAIN_ID }],\n          });\n        } catch (error) {\n          console.log('metamask error', error);\n          if (error?.code === 4902) {\n            try {\n              const addChain = await ethereum.request({\n                method: 'wallet_addEthereumChain',\n                params: [{\n                  chainId: NETWORK_CHAIN_ID,\n                  chainName: NETWORK_CHAIN_NAME,\n                  nativeCurrency: {\n                    name: NETWORK_NATIVE_CURRENCY_NAME,\n                    symbol: NETWORK_NATIVE_CURRENCY_SYMBOL,\n                    decimals: Number(NETWORK_NATIVE_CURRENCY_DECIMALS)\n                  },\n                  rpcUrls: [NETWORK_RPC_URL],\n                  blockExplorerUrls: [NETWORK_LINK]\n                }],\n              });\n              window.location.reload();\n            } catch (error) { }\n          }\n        }\n\n      }\n\n      ethereum.on('chainChanged', async (chainId) => {\n        if (chainId !== NETWORK_CHAIN_ID) {\n          // toast.error('Select Binance Smart Chain Mainnet Network in wallet!')\n          try {\n            const chain = await ethereum.request({\n              method: 'wallet_switchEthereumChain',\n              params: [{ chainId: NETWORK_CHAIN_ID }],\n            });\n          } catch (error) {\n            console.log('metamask error', error);\n            if (error?.code === 4902) {\n              try {\n                const addChain = await ethereum.request({\n                  method: 'wallet_addEthereumChain',\n                  params: [{\n                    chainId: await window.ethereum.chainId,\n                    chainName: NETWORK_CHAIN_NAME,\n                    nativeCurrency: {\n                      name: NETWORK_NATIVE_CURRENCY_NAME,\n                      symbol: NETWORK_NATIVE_CURRENCY_SYMBOL,\n                      decimals: Number(NETWORK_NATIVE_CURRENCY_DECIMALS)\n                    },\n                    rpcUrls: [NETWORK_RPC_URL],\n                    blockExplorerUrls: [NETWORK_LINK]\n                  }],\n                });\n              } catch (error) { }\n            }\n          }\n        }\n      });\n    }\n\n  }\n  if (walletTypeObject === 'BinanceChain') {\n    if (BinanceChain) {\n      BinanceChain.on('chainChanged', async (chainId) => {\n        if (chainId !== NETWORK_CHAIN_ID) {\n          // toast.error('Select Binance Smart Chain Mainnet Network in wallet!')\n          try {\n            const chain = await BinanceChain.request({\n              method: 'wallet_switchEthereumChain',\n              params: [{ chainId: NETWORK_CHAIN_ID }],\n            });\n          } catch (error) {\n            console.log('binance error', error)\n          }\n        }\n      });\n    }\n  }\n}\n\nconst callWeb3 = async () => {\n  if (web3Object) {\n    return (web3Object);\n  }\n  const { ethereum, web3, BinanceChain } = window;\n  if (walletTypeObject === 'Metamask') {\n    if (ethereum && ethereum.isMetaMask) {\n      web3Object = new Web3(ethereum);\n      return (web3Object);\n    } else if (ethereum) {\n      web3Object = new Web3(ethereum);\n      return (web3Object);\n    } else if (web3) {\n      web3Object = new Web3(web3.currentProvider);\n      return (web3Object);\n    } else {\n      toast.error(\"You have to install Wallet!\");\n    }\n  } else {\n    if (BinanceChain) {\n      web3Object = new Web3(BinanceChain);\n      return (web3Object);\n    } else {\n      toast.error(\"You have to install Wallet!\");\n    }\n  }\n};\n\nconst callContract = async (contractAddress, contractABI) => {\n  if (\n    contractOjbect && currentContractAddress &&\n    currentContractAddress.toLowerCase() === contractAddress.toLowerCase()\n  ) {\n    return contractOjbect;\n  }\n  const web3Object = await callWeb3();\n  currentContractAddress = contractAddress;\n  contractOjbect = new web3Object.eth.Contract(contractABI, contractAddress);\n  return contractOjbect;\n};\nconst callTokenContract = async (tokenAddress) => {\n  if (\n    tokenContractObject && currentContractAddress &&\n    currentTokenAddress.toLowerCase() === tokenAddress.toLowerCase()\n  ) {\n    return tokenContractObject;\n  }\n  const web3Object = await callWeb3();\n  currentTokenAddress = tokenAddress;\n  tokenContractObject = new web3Object.eth.Contract(\n    TOKEN_ABI,\n    currentTokenAddress\n  );\n  return tokenContractObject;\n};\n\nconst calculateGasPrice = async () => {\n  const web3 = await callWeb3();\n  return await web3.eth.getGasPrice();\n}\n\nconst getDefaultAccount = async () => {\n  const web3 = await callWeb3();\n  const accounts = await web3.eth.getAccounts();\n  return accounts[0];\n}\n\nconst approveToken = async (address, value, mainContractAddress, tokenAddress) => {\n  try {\n    const gasPrice = await calculateGasPrice();\n    const contract = await callTokenContract(tokenAddress);\n    //calculate estimate gas limit\n    const gas = await contract.methods.approve(mainContractAddress, value).estimateGas({ from: address });\n\n    return await contract.methods\n      .approve(mainContractAddress, value)\n      .send({ from: address, gasPrice, gas });\n  } catch (error) {\n    return error;\n  }\n};\n\nconst allowanceToken = async (tokenAddress, mainContractAddress, address) => {\n  try {\n    const contract = await callTokenContract(tokenAddress);\n    return await contract.methods\n      .allowance(address, mainContractAddress).call();\n  } catch (error) {\n    return error;\n  }\n}\n\nconst getTokenBalance = async (tokenAddress, address) => {\n  try {\n    const contract = await callTokenContract(tokenAddress);\n    const decimals = await contract.methods.decimals().call();\n\n    let result = await contract.methods.balanceOf(address).call();\n    result = ((Number(result) / 10 ** decimals)).toFixed(5);\n    return Number(result);\n  } catch (error) {\n    console.log(\"Error:\", error);\n    return error;\n  }\n};\nconst getTokenBalanceFull = async (tokenAddress, address) => {\n  try {\n    const contract = await callTokenContract(tokenAddress);\n    const decimals = await contract.methods.decimals().call();\n\n    let result = await contract.methods.balanceOf(address).call();\n    result = result / 10 ** decimals;\n\n    return result;\n  } catch (error) {\n    console.log(\"Error:\", error);\n    return error;\n  }\n};\n\nconst getDecimals = async (tokenAddress) => {\n  try {\n    const contract = await callTokenContract(tokenAddress);\n    return await contract.methods.decimals().call();\n  } catch (error) {\n    return error;\n  }\n};\n\nconst getTokenName = async (tokenAddress) => {\n  try {\n    const contract = await callTokenContract(tokenAddress);\n    return await contract.methods.name().call();\n  } catch (error) {\n    return error;\n  }\n}\n\nconst getTokenSymbol = async (tokenAddress) => {\n  try {\n    const contract = await callTokenContract(tokenAddress);\n    return await contract.methods.symbol().call();\n  } catch (error) {\n    return error;\n  }\n}\n\nconst getBNBBalance = async (address) => {\n  try {\n    const web3 = await callWeb3();\n    let result = await web3.eth.getBalance(address);\n    result = (Number(result) / 10 ** 18).toFixed(5);\n    return Number(result);\n  } catch (error) {\n    return error;\n  }\n}\n\nconst setWalletType = async (walletType) => {\n  walletTypeObject = walletType;\n}\n\nconst getTotalSupply = async (tokenAddress) => {\n  try {\n    const contract = await callTokenContract(tokenAddress);\n    let result = await contract.methods.totalSupply().call();\n    const decimals = await contract.methods.decimals().call();\n    result = Number(result) / (10 ** Number(decimals));\n    return result;\n  } catch (error) {\n    return error;\n  }\n}\n\nconst web3ErrorHandle = async (err) => {\n  let message = 'Transaction Reverted!';\n  if (err.message.indexOf('Rejected') > -1) {\n    message = 'User denied the transaction!';\n  } else if (err.message && err.message.indexOf('User denied') > -1) {\n    message = 'User denied the transaction!';\n  } else if (err.message && err.message.indexOf('INSUFFICIENT_B') > -1) {\n    message = 'Insufficient value of second token!';\n  } else if (err.message && err.message.indexOf('INSUFFICIENT_A') > -1) {\n    message = 'Insufficient value of first token!';\n  } else {\n    console.log(err, err.message);\n  }\n  return message;\n}\n\nconst getLiquidity100Value = async (tokenAddress, address) => {\n  try {\n    const contract = await callTokenContract(tokenAddress);\n\n    return await contract.methods.balanceOf(address).call();\n  } catch (error) {\n    console.log(\"Error:\", error);\n    return error;\n  }\n};\n\nconst callWeb3ForWalletConnect = async (provider) => {\n  const provide = new WalletConnectProvider({\n    //infuraId: \"8570afa4d18b4c5d9cb3a629b08de069\",\n    rpc: {\n      97: 'https://data-seed-prebsc-2-s3.binance.org:8545/',\n      56: \"https://bsc-dataseed.binance.org/\",\n    },\n    chainId: 97,\n    network: \"binance\",\n    qrcode: true,\n    qrcodeModalOptions: {\n      mobileLinks: [\n        \"rainbow\",\n        \"metamask\",\n        \"argent\",\n        \"trust\",\n        \"imtoken\",\n        \"pillar\",\n      ],\n      desktopLinks: [\n        \"encrypted ink\",\n      ]\n    }\n  });\n  const results = await provide.enable();\n  walletConnectProvider = provide;\n  web3Object = new Web3(provide);\n\n  // return instance;\n}\n\n\n//exporting functions\nexport const ContractServices = {\n  isMetamaskInstalled,\n  isBinanceChainInstalled,\n  callWeb3,\n  callContract,\n  calculateGasPrice,\n  approveToken,\n  getTokenBalance,\n  getTokenBalanceFull,\n  getDecimals,\n  getTokenName,\n  getTokenSymbol,\n  getBNBBalance,\n  setWalletType,\n  allowanceToken,\n  getTotalSupply,\n  convertToDecimals,\n  web3ErrorHandle,\n  getDefaultAccount,\n  callTokenContract,\n  walletWindowListener,\n  walletTypeObject,\n  getLiquidity100Value,\n  callWeb3ForWalletConnect\n}\n"]},"metadata":{},"sourceType":"module"}