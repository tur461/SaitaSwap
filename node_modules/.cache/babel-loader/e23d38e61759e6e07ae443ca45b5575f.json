{"ast":null,"code":"var _jsxFileName = \"/home/user/Desktop/nm/SaitaSwap/src/components/PlanetCard/PlanetCard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport ButtonCustom from \"../Button/Button\";\nimport { Button } from \"react-bootstrap\";\nimport \"./PlanetCard.scss\";\nimport RightArrow from \"../../assets/images/right-arrow.png\";\nimport DownArrow from \"../../assets/images/down-arrow.png\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ExchangeService } from \"../../services/ExchangeService\";\nimport { MAIN_CONTRACT_LIST, WETH, ANCHOR_BUSD_LP, TOKEN_LIST, BNB_BUSD_LP } from \"../../assets/tokens\";\nimport { ContractServices } from \"../../services/ContractServices\";\nimport { FarmService } from \"../../services/FarmService\";\nimport { BigNumber } from \"bignumber.js\";\nimport { toast } from \"../Toast/Toast\";\nimport { addTransaction, startLoading, stopLoading } from \"../../redux/actions\";\nimport { addCommas } from \"../../constant\";\nimport NIOB from \"../../assets/images/token_icons/NIOB.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst PlanetCard = props => {\n  _s();\n\n  const [classToggle, setClassToggle] = useState(false);\n  const dispatch = useDispatch();\n  const isUserConnected = useSelector(state => state.persist.isUserConnected);\n  const {\n    farm: {\n      poolInfo,\n      userInfo,\n      pid\n    },\n    index,\n    currentIndex,\n    handleChange,\n    harvestOnClick,\n    stakeHandle,\n    handleRoiModal,\n    status\n  } = props;\n  const [lpTokenDetails, setLpTokenDetails] = useState(null);\n  const [showIncrease, setShowIncrease] = useState(false);\n  const [totalSupply, setTotalSupply] = useState(0);\n  const [liquidity, setLiquidity] = useState(0);\n  const [worth, setWorth] = useState(0);\n  const [showApproveButton, setShowApproveButton] = useState(true);\n  const [approvalConfirmation, setApprovalConfirmation] = useState(false);\n  const [showHarvest, setShowHarvest] = useState(false);\n  const [balance, setBalance] = useState(0);\n  const [stakeAmounts, setStakeAmounts] = useState({\n    amount: 0,\n    rewards: 0\n  });\n  const [apr, setApr] = useState(0);\n  const [roi, setROI] = useState({\n    allocPoint: 0,\n    totalAllcationPoint: 0,\n    anchorPerBlock: 0,\n    anchorPrice: 0,\n    liquidity: 0,\n    lpWorth: 0\n  });\n  const [dollarValue, setAnchorDollarValue] = useState(0.01);\n\n  const getAnchorDollarValue = async () => {\n    if (poolInfo.lpToken != undefined) {\n      try {\n        let reserves = await ExchangeService.getReserves(ANCHOR_BUSD_LP); // const token0 = await ExchangeService.getTokenZero(poolInfo.lpToken);\n        // const token1 = await ExchangeService.getTokenOne(poolInfo.lpToken);\n        // if ((token0.toLowerCase() === TOKEN_LIST[1].address.toLowerCase()) || (token1.toLowerCase() === TOKEN_LIST[1].address.toLowerCase())) {\n        //   reserves = await ExchangeService.getReserves(ANCHOR_BUSD_LP);\n        // } else {\n        //   //const pair = await ExchangeService.getPairFromPancakeFactory(poolInfo.lpToken);\n        //   reserves = await ExchangeService.getReserves(poolInfo.lpToken);\n        // }\n\n        let val = reserves[1] / reserves[0];\n        val = val || 0;\n        setAnchorDollarValue(val.toFixed(3));\n        return val.toFixed(3);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  };\n\n  const getDollarAPR = async address => {\n    try {\n      if (address.toLowerCase() === TOKEN_LIST[1].address.toLowerCase()) {\n        const reserves = await ExchangeService.getReserves(ANCHOR_BUSD_LP);\n        let val = reserves[1] / reserves[0];\n        val = val || 0;\n        setAnchorDollarValue(val.toFixed(3));\n        return val.toFixed(3);\n      } else if (address.toLowerCase() === TOKEN_LIST[2].address.toLowerCase()) {\n        return 1;\n      } else if (address.toLowerCase() != TOKEN_LIST[2].address.toLowerCase()) {\n        const pair = await ExchangeService.getPairFromPancakeFactory(address, TOKEN_LIST[2].address);\n        const reserves = await ExchangeService.getReserves(pair);\n        let val = reserves[1] / reserves[0];\n        val = val || 0;\n        setAnchorDollarValue(val.toFixed(3));\n        return val.toFixed(3);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const init = async () => {\n    if (poolInfo) {\n      // console.log(\"Pool Info:\", poolInfo);\n      const {\n        lpToken\n      } = poolInfo;\n\n      if (lpToken) {\n        const totalSupplyTemp = await ContractServices.getTotalSupply(lpToken);\n        setTotalSupply(totalSupplyTemp);\n        const liquidity = await handleLiquidity(lpToken);\n        setLiquidity(liquidity);\n        const tokenStaked = await ExchangeService.getTokenStaked(lpToken);\n        const lpWorth = liquidity / tokenStaked;\n        setWorth(lpWorth);\n        const lpTokenDetailsTemp = await FarmService.getLpTokenDetails(lpToken);\n        setLpTokenDetails(lpTokenDetailsTemp);\n        const a = await calculateAPR(Number(poolInfo.allocPoint), lpToken, liquidity);\n        lpTokenDetailsTemp.apr = a;\n        setApr(a);\n\n        if (isUserConnected) {\n          const allowance = await ContractServices.allowanceToken(lpToken, MAIN_CONTRACT_LIST.farm.address, isUserConnected);\n          let check = true;\n\n          if (BigNumber(allowance).isGreaterThanOrEqualTo(BigNumber(2 * 255 - 1))) {\n            setShowApproveButton(false);\n            check = false;\n          }\n\n          let balance = await ContractServices.getTokenBalance(poolInfo.lpToken, isUserConnected);\n\n          if (balance > 0.00001) {\n            balance -= 0.00001;\n          }\n\n          setBalance(balance);\n          const amount = userInfo.amount / 10 ** lpTokenDetailsTemp.decimals; // const amount = Number(\n          //   (\n          //     Number(userInfo.amount) /\n          //     10 ** Number(lpTokenDetailsTemp.decimals)\n          //   )\n          // ).toFixed(18)\n\n          const rewards = Number(Number((await FarmService.pendingPanther(pid, isUserConnected)) / 10 ** 18).toFixed(5));\n\n          if (!check && amount > 0) {\n            setShowIncrease(true);\n          }\n\n          setStakeAmounts({\n            amount,\n            rewards\n          }); //nextHarvest\n\n          const nextHarvestUntil = await FarmService.canHarvest(pid, isUserConnected);\n\n          if (!check && rewards > 0 && Number(userInfo.nextHarvestUntil) > 0 && nextHarvestUntil) {\n            setShowHarvest(true);\n          }\n        }\n      }\n    }\n  }; //call web3 approval function\n\n\n  const handleTokenApproval = async () => {\n    const acc = await ContractServices.getDefaultAccount();\n\n    if (acc && acc.toLowerCase() !== isUserConnected.toLowerCase()) {\n      return toast.error(\"Wallet address doesn`t match!\");\n    }\n\n    if (approvalConfirmation) {\n      return toast.info(\"Token approval is processing\");\n    } // (2*256 - 1);\n\n\n    const value = \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n\n    try {\n      dispatch(startLoading());\n      setApprovalConfirmation(true);\n      const r = await ContractServices.approveToken(isUserConnected, value, MAIN_CONTRACT_LIST.farm.address, poolInfo.lpToken);\n\n      if (r) {\n        let data = {\n          message: `Approve LP Token`,\n          tx: r.transactionHash\n        };\n        dispatch(addTransaction(data));\n        setApprovalConfirmation(false);\n        init();\n      }\n\n      dispatch(stopLoading());\n    } catch (err) {\n      setApprovalConfirmation(false);\n      dispatch(stopLoading());\n      toast.error(\"Approval Transaction Reverted!\");\n    }\n  };\n\n  const beforeStake = async type => {\n    if (isUserConnected) {\n      let bal = 0;\n\n      if (type === \"deposit\") {\n        bal = balance;\n      }\n\n      if (type === \"withdraw\") {\n        bal = stakeAmounts.amount;\n      }\n\n      stakeHandle({\n        pid,\n        poolInfo,\n        lpTokenDetails,\n        balance: bal\n      }, type);\n    } else {\n      return toast.error(\"Connect wallet first!\");\n    }\n  };\n\n  const calPrice = async pairAddress => {\n    var _TOKEN_LIST$, _TOKEN_LIST$2;\n\n    let price = 0;\n\n    if (pairAddress == \"0x0000000000000000000000000000000000000000\") {\n      return 0;\n    } // console.log(\"pairAddresspairAddress\", pairAddress);\n\n\n    const tokenZero = await ExchangeService.getTokenZero(pairAddress);\n    const tokenOne = await ExchangeService.getTokenOne(pairAddress);\n    const reserve = await ExchangeService.getReserves(pairAddress);\n    const decimalZero = await ContractServices.getDecimals(tokenZero);\n    const decimalOne = await ContractServices.getDecimals(tokenOne); // console.log(tokenZero, TOKEN_LIST[2].address);\n\n    if (tokenZero.toLowerCase() === ((_TOKEN_LIST$ = TOKEN_LIST[2]) === null || _TOKEN_LIST$ === void 0 ? void 0 : _TOKEN_LIST$.address.toLowerCase())) {\n      return price = reserve[0] * 10 ** decimalOne / (reserve[1] * 10 ** decimalZero);\n    }\n\n    if (tokenOne.toLowerCase() === ((_TOKEN_LIST$2 = TOKEN_LIST[2]) === null || _TOKEN_LIST$2 === void 0 ? void 0 : _TOKEN_LIST$2.address.toLowerCase())) {\n      return price = reserve[1] * 10 ** decimalZero / (reserve[0] * 10 ** decimalOne);\n    }\n\n    let priceBNBToUSD = await calPrice(BNB_BUSD_LP); //replace with BNB-USD pair\n\n    if (tokenZero.toLowerCase() === WETH.toLowerCase()) {\n      price = reserve[0] * 10 ** decimalOne / (reserve[1] * 10 ** decimalZero);\n      return price * priceBNBToUSD;\n    }\n\n    if (tokenOne.toLowerCase() === WETH.toLowerCase()) {\n      price = reserve[1] * 10 ** decimalZero / (reserve[0] * 10 ** decimalOne);\n      return price * priceBNBToUSD;\n    }\n  };\n\n  const calculateAPR = async (allocPoint, lpToken, lpWorth) => {\n    const anchorPrice = await calPrice(ANCHOR_BUSD_LP);\n    const totalAllcationPoint = Number(await FarmService.totalAllocationPoint());\n    const anchorPerBlock = Number(await FarmService.pantherPerBlock()); //need to calculate usd price.\n\n    const liquidity = await handleLiquidity(lpToken); // console.log(\"liquidity: \", liquidity);\n\n    if (liquidity != 0) {\n      const apr = allocPoint / totalAllcationPoint * (anchorPerBlock / 10 ** 18 * 28800 * 365 * 100 * anchorPrice) / liquidity;\n      setROI({\n        allocPoint,\n        totalAllcationPoint,\n        anchorPerBlock,\n        anchorPrice,\n        liquidity,\n        lpWorth\n      });\n      return apr.toFixed(2);\n    }\n\n    return 0;\n  };\n\n  const handleLiquidity = async pairAddress => {\n    if (pairAddress != \"0x0000000000000000000000000000000000000000\") {\n      var _TOKEN_LIST$3, _TOKEN_LIST$4;\n\n      const tokenZero = await ExchangeService.getTokenZero(pairAddress);\n      const tokenOne = await ExchangeService.getTokenOne(pairAddress);\n      const reserve = await ExchangeService.getReserves(pairAddress);\n      const tokenZeroPairUSDT = await ExchangeService.getPair(tokenZero, (_TOKEN_LIST$3 = TOKEN_LIST[2]) === null || _TOKEN_LIST$3 === void 0 ? void 0 : _TOKEN_LIST$3.address);\n      const tokenOnePairUSDT = await ExchangeService.getPair(tokenOne, (_TOKEN_LIST$4 = TOKEN_LIST[2]) === null || _TOKEN_LIST$4 === void 0 ? void 0 : _TOKEN_LIST$4.address);\n      const tokenZeroPairBNB = await ExchangeService.getPair(tokenZero, WETH);\n      const tokenOnePairBNB = await ExchangeService.getPair(tokenOne, WETH);\n      const decimalZero = await ContractServices.getDecimals(tokenZero);\n      const decimalOne = await ContractServices.getDecimals(tokenOne);\n      let priceA = await getDollarAPR(tokenZero);\n      let priceB = await getDollarAPR(tokenOne); // if (tokenZero.toLowerCase() == TOKEN_LIST[2].address.toLowerCase()) {\n      //   priceA = 1;\n      // } else if (tokenZero.toLowerCase() == WETH.toLowerCase()) {\n      //   //  priceA = await calPrice(BNB_BUSD_LP);\n      //   priceA = await getDollarAPR(tokenZero);\n      // }\n      // if (tokenOne.toLowerCase() == TOKEN_LIST[2].address.toLowerCase()) {\n      //   priceB = 1;\n      // } else if (tokenOne.toLowerCase() == WETH.toLowerCase()) {\n      //   //priceB = await calPrice(BNB_BUSD_LP);\n      //   priceB = await getDollarAPR(tokenOne);\n      // }\n      // if (priceA == 0) {\n      //   if (tokenZeroPairUSDT != \"0x0000000000000000000000000000000000000000\") {\n      //     // priceA = await calPrice(tokenZeroPairUSDT);\n      //     priceB = await getDollarAPR(tokenOne);\n      //   } else if (\n      //     tokenZeroPairBNB != \"0x0000000000000000000000000000000000000000\"\n      //   ) {\n      //     //  priceA = await calPrice(tokenZeroPairBNB);\n      //     priceA = await getDollarAPR(tokenZero);\n      //   } else {\n      //     priceA = 0;\n      //   }\n      // }\n      // if (priceB == 0) {\n      //   if (tokenOnePairUSDT != \"0x0000000000000000000000000000000000000000\") {\n      //     priceB = await getDollarAPR(tokenOne);\n      //   } else if (\n      //     tokenOnePairBNB != \"0x0000000000000000000000000000000000000000\"\n      //   ) {\n      //     priceB = await getDollarAPR(tokenOne);\n      //   } else {\n      //     priceB = 0;\n      //   }\n      // }\n\n      const totalSupply = await ExchangeService.getTotalSupply(pairAddress);\n      const tokenStaked = await ExchangeService.getTokenStaked(pairAddress);\n      console.log(\"PriceA:\", priceA);\n      console.log(\"PriceB:\", priceB);\n      console.log(\"reserve:\", reserve);\n      const liquidity = (reserve[0] / 10 ** decimalZero * priceA + reserve[1] / 10 ** decimalOne * priceB) / totalSupply * tokenStaked;\n      return liquidity;\n    }\n\n    return 0;\n  };\n\n  const handleIcon = symbol => {\n    if (symbol != undefined) {\n      const tokenObj = TOKEN_LIST.find(d => d.symbol.toLowerCase() === symbol.toLowerCase());\n      return tokenObj != undefined && tokenObj.icon;\n    }\n  };\n\n  const handleDefaultIcon = symbol => {\n    if (symbol != undefined) {\n      const tokenObj = TOKEN_LIST.find(d => d.symbol.toLowerCase() === symbol.toLowerCase());\n      let index = tokenObj != undefined && tokenObj.icon.lastIndexOf(\"/\") + 1;\n      let filename = tokenObj != undefined && tokenObj.icon.substr(index);\n      return filename == \"default.60b90c93.svg\" ? \"farm-coin\" : \"\";\n    }\n  };\n\n  const earnedNiobValue = (dollarValue, rewards) => {\n    console.log(\"DOllar value:\", dollarValue);\n    let fixedAfterDecimal = Number(0.01 * rewards).toFixed(9);\n    let res = addCommas(fixedAfterDecimal);\n    return res;\n  };\n\n  const earnedDollarValue = (dollarValue, rewards) => {\n    let fixedAfterDecimal = Number(dollarValue * rewards).toFixed(9);\n    let res = addCommas(fixedAfterDecimal);\n    return res;\n  };\n\n  useEffect(async () => {\n    await getAnchorDollarValue();\n    init(); // console.log('userInfo.amount', userInfo.amount);\n  }, [isUserConnected]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      className: `planet_bar`,\n      onClick: () => setClassToggle(!classToggle),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cions\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"coin_imgs uppr\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: handleIcon(lpTokenDetails === null || lpTokenDetails === void 0 ? void 0 : lpTokenDetails.symbol0) ? handleIcon(lpTokenDetails === null || lpTokenDetails === void 0 ? void 0 : lpTokenDetails.symbol0) : \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 441,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 440,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"coin_imgs dwn\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: handleIcon(lpTokenDetails === null || lpTokenDetails === void 0 ? void 0 : lpTokenDetails.symbol1) ? handleIcon(lpTokenDetails === null || lpTokenDetails === void 0 ? void 0 : lpTokenDetails.symbol1) : \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 450,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 449,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"coin_title\",\n          children: lpTokenDetails === null || lpTokenDetails === void 0 ? void 0 : lpTokenDetails.lpTokenName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 458,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 9\n      }, this), poolInfo.depositFeeBP && Number(poolInfo.depositFeeBP) === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"info_about_card_feeinfo\",\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"img\", {\n          src: props.fee_icon,\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 463,\n          columnNumber: 13\n        }, this), \" No Fee\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 461,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"prcentx\",\n        children: [poolInfo === null || poolInfo === void 0 ? void 0 : poolInfo.allocPoint, \"X\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 466,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"coin_detail\",\n        children: [status && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"apr\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"APR\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 470,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [addCommas(apr) === \"NaN\" || NaN ? 0 : addCommas(apr), \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 473,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 469,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"lqdty\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Liquidity\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 477,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"$\", addCommas(Number(liquidity.toFixed(2))) === \"NaN\" || NaN ? 0 : addCommas(Number(liquidity.toFixed(2)))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 478,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 476,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"erndniob\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Earned Niob\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 486,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: addCommas(stakeAmounts.rewards) === \"NaN\" || NaN ? 0 : addCommas(stakeAmounts.rewards)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 487,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"$\", \" \", earnedNiobValue(dollarValue, stakeAmounts.rewards) === \"NaN\" || NaN ? 0 : earnedNiobValue(dollarValue, stakeAmounts.rewards)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 492,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 485,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 467,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dtl_btn\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Details\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: DownArrow\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 505,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 504,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 502,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 501,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 435,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classToggle ? \"planet_strip\" : \"d-none\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"available_funds\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"funds\",\n          children: [isUserConnected ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: showIncrease ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"cardFarm_increase\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"button\",\n                onClick: () => beforeStake(\"withdraw\"),\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: \"-\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 521,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 517,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"button\",\n                onClick: () => beforeStake(\"deposit\"),\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: \"+\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 527,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 523,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 516,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: showApproveButton ? /*#__PURE__*/_jsxDEV(Button, {\n                className: \"funds_btn\",\n                onClick: () => handleTokenApproval(),\n                children: \"Enable Farm\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 533,\n                columnNumber: 23\n              }, this) : /*#__PURE__*/_jsxDEV(Button, {\n                className: \"funds_btn\",\n                onClick: () => beforeStake(\"deposit\"),\n                children: \"Stake\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 540,\n                columnNumber: 23\n              }, this)\n            }, void 0, false)\n          }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              onClick: () => toast.error(\"Connect to wallet first!\"),\n              className: \"funds_btn\",\n              children: \"Unlock Wallet\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 552,\n              columnNumber: 17\n            }, this)\n          }, void 0, false), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"count_funds\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Available LP\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 561,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [balance, \" LP\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 562,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"LP Worth - \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 563,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"$\", addCommas(Number(worth.toFixed(2)))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 564,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 560,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"forwd_arrow\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: RightArrow,\n              alt: \"right-arrow\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 567,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 566,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 512,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"funds\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"count_funds\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: [lpTokenDetails === null || lpTokenDetails === void 0 ? void 0 : lpTokenDetails.lpTokenName, \" STAKED\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 573,\n              columnNumber: 15\n            }, this), showIncrease ? /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\" \", addCommas(stakeAmounts.amount)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 575,\n              columnNumber: 17\n            }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"0\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 577,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"$\", earnedDollarValue(stakeAmounts.amount, worth) === \"NaN\" || NaN ? 0 : earnedDollarValue(stakeAmounts.amount, worth)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 579,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 572,\n            columnNumber: 13\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"forwd_arrow\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: RightArrow,\n              alt: \"right-arrow\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 587,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 586,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 570,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"funds\",\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => {\n              setShowHarvest(false);\n              harvestOnClick(pid, lpTokenDetails === null || lpTokenDetails === void 0 ? void 0 : lpTokenDetails.lpTokenName);\n            },\n            disabled: !showHarvest,\n            className: \"funds_btn\",\n            children: \"Harvest\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 591,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"count_funds\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Earned\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 602,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [addCommas(stakeAmounts.rewards) === \"NaN\" || NaN ? 0 : addCommas(stakeAmounts.rewards), \" \", \"NIOB\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 603,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"$\", earnedDollarValue(dollarValue, stakeAmounts.rewards) === \"NaN\" || NaN ? 0 : earnedDollarValue(dollarValue, stakeAmounts.rewards)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 609,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 601,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 590,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"funds\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"count_funds\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"Deposit Fee :\", \" \", poolInfo.depositFeeBP ? Number(poolInfo.depositFeeBP) / 10000 * 100 : 0, \"%\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 620,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"d-block\",\n              children: [\"Harvest Interval:\", \" \", poolInfo.harvestInterval ? Number((poolInfo.harvestInterval / 3600).toFixed(2)) : 0, \" \", \"Hour(s)\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 627,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 619,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 618,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 511,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 510,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(PlanetCard, \"13oyZdr7p3sTkYMYfIBkWh1sXzo=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = PlanetCard;\nexport default PlanetCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"PlanetCard\");","map":{"version":3,"sources":["/home/user/Desktop/nm/SaitaSwap/src/components/PlanetCard/PlanetCard.js"],"names":["React","useEffect","useState","ButtonCustom","Button","RightArrow","DownArrow","useDispatch","useSelector","ExchangeService","MAIN_CONTRACT_LIST","WETH","ANCHOR_BUSD_LP","TOKEN_LIST","BNB_BUSD_LP","ContractServices","FarmService","BigNumber","toast","addTransaction","startLoading","stopLoading","addCommas","PlanetCard","props","classToggle","setClassToggle","dispatch","isUserConnected","state","persist","farm","poolInfo","userInfo","pid","index","currentIndex","handleChange","harvestOnClick","stakeHandle","handleRoiModal","status","lpTokenDetails","setLpTokenDetails","showIncrease","setShowIncrease","totalSupply","setTotalSupply","liquidity","setLiquidity","worth","setWorth","showApproveButton","setShowApproveButton","approvalConfirmation","setApprovalConfirmation","showHarvest","setShowHarvest","balance","setBalance","stakeAmounts","setStakeAmounts","amount","rewards","apr","setApr","roi","setROI","allocPoint","totalAllcationPoint","anchorPerBlock","anchorPrice","lpWorth","dollarValue","setAnchorDollarValue","getAnchorDollarValue","lpToken","undefined","reserves","getReserves","val","toFixed","error","console","log","getDollarAPR","address","toLowerCase","pair","getPairFromPancakeFactory","init","totalSupplyTemp","getTotalSupply","handleLiquidity","tokenStaked","getTokenStaked","lpTokenDetailsTemp","getLpTokenDetails","a","calculateAPR","Number","allowance","allowanceToken","check","isGreaterThanOrEqualTo","getTokenBalance","decimals","pendingPanther","nextHarvestUntil","canHarvest","handleTokenApproval","acc","getDefaultAccount","info","value","r","approveToken","data","message","tx","transactionHash","err","beforeStake","type","bal","calPrice","pairAddress","price","tokenZero","getTokenZero","tokenOne","getTokenOne","reserve","decimalZero","getDecimals","decimalOne","priceBNBToUSD","totalAllocationPoint","pantherPerBlock","tokenZeroPairUSDT","getPair","tokenOnePairUSDT","tokenZeroPairBNB","tokenOnePairBNB","priceA","priceB","handleIcon","symbol","tokenObj","find","d","icon","handleDefaultIcon","lastIndexOf","filename","substr","earnedNiobValue","fixedAfterDecimal","res","earnedDollarValue","symbol0","symbol1","lpTokenName","depositFeeBP","fee_icon","NaN","harvestInterval"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport ButtonCustom from \"../Button/Button\";\nimport { Button } from \"react-bootstrap\";\nimport \"./PlanetCard.scss\";\nimport RightArrow from \"../../assets/images/right-arrow.png\";\nimport DownArrow from \"../../assets/images/down-arrow.png\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ExchangeService } from \"../../services/ExchangeService\";\nimport {\n  MAIN_CONTRACT_LIST,\n  WETH,\n  ANCHOR_BUSD_LP,\n  TOKEN_LIST,\n  BNB_BUSD_LP,\n} from \"../../assets/tokens\";\nimport { ContractServices } from \"../../services/ContractServices\";\nimport { FarmService } from \"../../services/FarmService\";\nimport { BigNumber } from \"bignumber.js\";\nimport { toast } from \"../Toast/Toast\";\nimport { addTransaction, startLoading, stopLoading } from \"../../redux/actions\";\nimport { addCommas } from \"../../constant\";\nimport NIOB from \"../../assets/images/token_icons/NIOB.svg\";\n\nconst PlanetCard = (props) => {\n  const [classToggle, setClassToggle] = useState(false);\n\n  const dispatch = useDispatch();\n  const isUserConnected = useSelector((state) => state.persist.isUserConnected);\n  const {\n    farm: { poolInfo, userInfo, pid },\n    index,\n    currentIndex,\n    handleChange,\n    harvestOnClick,\n    stakeHandle,\n    handleRoiModal,\n    status,\n  } = props;\n\n  const [lpTokenDetails, setLpTokenDetails] = useState(null);\n  const [showIncrease, setShowIncrease] = useState(false);\n  const [totalSupply, setTotalSupply] = useState(0);\n  const [liquidity, setLiquidity] = useState(0);\n  const [worth, setWorth] = useState(0);\n  const [showApproveButton, setShowApproveButton] = useState(true);\n  const [approvalConfirmation, setApprovalConfirmation] = useState(false);\n  const [showHarvest, setShowHarvest] = useState(false);\n  const [balance, setBalance] = useState(0);\n  const [stakeAmounts, setStakeAmounts] = useState({ amount: 0, rewards: 0 });\n  const [apr, setApr] = useState(0);\n  const [roi, setROI] = useState({\n    allocPoint: 0,\n    totalAllcationPoint: 0,\n    anchorPerBlock: 0,\n    anchorPrice: 0,\n    liquidity: 0,\n    lpWorth: 0,\n  });\n  const [dollarValue, setAnchorDollarValue] = useState(0.01);\n\n  const getAnchorDollarValue = async () => {\n    if (poolInfo.lpToken != undefined) {\n      try {\n        let reserves = await ExchangeService.getReserves(ANCHOR_BUSD_LP);\n        // const token0 = await ExchangeService.getTokenZero(poolInfo.lpToken);\n        // const token1 = await ExchangeService.getTokenOne(poolInfo.lpToken);\n\n        // if ((token0.toLowerCase() === TOKEN_LIST[1].address.toLowerCase()) || (token1.toLowerCase() === TOKEN_LIST[1].address.toLowerCase())) {\n        //   reserves = await ExchangeService.getReserves(ANCHOR_BUSD_LP);\n        // } else {\n\n        //   //const pair = await ExchangeService.getPairFromPancakeFactory(poolInfo.lpToken);\n        //   reserves = await ExchangeService.getReserves(poolInfo.lpToken);\n        // }\n\n        let val = reserves[1] / reserves[0];\n        val = val || 0;\n        setAnchorDollarValue(val.toFixed(3));\n        return val.toFixed(3);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  };\n\n  const getDollarAPR = async (address) => {\n    try {\n      if (address.toLowerCase() === TOKEN_LIST[1].address.toLowerCase()) {\n        const reserves = await ExchangeService.getReserves(ANCHOR_BUSD_LP);\n        let val = reserves[1] / reserves[0];\n        val = val || 0;\n        setAnchorDollarValue(val.toFixed(3));\n        return val.toFixed(3);\n      } else if (\n        address.toLowerCase() === TOKEN_LIST[2].address.toLowerCase()\n      ) {\n        return 1;\n      } else if (address.toLowerCase() != TOKEN_LIST[2].address.toLowerCase()) {\n        const pair = await ExchangeService.getPairFromPancakeFactory(\n          address,\n          TOKEN_LIST[2].address\n        );\n        const reserves = await ExchangeService.getReserves(pair);\n        let val = reserves[1] / reserves[0];\n        val = val || 0;\n        setAnchorDollarValue(val.toFixed(3));\n        return val.toFixed(3);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const init = async () => {\n    if (poolInfo) {\n      // console.log(\"Pool Info:\", poolInfo);\n      const { lpToken } = poolInfo;\n      if (lpToken) {\n        const totalSupplyTemp = await ContractServices.getTotalSupply(lpToken);\n        setTotalSupply(totalSupplyTemp);\n        const liquidity = await handleLiquidity(lpToken);\n        setLiquidity(liquidity);\n        const tokenStaked = await ExchangeService.getTokenStaked(lpToken);\n        const lpWorth = liquidity / tokenStaked;\n        setWorth(lpWorth);\n        const lpTokenDetailsTemp = await FarmService.getLpTokenDetails(lpToken);\n        setLpTokenDetails(lpTokenDetailsTemp);\n\n        const a = await calculateAPR(\n          Number(poolInfo.allocPoint),\n          lpToken,\n          liquidity\n        );\n        lpTokenDetailsTemp.apr = a;\n        setApr(a);\n\n        if (isUserConnected) {\n          const allowance = await ContractServices.allowanceToken(\n            lpToken,\n            MAIN_CONTRACT_LIST.farm.address,\n            isUserConnected\n          );\n          let check = true;\n          if (\n            BigNumber(allowance).isGreaterThanOrEqualTo(BigNumber(2 * 255 - 1))\n          ) {\n            setShowApproveButton(false);\n            check = false;\n          }\n\n          let balance = await ContractServices.getTokenBalance(\n            poolInfo.lpToken,\n            isUserConnected\n          );\n          if (balance > 0.00001) {\n            balance -= 0.00001;\n          }\n          setBalance(balance);\n          const amount = userInfo.amount / 10 ** lpTokenDetailsTemp.decimals;\n          // const amount = Number(\n          //   (\n          //     Number(userInfo.amount) /\n          //     10 ** Number(lpTokenDetailsTemp.decimals)\n          //   )\n          // ).toFixed(18)\n\n          const rewards = Number(\n            Number(\n              (await FarmService.pendingPanther(pid, isUserConnected)) /\n                10 ** 18\n            ).toFixed(5)\n          );\n          if (!check && amount > 0) {\n            setShowIncrease(true);\n          }\n          setStakeAmounts({ amount, rewards });\n\n          //nextHarvest\n          const nextHarvestUntil = await FarmService.canHarvest(\n            pid,\n            isUserConnected\n          );\n          if (\n            !check &&\n            rewards > 0 &&\n            Number(userInfo.nextHarvestUntil) > 0 &&\n            nextHarvestUntil\n          ) {\n            setShowHarvest(true);\n          }\n        }\n      }\n    }\n  };\n  //call web3 approval function\n  const handleTokenApproval = async () => {\n    const acc = await ContractServices.getDefaultAccount();\n    if (acc && acc.toLowerCase() !== isUserConnected.toLowerCase()) {\n      return toast.error(\"Wallet address doesn`t match!\");\n    }\n    if (approvalConfirmation) {\n      return toast.info(\"Token approval is processing\");\n    }\n    // (2*256 - 1);\n    const value =\n      \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n\n    try {\n      dispatch(startLoading());\n      setApprovalConfirmation(true);\n      const r = await ContractServices.approveToken(\n        isUserConnected,\n        value,\n        MAIN_CONTRACT_LIST.farm.address,\n        poolInfo.lpToken\n      );\n      if (r) {\n        let data = {\n          message: `Approve LP Token`,\n          tx: r.transactionHash,\n        };\n        dispatch(addTransaction(data));\n        setApprovalConfirmation(false);\n        init();\n      }\n      dispatch(stopLoading());\n    } catch (err) {\n      setApprovalConfirmation(false);\n      dispatch(stopLoading());\n      toast.error(\"Approval Transaction Reverted!\");\n    }\n  };\n\n  const beforeStake = async (type) => {\n    if (isUserConnected) {\n      let bal = 0;\n      if (type === \"deposit\") {\n        bal = balance;\n      }\n      if (type === \"withdraw\") {\n        bal = stakeAmounts.amount;\n      }\n      stakeHandle({ pid, poolInfo, lpTokenDetails, balance: bal }, type);\n    } else {\n      return toast.error(\"Connect wallet first!\");\n    }\n  };\n\n  const calPrice = async (pairAddress) => {\n    let price = 0;\n\n    if (pairAddress == \"0x0000000000000000000000000000000000000000\") {\n      return 0;\n    }\n\n    // console.log(\"pairAddresspairAddress\", pairAddress);\n    const tokenZero = await ExchangeService.getTokenZero(pairAddress);\n    const tokenOne = await ExchangeService.getTokenOne(pairAddress);\n    const reserve = await ExchangeService.getReserves(pairAddress);\n    const decimalZero = await ContractServices.getDecimals(tokenZero);\n    const decimalOne = await ContractServices.getDecimals(tokenOne);\n\n    // console.log(tokenZero, TOKEN_LIST[2].address);\n\n    if (tokenZero.toLowerCase() === TOKEN_LIST[2]?.address.toLowerCase()) {\n      return (price =\n        (reserve[0] * 10 ** decimalOne) / (reserve[1] * 10 ** decimalZero));\n    }\n\n    if (tokenOne.toLowerCase() === TOKEN_LIST[2]?.address.toLowerCase()) {\n      return (price =\n        (reserve[1] * 10 ** decimalZero) / (reserve[0] * 10 ** decimalOne));\n    }\n\n    let priceBNBToUSD = await calPrice(BNB_BUSD_LP); //replace with BNB-USD pair\n    if (tokenZero.toLowerCase() === WETH.toLowerCase()) {\n      price =\n        (reserve[0] * 10 ** decimalOne) / (reserve[1] * 10 ** decimalZero);\n      return price * priceBNBToUSD;\n    }\n\n    if (tokenOne.toLowerCase() === WETH.toLowerCase()) {\n      price =\n        (reserve[1] * 10 ** decimalZero) / (reserve[0] * 10 ** decimalOne);\n      return price * priceBNBToUSD;\n    }\n  };\n\n  const calculateAPR = async (allocPoint, lpToken, lpWorth) => {\n    const anchorPrice = await calPrice(ANCHOR_BUSD_LP);\n    const totalAllcationPoint = Number(\n      await FarmService.totalAllocationPoint()\n    );\n    const anchorPerBlock = Number(await FarmService.pantherPerBlock());\n    //need to calculate usd price.\n    const liquidity = await handleLiquidity(lpToken);\n    // console.log(\"liquidity: \", liquidity);\n    if (liquidity != 0) {\n      const apr =\n        ((allocPoint / totalAllcationPoint) *\n          ((anchorPerBlock / 10 ** 18) * 28800 * 365 * 100 * anchorPrice)) /\n        liquidity;\n      setROI({\n        allocPoint,\n        totalAllcationPoint,\n        anchorPerBlock,\n        anchorPrice,\n        liquidity,\n        lpWorth,\n      });\n\n      return apr.toFixed(2);\n    }\n\n    return 0;\n  };\n  const handleLiquidity = async (pairAddress) => {\n    if (pairAddress != \"0x0000000000000000000000000000000000000000\") {\n      const tokenZero = await ExchangeService.getTokenZero(pairAddress);\n      const tokenOne = await ExchangeService.getTokenOne(pairAddress);\n      const reserve = await ExchangeService.getReserves(pairAddress);\n\n      const tokenZeroPairUSDT = await ExchangeService.getPair(\n        tokenZero,\n        TOKEN_LIST[2]?.address\n      );\n      const tokenOnePairUSDT = await ExchangeService.getPair(\n        tokenOne,\n        TOKEN_LIST[2]?.address\n      );\n\n      const tokenZeroPairBNB = await ExchangeService.getPair(tokenZero, WETH);\n      const tokenOnePairBNB = await ExchangeService.getPair(tokenOne, WETH);\n\n      const decimalZero = await ContractServices.getDecimals(tokenZero);\n      const decimalOne = await ContractServices.getDecimals(tokenOne);\n\n      let priceA = await getDollarAPR(tokenZero);\n      let priceB = await getDollarAPR(tokenOne);\n\n      // if (tokenZero.toLowerCase() == TOKEN_LIST[2].address.toLowerCase()) {\n      //   priceA = 1;\n      // } else if (tokenZero.toLowerCase() == WETH.toLowerCase()) {\n      //   //  priceA = await calPrice(BNB_BUSD_LP);\n      //   priceA = await getDollarAPR(tokenZero);\n      // }\n\n      // if (tokenOne.toLowerCase() == TOKEN_LIST[2].address.toLowerCase()) {\n      //   priceB = 1;\n      // } else if (tokenOne.toLowerCase() == WETH.toLowerCase()) {\n      //   //priceB = await calPrice(BNB_BUSD_LP);\n      //   priceB = await getDollarAPR(tokenOne);\n      // }\n\n      // if (priceA == 0) {\n      //   if (tokenZeroPairUSDT != \"0x0000000000000000000000000000000000000000\") {\n      //     // priceA = await calPrice(tokenZeroPairUSDT);\n      //     priceB = await getDollarAPR(tokenOne);\n      //   } else if (\n      //     tokenZeroPairBNB != \"0x0000000000000000000000000000000000000000\"\n      //   ) {\n      //     //  priceA = await calPrice(tokenZeroPairBNB);\n      //     priceA = await getDollarAPR(tokenZero);\n      //   } else {\n      //     priceA = 0;\n      //   }\n      // }\n\n      // if (priceB == 0) {\n      //   if (tokenOnePairUSDT != \"0x0000000000000000000000000000000000000000\") {\n      //     priceB = await getDollarAPR(tokenOne);\n      //   } else if (\n      //     tokenOnePairBNB != \"0x0000000000000000000000000000000000000000\"\n      //   ) {\n      //     priceB = await getDollarAPR(tokenOne);\n      //   } else {\n      //     priceB = 0;\n      //   }\n      // }\n\n      const totalSupply = await ExchangeService.getTotalSupply(pairAddress);\n      const tokenStaked = await ExchangeService.getTokenStaked(pairAddress);\n      console.log(\"PriceA:\", priceA);\n      console.log(\"PriceB:\", priceB);\n      console.log(\"reserve:\", reserve);\n      const liquidity =\n        (((reserve[0] / 10 ** decimalZero) * priceA +\n          (reserve[1] / 10 ** decimalOne) * priceB) /\n          totalSupply) *\n        tokenStaked;\n\n      return liquidity;\n    }\n    return 0;\n  };\n  const handleIcon = (symbol) => {\n    if (symbol != undefined) {\n      const tokenObj = TOKEN_LIST.find(\n        (d) => d.symbol.toLowerCase() === symbol.toLowerCase()\n      );\n      return tokenObj != undefined && tokenObj.icon;\n    }\n  };\n\n  const handleDefaultIcon = (symbol) => {\n    if (symbol != undefined) {\n      const tokenObj = TOKEN_LIST.find(\n        (d) => d.symbol.toLowerCase() === symbol.toLowerCase()\n      );\n      let index = tokenObj != undefined && tokenObj.icon.lastIndexOf(\"/\") + 1;\n      let filename = tokenObj != undefined && tokenObj.icon.substr(index);\n      return filename == \"default.60b90c93.svg\" ? \"farm-coin\" : \"\";\n    }\n  };\n  const earnedNiobValue = (dollarValue, rewards) => {\n    console.log(\"DOllar value:\", dollarValue);\n    let fixedAfterDecimal = Number(0.01 * rewards).toFixed(9);\n    let res = addCommas(fixedAfterDecimal);\n    return res;\n  };\n\n  const earnedDollarValue = (dollarValue, rewards) => {\n    let fixedAfterDecimal = Number(dollarValue * rewards).toFixed(9);\n    let res = addCommas(fixedAfterDecimal);\n    return res;\n  };\n  useEffect(async () => {\n    await getAnchorDollarValue();\n    init();\n    // console.log('userInfo.amount', userInfo.amount);\n  }, [isUserConnected]);\n\n  return (\n    <>\n      <Button\n        className={`planet_bar`}\n        onClick={() => setClassToggle(!classToggle)}\n      >\n        <div className=\"cions\">\n          <span className=\"coin_imgs uppr\">\n            <img\n              src={\n                handleIcon(lpTokenDetails?.symbol0)\n                  ? handleIcon(lpTokenDetails?.symbol0)\n                  : \"\"\n              }\n            />\n          </span>\n          <span className=\"coin_imgs dwn\">\n            <img\n              src={\n                handleIcon(lpTokenDetails?.symbol1)\n                  ? handleIcon(lpTokenDetails?.symbol1)\n                  : \"\"\n              }\n            />\n          </span>\n          <span className=\"coin_title\">{lpTokenDetails?.lpTokenName}</span>\n        </div>\n        {poolInfo.depositFeeBP && Number(poolInfo.depositFeeBP) === 0 && (\n          <div className=\"info_about_card_feeinfo\">\n            {\" \"}\n            <img src={props.fee_icon} alt=\"\" /> No Fee\n          </div>\n        )}\n        <div className=\"prcentx\">{poolInfo?.allocPoint}X</div>\n        <div className=\"coin_detail\">\n          {status && (\n            <div className=\"apr\">\n              <span>APR</span>\n              {/* <span className=\"token-icon\" onClick={() => handleRoiModal(roi, lpTokenDetails)}> */}\n              {/* <svg viewBox=\"0 0 25 24\" color=\"text\" width=\"20px\" xmlns=\"http://www.w3.org/2000/svg\" className=\"sc-bdfBwQ dhaIlc\"><path d=\"M19.2 3H5.19995C4.09995 3 3.19995 3.9 3.19995 5V19C3.19995 20.1 4.09995 21 5.19995 21H19.2C20.3 21 21.2 20.1 21.2 19V5C21.2 3.9 20.3 3 19.2 3ZM19.2 19H5.19995V5H19.2V19Z\" fill=\"#1FC7D4\"></path><path d=\"M11.45 7.72021H6.44995V9.22022H11.45V7.72021Z\" fill=\"#1FC7D4\"></path><path d=\"M18.2 15.75H13.2V17.25H18.2V15.75Z\" fill=\"#1FC7D4\"></path><path d=\"M18.2 13.25H13.2V14.75H18.2V13.25Z\" fill=\"#1FC7D4\"></path><path d=\"M8.19995 18H9.69995V16H11.7V14.5H9.69995V12.5H8.19995V14.5H6.19995V16H8.19995V18Z\" fill=\"#1FC7D4\"></path><path d=\"M14.29 10.95L15.7 9.54L17.11 10.95L18.17 9.89L16.76 8.47L18.17 7.06L17.11 6L15.7 7.41L14.29 6L13.23 7.06L14.64 8.47L13.23 9.89L14.29 10.95Z\" fill=\"#1FC7D4\"></path></svg></span> */}\n              <p>{addCommas(apr) === \"NaN\" || NaN ? 0 : addCommas(apr)}%</p>\n            </div>\n          )}\n          <div className=\"lqdty\">\n            <span>Liquidity</span>\n            <p>\n              $\n              {addCommas(Number(liquidity.toFixed(2))) === \"NaN\" || NaN\n                ? 0\n                : addCommas(Number(liquidity.toFixed(2)))}\n            </p>\n          </div>\n          <div className=\"erndniob\">\n            <span>Earned Niob</span>\n            <p>\n              {addCommas(stakeAmounts.rewards) === \"NaN\" || NaN\n                ? 0\n                : addCommas(stakeAmounts.rewards)}\n            </p>\n            <p>\n              ${\" \"}\n              {earnedNiobValue(dollarValue, stakeAmounts.rewards) === \"NaN\" ||\n              NaN\n                ? 0\n                : earnedNiobValue(dollarValue, stakeAmounts.rewards)}\n            </p>\n          </div>\n        </div>\n        <div className=\"dtl_btn\">\n          <p>\n            Details{\" \"}\n            <span>\n              <img src={DownArrow} />\n            </span>\n          </p>\n        </div>\n      </Button>\n      <div className={classToggle ? \"planet_strip\" : \"d-none\"}>\n        <div className=\"available_funds\">\n          <div className=\"funds\">\n            {isUserConnected ? (\n              <>\n                {showIncrease ? (\n                  <div className=\"cardFarm_increase\">\n                    <button\n                      type=\"button\"\n                      onClick={() => beforeStake(\"withdraw\")}\n                    >\n                      <span>-</span>\n                    </button>\n                    <button\n                      type=\"button\"\n                      onClick={() => beforeStake(\"deposit\")}\n                    >\n                      <span>+</span>\n                    </button>\n                  </div>\n                ) : (\n                  <>\n                    {showApproveButton ? (\n                      <Button\n                        className=\"funds_btn\"\n                        onClick={() => handleTokenApproval()}\n                      >\n                        Enable Farm\n                      </Button>\n                    ) : (\n                      <Button\n                        className=\"funds_btn\"\n                        onClick={() => beforeStake(\"deposit\")}\n                      >\n                        Stake\n                      </Button>\n                    )}\n                  </>\n                )}\n              </>\n            ) : (\n              <>\n                <Button\n                  onClick={() => toast.error(\"Connect to wallet first!\")}\n                  className=\"funds_btn\"\n                >\n                  Unlock Wallet\n                </Button>\n              </>\n            )}\n            <div className=\"count_funds\">\n              <span>Available LP</span>\n              <p>{balance} LP</p>\n              <span>LP Worth - </span>\n              <span>${addCommas(Number(worth.toFixed(2)))}</span>\n            </div>\n            <span className=\"forwd_arrow\">\n              <img src={RightArrow} alt={\"right-arrow\"} />\n            </span>\n          </div>\n          <div className=\"funds\">\n            {/* <Button disabled={!showApproveButton} onClick={() => handleTokenApproval()} className=\"funds_btn\">Enable Farm</Button> */}\n            <div className=\"count_funds\">\n              <span>{lpTokenDetails?.lpTokenName} STAKED</span>\n              {showIncrease ? (\n                <p> {addCommas(stakeAmounts.amount)}</p>\n              ) : (\n                <p>0</p>\n              )}\n              <span>\n                $\n                {earnedDollarValue(stakeAmounts.amount, worth) === \"NaN\" || NaN\n                  ? 0\n                  : earnedDollarValue(stakeAmounts.amount, worth)}\n              </span>\n            </div>{\" \"}\n            <span className=\"forwd_arrow\">\n              <img src={RightArrow} alt={\"right-arrow\"} />\n            </span>\n          </div>\n          <div className=\"funds\">\n            <Button\n              onClick={() => {\n                setShowHarvest(false);\n                harvestOnClick(pid, lpTokenDetails?.lpTokenName);\n              }}\n              disabled={!showHarvest}\n              className=\"funds_btn\"\n            >\n              Harvest\n            </Button>\n            <div className=\"count_funds\">\n              <span>Earned</span>\n              <p>\n                {addCommas(stakeAmounts.rewards) === \"NaN\" || NaN\n                  ? 0\n                  : addCommas(stakeAmounts.rewards)}{\" \"}\n                NIOB\n              </p>\n              <span>\n                $\n                {earnedDollarValue(dollarValue, stakeAmounts.rewards) ===\n                  \"NaN\" || NaN\n                  ? 0\n                  : earnedDollarValue(dollarValue, stakeAmounts.rewards)}\n              </span>\n            </div>\n          </div>\n          <div className=\"funds\">\n            <div className=\"count_funds\">\n              <span>\n                Deposit Fee :{\" \"}\n                {poolInfo.depositFeeBP\n                  ? (Number(poolInfo.depositFeeBP) / 10000) * 100\n                  : 0}\n                %\n              </span>\n              <span className=\"d-block\">\n                Harvest Interval:{\" \"}\n                {poolInfo.harvestInterval\n                  ? Number((poolInfo.harvestInterval / 3600).toFixed(2))\n                  : 0}{\" \"}\n                Hour(s)\n              </span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default PlanetCard;\n"]},"metadata":{},"sourceType":"module"}