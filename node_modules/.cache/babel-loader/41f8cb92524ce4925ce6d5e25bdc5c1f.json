{"ast":null,"code":"var _jsxFileName = \"/home/user/Desktop/nm/SaitaSwap/src/pages/PoolGalaxy/PoolGalaxy.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport Button from \"@restart/ui/esm/Button\";\nimport { Container, Col, Row, Form, InputGroup, FormControl, Tabs, Tab } from \"react-bootstrap\";\nimport Searchicon from \"../../assets/images/search.png\";\nimport PoolIcon from \"../../assets/images/Pool-Header-Logo.svg\";\nimport \"./PoolGalaxy.scss\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addTransaction, startLoading, stopLoading } from \"../../redux/actions\";\nimport { ReferralsServices } from \"../../services/ReferralsServices\";\nimport { FarmService } from \"../../services/FarmService\";\nimport { ContractServices } from \"../../services/ContractServices\";\nimport { ExchangeService } from \"../../services/ExchangeService\";\nimport { toast } from \"../../components/Toast/Toast\";\nimport BigNumber from \"bignumber.js\";\nimport GalaxyCard from \"../../components/GalaxyCard/GalaxyCard\";\nimport NIOB from \"../../assets/images/token_icons/NIOB.svg\";\nimport BUSD from \"../../assets/images/token_icons/BUSD-Token.svg\";\nimport GetLPToken from \"../../components/GetLPToken/GetLPToken\";\nimport WithDrawLPToken from \"../../components/GetLPToken/WithDrawLPToken\";\nimport TransactionalModal from \"../../components/TransactionalModal/TransactionalModal\";\nimport ReturnInvest from \"../../components/ReturnInvest/ReturnInvest\";\nimport { TOKEN_LIST, ANCHOR_BUSD_LP } from \"../../assets/tokens\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction PoolGalaxy(props) {\n  _s();\n\n  const {\n    match: {\n      params\n    },\n    history\n  } = props;\n  const {\n    tab\n  } = params; // const handleTab = (data) => {\n  //   history.push(`${rootName}/farmplanets/${data}`);\n  // };\n\n  const handleClose = () => {\n    setStakeValue(null);\n    setShowStake(false);\n  };\n\n  const handleWithdrawClose = () => {\n    setStakeValue(null);\n    setShowStakeWithdraw(false);\n  };\n\n  const dispatch = useDispatch();\n  const isUserConnected = useSelector(state => state.persist.isUserConnected);\n  const referralAddress = useSelector(state => state.persist.referralAddress);\n  const [checked, setChecked] = useState(false);\n  const [active, setActive] = useState(true);\n  const [currentIndex, setCurrentIndex] = useState(-1);\n  const [showStake, setShowStake] = useState(false);\n  const [showStakeWithdraw, setShowStakeWithdraw] = useState(false);\n  const [showAPY, setShowAPY] = useState(false);\n  const [roiModalData, setRoiModalData] = useState(null);\n  const [poolLength, setPoolLength] = useState(0);\n  const [farms, setFarms] = useState([]);\n  const [inactiveFarms, setInactiveFarms] = useState([]);\n  const [stakingOnly, setStakingOnly] = useState([]);\n  const [stakeData, setStakeData] = useState(null);\n  const [stakeValue, setStakeValue] = useState(0);\n  const [referrer, setReferrer] = useState('0x0000000000000000000000000000000000000000');\n  const [stakeConfirmation, setStakeConfimation] = useState(0);\n  const [showTransactionModal, setShowTransactionModal] = useState(false);\n  const [txHash, setTxHash] = useState('');\n  const [lpDetails, setLpTokenDetails] = useState(null);\n  const [niobStats, setNiobStats] = useState(null); //staking only\n\n  const handleChange = () => setChecked(!checked);\n\n  const closeTransactionModal = () => {\n    setShowTransactionModal(false);\n    setFarms([]);\n    setInactiveFarms([]);\n    setStakingOnly([]);\n    init();\n    window.location.reload();\n  };\n\n  const cloaseRoiModal = () => {\n    setShowAPY(false);\n  };\n\n  const handleRoiModal = (data, lpDetails, niobId) => {\n    // console.log(data, lpDetails);\n    setNiobStats(niobId);\n    setRoiModalData(data);\n    setLpTokenDetails(lpDetails);\n    setShowAPY(true);\n  };\n\n  const handleIndex = index => {\n    if (currentIndex === index) {\n      setCurrentIndex(-1);\n    } else {\n      setCurrentIndex(index);\n    }\n  };\n\n  const getValue = async address => {\n    if (address != undefined) {\n      try {\n        const reserves = await ExchangeService.getReserves(ANCHOR_BUSD_LP);\n        let val = reserves[1] / reserves[0];\n        val = val || 0;\n        return val.toFixed(3);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  }; //this will re-arrange locked pool to desired position\n\n\n  const getSortedPools = (array, from, to) => {\n    if (to === from) return array;\n    let target = array[from];\n    let increment = to < from ? -1 : 1;\n\n    for (let k = from; k != to; k += increment) {\n      array[k] = array[k + increment];\n    }\n\n    array[to] = target;\n    return array;\n  };\n\n  useEffect(() => {\n    init();\n    return () => {\n      setFarms([]);\n      setInactiveFarms([]);\n    };\n  }, [isUserConnected]);\n\n  const init = async () => {\n    try {\n      dispatch(startLoading());\n      let ref = await ReferralsServices.getReferrer(isUserConnected);\n\n      if (ref === '0x0000000000000000000000000000000000000000') {\n        if (referralAddress && referralAddress !== '0x0000000000000000000000000000000000000000') {\n          ref = referralAddress;\n        }\n\n        setReferrer(ref);\n      }\n\n      const pL = Number(await FarmService.poolLength()); // console.log('qq', pL);\n\n      setPoolLength(pL); // let farmsTemp = [];\n\n      dispatch(stopLoading());\n      let activePoolsToSort = [];\n      let stakingOnlyArrayToSort = [];\n\n      for (let i = 0; i < pL; i++) {\n        const poolInfo = await FarmService.poolInfo(i, '2');\n        const niobId = await FarmService.niobId();\n        const userInfo = await FarmService.userInfo(i, isUserConnected);\n        const dollarVal = await getValue(poolInfo.lpToken);\n\n        if (poolInfo) {\n          if (Number(poolInfo.allocPoint) === 0) {\n            setInactiveFarms(inactiveFarms => [...inactiveFarms, {\n              poolInfo,\n              userInfo,\n              pid: i,\n              isLocked: niobId == i ? true : false,\n              dollarVal\n            }]);\n          } else {\n            if (Number(userInfo.amount) > 0) {\n              // stakingOnlyArrayToSort.push({ poolInfo, userInfo, pid: i, niobId })\n              setStakingOnly(stakingOnly => [...stakingOnly, {\n                poolInfo,\n                userInfo,\n                pid: i,\n                isLocked: false,\n                dollarVal\n              }]);\n            } // activePoolsToSort.push({ poolInfo, userInfo, pid: i, niobId })\n\n\n            setFarms(farms => [...farms, {\n              poolInfo,\n              userInfo,\n              pid: i,\n              niobId,\n              isLocked: false,\n              dollarVal\n            }]);\n          }\n        }\n      } // // this x is the current postion of lockedNiobPool which we use to change it's position up to second later\n      // let lockedNiobIndex =  activePoolsToSort.findIndex(x => x.pid == x.niobId)\n      // // this will change position of lockedNiobPool to index 1\n      // let sortedAllPools = getSortedPools(activePoolsToSort, lockedNiobIndex, 1);\n      // //Now get unlocked niob pool details\n      // const unlockedNiobPool = sortedAllPools.find(pool => pool.pid == '6');\n      // // again get index of lockedNiobPool\n      // let newlockedNiobIndex =  sortedAllPools.findIndex(x => x.pid == x.niobId)\n      // //firstly lets fix realAllocPoint of lockedNiobPool \n      // let realAllocPointOfLockedPool = sortedAllPools[newlockedNiobIndex].poolInfo.allocPoint; \n      // //Now attach unlockedNiob pool's allocPoint to lockedNiobPool\n      // sortedAllPools[newlockedNiobIndex].poolInfo.allocPoint = unlockedNiobPool.poolInfo.allocPoint; \n      // sortedAllPools[newlockedNiobIndex].poolInfo.displayAllocPoint = realAllocPointOfLockedPool; \n      // // these are the total (also active) farms\n      // // setFarms(sortedAllPools);\n      // // these are the staked pools\n      // let lockedNiobIndexStakedOnly =  stakingOnlyArrayToSort.findIndex(x => x.pid == x.niobId);\n      // // this will change position of lockedNiobPool to index 1\n      // // check if user has staked locked pool, if yes only then sort the pools\n      // let sortedStakingOnlyPools;\n      // if (lockedNiobIndexStakedOnly !== -1 && stakingOnlyArrayToSort.length > 1) {\n      //      sortedStakingOnlyPools = getSortedPools(stakingOnlyArrayToSort, lockedNiobIndexStakedOnly, 1);\n      //     //  setStakingOnly(sortedStakingOnlyPools);\n      // }\n      // // else set the stakingOnly array as it is\n      // else {\n      //   // setStakingOnly(stakingOnlyArrayToSort);\n      // }\n      // these are the inactive pools\n\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const closeStakeModal = () => {\n    setShowStakeWithdraw(false);\n    setShowStake(false);\n    setStakeData(null);\n    setStakeValue(0);\n  };\n\n  const handleROIModal = () => {\n    setShowStakeWithdraw(false);\n    setShowStake(false);\n    setStakeData(null);\n    setStakeValue(0);\n  };\n\n  const stakeHandle = (data, type) => {\n    if (type === 'withdraw') {\n      setStakeData(data);\n      setShowStakeWithdraw(true);\n    }\n\n    if (type === 'deposit') {\n      setStakeData(data);\n      setShowStake(true);\n    }\n  };\n\n  const handleStakeValue = e => {\n    const value = e.target.value;\n    setStakeValue(value);\n  };\n\n  const setMaxValue = () => setStakeValue(stakeData.balance);\n\n  const harvest = async (pid, lpTokenName) => {\n    const acc = await ContractServices.getDefaultAccount();\n\n    if (acc && acc.toLowerCase() !== isUserConnected.toLowerCase()) {\n      return toast.error('Wallet address doesn`t match!');\n    }\n\n    if (stakeConfirmation) {\n      return toast.info('Transaction is processing!');\n    }\n\n    setStakeConfimation(true);\n    const data = {\n      pid: pid.toString(),\n      amount: 0,\n      referrer: referrer,\n      from: isUserConnected\n    };\n\n    try {\n      dispatch(startLoading());\n      const result = await FarmService.deposit(data);\n      dispatch(stopLoading());\n      setStakeConfimation(false);\n\n      if (result) {\n        setTxHash(result);\n        setShowTransactionModal(true);\n        const data = {\n          message: `Harvest ${lpTokenName}`,\n          tx: result\n        };\n        dispatch(addTransaction(data));\n      }\n    } catch (err) {\n      console.log(err, 'lp harvest');\n      dispatch(stopLoading());\n      setStakeConfimation(false);\n      const message = await ContractServices.web3ErrorHandle(err);\n      toast.error(message);\n    }\n  };\n\n  const depositWithdraw = async (type, isLocked) => {\n    const acc = await ContractServices.getDefaultAccount();\n\n    if (acc && acc.toLowerCase() !== isUserConnected.toLowerCase()) {\n      return toast.error('Wallet address doesn`t match!');\n    }\n\n    const value = Number(stakeValue);\n\n    if (isNaN(value)) {\n      return toast.error('Enter vaild amount!');\n    }\n\n    if (value <= 0) {\n      return toast.error('Enter amount greater than zero!');\n    }\n\n    if (value > stakeData.balance) {\n      return toast.error('Value is greater than max value!');\n    }\n\n    if (!stakeData) {\n      return toast.info('Reload page try again!');\n    }\n\n    if (stakeConfirmation) {\n      return toast.info('Transaction is processing!');\n    }\n\n    setStakeConfimation(true);\n\n    if (type === 'deposit') {\n      const amount = BigNumber(value * 10 ** stakeData.lpTokenDetails.decimals).toFixed(); // const deposit = '10000';\n\n      const data = {\n        pid: stakeData.pid.toString(),\n        amount,\n        referrer: referrer,\n        from: isUserConnected\n      }; // console.log(data, 'before deposit----------farm--------------');\n\n      try {\n        closeStakeModal();\n        dispatch(startLoading());\n        const result = await FarmService.deposit(data);\n        dispatch(stopLoading());\n        setStakeConfimation(false);\n\n        if (result) {\n          setTxHash(result);\n          setShowTransactionModal(true);\n          const data = {\n            message: `Deposit ${stakeData.lpTokenDetails.lpTokenName}`,\n            tx: result\n          };\n          dispatch(addTransaction(data));\n        }\n      } catch (err) {\n        console.log(err, 'lp deposit');\n        dispatch(stopLoading());\n        setStakeConfimation(false);\n        const message = await ContractServices.web3ErrorHandle(err);\n        toast.error(message);\n      }\n    }\n\n    if (type === 'withdraw') {\n      const amount = BigNumber(value * 10 ** stakeData.lpTokenDetails.decimals).toFixed();\n      const data = {\n        pid: stakeData.pid.toString(),\n        amount,\n        from: isUserConnected\n      }; // console.log(data, 'before withdraw----------farm--------------');\n\n      try {\n        closeStakeModal();\n        dispatch(startLoading());\n        let result;\n\n        if (isLocked) {\n          console.log('zzz', data);\n          result = await FarmService.withdrawNiob(data);\n        } else {\n          result = await FarmService.withdraw(data);\n        }\n\n        dispatch(stopLoading());\n        setStakeConfimation(false);\n\n        if (result) {\n          setTxHash(result);\n          setShowTransactionModal(true);\n          const data = {\n            message: `Withdraw ${stakeData.lpTokenDetails.lpTokenName}`,\n            tx: result\n          };\n          dispatch(addTransaction(data));\n        }\n      } catch (err) {\n        console.log(err, 'lp withdraw');\n        dispatch(stopLoading());\n        setStakeConfimation(false);\n        const message = await ContractServices.web3ErrorHandle(err);\n        toast.error(message);\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container_wrap farmpln poolGalaxy_cont\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"upper_text\",\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        children: /*#__PURE__*/_jsxDEV(Row, {\n          children: /*#__PURE__*/_jsxDEV(Col, {\n            xl: 6,\n            className: \"pl-0\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"farm_title\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"farm_icon\",\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: PoolIcon\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 398,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 397,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"desc\",\n                children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n                  className: \"title_hd\",\n                  children: \"Pool Galaxy\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 401,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: \"Stake NIOB to earn new tokens. You can unstake at any time! Rewards are calculated per block.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 402,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 400,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 396,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 395,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 394,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 392,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"farm_srchbar\",\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"contain_area\",\n          children: [/*#__PURE__*/_jsxDEV(Form, {\n            className: \"srchbar_area\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"serch_field\",\n              children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                children: \"Search\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 417,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(InputGroup, {\n                children: [/*#__PURE__*/_jsxDEV(FormControl, {\n                  id: \"search\",\n                  placeholder: \"Niob\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 419,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  className: \"search_btn\",\n                  children: /*#__PURE__*/_jsxDEV(\"img\", {\n                    src: Searchicon\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 421,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 420,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 418,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 416,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"staked_only\",\n              children: [/*#__PURE__*/_jsxDEV(Form.Check, {\n                type: \"checkbox\",\n                id: \"stakecheck\",\n                label: \"Staked only\",\n                checked: checked,\n                onChange: handleChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 426,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                className: \"btn harvest_btn\",\n                children: \"Harvest all\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 433,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 425,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 415,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"frm_plnet_list\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"farm_tabs\",\n              children: /*#__PURE__*/_jsxDEV(Tabs, {\n                activeKey: tab,\n                id: \"frmplanet_tab\",\n                variant: \"pills\" //   onSelect={handleTab}\n                ,\n                children: [/*#__PURE__*/_jsxDEV(Tab, {\n                  eventKey: \"active\",\n                  title: \"Active\",\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"planet_list active\",\n                    children: /*#__PURE__*/_jsxDEV(Row, {\n                      children: /*#__PURE__*/_jsxDEV(Col, {\n                        xl: 12,\n                        children: [checked && /*#__PURE__*/_jsxDEV(\"div\", {\n                          className: \"planet_list_view\",\n                          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                            className: \"headingStyle\",\n                            children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n                              children: \"Token\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 452,\n                              columnNumber: 33\n                            }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n                              children: \"APR\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 453,\n                              columnNumber: 33\n                            }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n                              children: \"Total Staked\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 454,\n                              columnNumber: 33\n                            }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n                              className: \"earnTxt\",\n                              children: \"Earned\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 455,\n                              columnNumber: 33\n                            }, this)]\n                          }, void 0, true, {\n                            fileName: _jsxFileName,\n                            lineNumber: 451,\n                            columnNumber: 31\n                          }, this), stakingOnly.map((farm, index) => /*#__PURE__*/_jsxDEV(GalaxyCard, {\n                            index: index,\n                            harvestOnClick: harvest,\n                            currentIndex: currentIndex,\n                            handleChange: () => handleIndex(index),\n                            stakeHandle: stakeHandle,\n                            handleRoiModal: handleRoiModal,\n                            status: true,\n                            farm: farm,\n                            icon1: NIOB,\n                            icon2: BUSD,\n                            title: `NIOB`,\n                            title1: `BUSD`\n                          }, index, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 458,\n                            columnNumber: 33\n                          }, this))]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 450,\n                          columnNumber: 29\n                        }, this), !checked && /*#__PURE__*/_jsxDEV(\"div\", {\n                          className: \"planet_list_view\",\n                          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                            className: \"headingStyle\",\n                            children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n                              children: \"Token\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 479,\n                              columnNumber: 33\n                            }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n                              children: \"APR\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 480,\n                              columnNumber: 33\n                            }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n                              children: \"Total Staked\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 481,\n                              columnNumber: 33\n                            }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n                              className: \"earnTxt\",\n                              children: \"Earned\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 482,\n                              columnNumber: 33\n                            }, this)]\n                          }, void 0, true, {\n                            fileName: _jsxFileName,\n                            lineNumber: 478,\n                            columnNumber: 31\n                          }, this), farms.map((farm, index) => /*#__PURE__*/_jsxDEV(GalaxyCard, {\n                            index: index,\n                            harvestOnClick: harvest,\n                            currentIndex: currentIndex,\n                            handleChange: () => handleIndex(index),\n                            stakeHandle: stakeHandle,\n                            handleRoiModal: handleRoiModal,\n                            status: true,\n                            farm: farm,\n                            icon1: NIOB,\n                            icon2: BUSD,\n                            title: `NIOB`,\n                            title1: `BUSD`\n                          }, index, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 485,\n                            columnNumber: 33\n                          }, this))]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 477,\n                          columnNumber: 29\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 448,\n                        columnNumber: 25\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 447,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 446,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 445,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Tab, {\n                  eventKey: \"inactive\",\n                  title: \"Inactive\",\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"planet_list active\",\n                    children: /*#__PURE__*/_jsxDEV(Row, {\n                      children: /*#__PURE__*/_jsxDEV(Col, {\n                        xl: 12,\n                        children: /*#__PURE__*/_jsxDEV(\"div\", {\n                          className: \"planet_list_view\",\n                          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                            className: \"headingStyle\",\n                            children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n                              children: \"Token\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 514,\n                              columnNumber: 31\n                            }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n                              children: \"APR\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 515,\n                              columnNumber: 31\n                            }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n                              children: \"Total Staked\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 516,\n                              columnNumber: 31\n                            }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n                              className: \"earnTxt\",\n                              children: \"Earned\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 517,\n                              columnNumber: 31\n                            }, this)]\n                          }, void 0, true, {\n                            fileName: _jsxFileName,\n                            lineNumber: 513,\n                            columnNumber: 29\n                          }, this), inactiveFarms.map((farm, index) => /*#__PURE__*/_jsxDEV(GalaxyCard, {\n                            index: index,\n                            harvestOnClick: harvest,\n                            currentIndex: currentIndex,\n                            handleChange: () => handleIndex(index),\n                            stakeHandle: stakeHandle,\n                            handleRoiModal: handleRoiModal,\n                            status: false,\n                            farm: farm,\n                            icon1: NIOB,\n                            icon2: BUSD,\n                            title: `NIOB`,\n                            title1: `BUSD`\n                          }, index, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 520,\n                            columnNumber: 31\n                          }, this))]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 512,\n                          columnNumber: 27\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 511,\n                        columnNumber: 25\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 510,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 509,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 508,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 438,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 437,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 436,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 412,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GetLPToken, {\n      stakeValue: stakeValue,\n      stakeData: stakeData,\n      stakeConfirmation: stakeConfirmation,\n      handleStakeValue: handleStakeValue,\n      depositWithdraw: depositWithdraw,\n      setMaxValue: setMaxValue,\n      show: showStake,\n      closeStakeModal: handleClose\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 548,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(WithDrawLPToken, {\n      stakeValue: stakeValue,\n      stakeData: stakeData,\n      stakeConfirmation: stakeConfirmation,\n      handleStakeValue: handleStakeValue,\n      depositWithdraw: depositWithdraw,\n      setMaxValue: setMaxValue,\n      show: showStakeWithdraw,\n      closeStakeModal: handleWithdrawClose,\n      address: isUserConnected,\n      isNiobWithdrawabe: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 549,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TransactionalModal, {\n      show: showTransactionModal,\n      handleClose: closeTransactionModal,\n      txHash: txHash\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 550,\n      columnNumber: 7\n    }, this), showAPY && /*#__PURE__*/_jsxDEV(ReturnInvest, {\n      show: showAPY,\n      niobId: niobStats,\n      roiModalData: roiModalData,\n      lpDetails: lpDetails,\n      handleClose: cloaseRoiModal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 551,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 391,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PoolGalaxy, \"QoDmmHbG0tZP45GY+rtZoi3jd3c=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = PoolGalaxy;\nexport default PoolGalaxy;\n\nvar _c;\n\n$RefreshReg$(_c, \"PoolGalaxy\");","map":{"version":3,"sources":["/home/user/Desktop/nm/SaitaSwap/src/pages/PoolGalaxy/PoolGalaxy.js"],"names":["React","useEffect","useState","Button","Container","Col","Row","Form","InputGroup","FormControl","Tabs","Tab","Searchicon","useDispatch","useSelector","addTransaction","startLoading","stopLoading","ReferralsServices","FarmService","ContractServices","ExchangeService","toast","BigNumber","GalaxyCard","GetLPToken","WithDrawLPToken","TransactionalModal","ReturnInvest","TOKEN_LIST","ANCHOR_BUSD_LP","PoolGalaxy","props","match","params","history","tab","handleClose","setStakeValue","setShowStake","handleWithdrawClose","setShowStakeWithdraw","dispatch","isUserConnected","state","persist","referralAddress","checked","setChecked","active","setActive","currentIndex","setCurrentIndex","showStake","showStakeWithdraw","showAPY","setShowAPY","roiModalData","setRoiModalData","poolLength","setPoolLength","farms","setFarms","inactiveFarms","setInactiveFarms","stakingOnly","setStakingOnly","stakeData","setStakeData","stakeValue","referrer","setReferrer","stakeConfirmation","setStakeConfimation","showTransactionModal","setShowTransactionModal","txHash","setTxHash","lpDetails","setLpTokenDetails","niobStats","setNiobStats","handleChange","closeTransactionModal","init","window","location","reload","cloaseRoiModal","handleRoiModal","data","niobId","handleIndex","index","getValue","address","undefined","reserves","getReserves","val","toFixed","error","console","log","getSortedPools","array","from","to","target","increment","k","ref","getReferrer","pL","Number","activePoolsToSort","stakingOnlyArrayToSort","i","poolInfo","userInfo","dollarVal","lpToken","allocPoint","pid","isLocked","amount","err","closeStakeModal","handleROIModal","stakeHandle","type","handleStakeValue","e","value","setMaxValue","balance","harvest","lpTokenName","acc","getDefaultAccount","toLowerCase","info","toString","result","deposit","message","tx","web3ErrorHandle","depositWithdraw","isNaN","lpTokenDetails","decimals","withdrawNiob","withdraw","PoolIcon","map","farm","NIOB","BUSD"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Button from \"@restart/ui/esm/Button\";\nimport {\n  Container,\n  Col,\n  Row,\n  Form,\n  InputGroup,\n  FormControl,\n  Tabs,\n  Tab,\n} from \"react-bootstrap\";\nimport Searchicon from \"../../assets/images/search.png\";\nimport PoolIcon from \"../../assets/images/Pool-Header-Logo.svg\";\nimport \"./PoolGalaxy.scss\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addTransaction, startLoading, stopLoading } from \"../../redux/actions\";\nimport { ReferralsServices } from \"../../services/ReferralsServices\";\nimport { FarmService } from \"../../services/FarmService\";\nimport { ContractServices } from \"../../services/ContractServices\";\nimport { ExchangeService } from \"../../services/ExchangeService\";\nimport { toast } from \"../../components/Toast/Toast\";\nimport BigNumber from \"bignumber.js\";\nimport GalaxyCard from \"../../components/GalaxyCard/GalaxyCard\";\nimport NIOB from \"../../assets/images/token_icons/NIOB.svg\";\nimport BUSD from \"../../assets/images/token_icons/BUSD-Token.svg\";\nimport GetLPToken from \"../../components/GetLPToken/GetLPToken\";\nimport WithDrawLPToken from \"../../components/GetLPToken/WithDrawLPToken\";\nimport TransactionalModal from \"../../components/TransactionalModal/TransactionalModal\";\nimport ReturnInvest from \"../../components/ReturnInvest/ReturnInvest\"\nimport { TOKEN_LIST, ANCHOR_BUSD_LP } from \"../../assets/tokens\";\n\nfunction PoolGalaxy(props) {\n  const {\n    match: { params },\n    history,\n  } = props;\n  const { tab } = params;\n  // const handleTab = (data) => {\n  //   history.push(`${rootName}/farmplanets/${data}`);\n  // };\n\n  const handleClose = () => { setStakeValue(null); setShowStake(false) };\n  const handleWithdrawClose = () => { setStakeValue(null); setShowStakeWithdraw(false) };\n\n  const dispatch = useDispatch();\n  const isUserConnected = useSelector(state => state.persist.isUserConnected);\n  const referralAddress = useSelector(state => state.persist.referralAddress);\n\n  const [checked, setChecked] = useState(false);\n  const [active, setActive] = useState(true);\n  const [currentIndex, setCurrentIndex] = useState(-1);\n  const [showStake, setShowStake] = useState(false);\n  const [showStakeWithdraw, setShowStakeWithdraw] = useState(false);\n  const [showAPY, setShowAPY] = useState(false);\n  const [roiModalData, setRoiModalData] = useState(null);\n\n  const [poolLength, setPoolLength] = useState(0);\n  const [farms, setFarms] = useState([]);\n  const [inactiveFarms, setInactiveFarms] = useState([]);\n  const [stakingOnly, setStakingOnly] = useState([]);\n  const [stakeData, setStakeData] = useState(null);\n  const [stakeValue, setStakeValue] = useState(0);\n  const [referrer, setReferrer] = useState('0x0000000000000000000000000000000000000000');\n\n  const [stakeConfirmation, setStakeConfimation] = useState(0);\n  const [showTransactionModal, setShowTransactionModal] = useState(false);\n  const [txHash, setTxHash] = useState('');\n  const [lpDetails, setLpTokenDetails] = useState(null);\n  const [niobStats, setNiobStats] = useState(null);\n\n\n  //staking only\n  const handleChange = () => setChecked(!checked);\n\n  const closeTransactionModal = () => {\n    setShowTransactionModal(false);\n    setFarms([]);\n    setInactiveFarms([]);\n    setStakingOnly([]);\n    init();\n    window.location.reload();\n  }\n\n  const cloaseRoiModal = () => {\n    setShowAPY(false);\n  }\n  const handleRoiModal = (data, lpDetails, niobId) => {\n    // console.log(data, lpDetails);\n    setNiobStats(niobId);\n    setRoiModalData(data);\n    setLpTokenDetails(lpDetails);\n    setShowAPY(true);\n  }\n\n  const handleIndex = (index) => {\n    if (currentIndex === index) {\n      setCurrentIndex(-1);\n    } else {\n      setCurrentIndex(index);\n    }\n  };\n\n\n  const getValue = async (address) => {\n    if (address != undefined) {\n      try {\n        const reserves = await ExchangeService.getReserves(ANCHOR_BUSD_LP);\n        let val = reserves[1] / reserves[0];\n        val = val || 0;\n        return (val.toFixed(3));\n\n      } catch (error) {\n        console.log(error)\n      }\n    }\n\n  }\n\n\n  //this will re-arrange locked pool to desired position\n  const getSortedPools = (array, from, to) => {\n    if (to === from) return array;\n\n    let target = array[from];\n    let increment = to < from ? -1 : 1;\n\n    for (let k = from; k != to; k += increment) {\n      array[k] = array[k + increment];\n    }\n    array[to] = target;\n    return array;\n  }\n\n  useEffect(() => {\n    init();\n    return () => {\n      setFarms([]);\n      setInactiveFarms([]);\n    }\n  }, [isUserConnected]);\n\n  const init = async () => {\n    try {\n      dispatch(startLoading());\n      let ref = await ReferralsServices.getReferrer(isUserConnected);\n      if (ref === '0x0000000000000000000000000000000000000000') {\n        if (referralAddress && referralAddress !== '0x0000000000000000000000000000000000000000') {\n          ref = referralAddress;\n        }\n        setReferrer(ref);\n      }\n      const pL = Number(await FarmService.poolLength());\n      // console.log('qq', pL);\n      setPoolLength(pL);\n      // let farmsTemp = [];\n      dispatch(stopLoading());\n      let activePoolsToSort = [];\n      let stakingOnlyArrayToSort = [];\n      for (let i = 0; i < pL; i++) {\n\n        const poolInfo = await FarmService.poolInfo(i, '2');\n        const niobId = await FarmService.niobId();\n        const userInfo = await FarmService.userInfo(i, isUserConnected);\n        const dollarVal = await getValue(poolInfo.lpToken);\n        if (poolInfo) {\n          if (Number(poolInfo.allocPoint) === 0) {\n            setInactiveFarms(inactiveFarms => [...inactiveFarms, { poolInfo, userInfo, pid: i, isLocked: niobId == i ? true : false, dollarVal }]);\n          } else {\n            if (Number(userInfo.amount) > 0) {\n              // stakingOnlyArrayToSort.push({ poolInfo, userInfo, pid: i, niobId })\n              setStakingOnly(stakingOnly => [...stakingOnly, { poolInfo, userInfo, pid: i, isLocked: false, dollarVal }]);\n            }\n            // activePoolsToSort.push({ poolInfo, userInfo, pid: i, niobId })\n            setFarms(farms => [...farms, { poolInfo, userInfo, pid: i, niobId, isLocked: false, dollarVal }]);\n          }\n        }\n      }\n\n      // // this x is the current postion of lockedNiobPool which we use to change it's position up to second later\n      // let lockedNiobIndex =  activePoolsToSort.findIndex(x => x.pid == x.niobId)\n      // // this will change position of lockedNiobPool to index 1\n      // let sortedAllPools = getSortedPools(activePoolsToSort, lockedNiobIndex, 1);\n      // //Now get unlocked niob pool details\n      // const unlockedNiobPool = sortedAllPools.find(pool => pool.pid == '6');\n      // // again get index of lockedNiobPool\n      // let newlockedNiobIndex =  sortedAllPools.findIndex(x => x.pid == x.niobId)\n      // //firstly lets fix realAllocPoint of lockedNiobPool \n      // let realAllocPointOfLockedPool = sortedAllPools[newlockedNiobIndex].poolInfo.allocPoint; \n\n      // //Now attach unlockedNiob pool's allocPoint to lockedNiobPool\n      // sortedAllPools[newlockedNiobIndex].poolInfo.allocPoint = unlockedNiobPool.poolInfo.allocPoint; \n      // sortedAllPools[newlockedNiobIndex].poolInfo.displayAllocPoint = realAllocPointOfLockedPool; \n      // // these are the total (also active) farms\n      // // setFarms(sortedAllPools);\n\n      // // these are the staked pools\n      // let lockedNiobIndexStakedOnly =  stakingOnlyArrayToSort.findIndex(x => x.pid == x.niobId);\n      // // this will change position of lockedNiobPool to index 1\n      // // check if user has staked locked pool, if yes only then sort the pools\n      // let sortedStakingOnlyPools;\n      // if (lockedNiobIndexStakedOnly !== -1 && stakingOnlyArrayToSort.length > 1) {\n      //      sortedStakingOnlyPools = getSortedPools(stakingOnlyArrayToSort, lockedNiobIndexStakedOnly, 1);\n      //     //  setStakingOnly(sortedStakingOnlyPools);\n      // }\n      // // else set the stakingOnly array as it is\n      // else {\n      //   // setStakingOnly(stakingOnlyArrayToSort);\n      // }\n\n      // these are the inactive pools\n\n    } catch (err) {\n      console.log(err)\n    }\n  };\n  const closeStakeModal = () => {\n    setShowStakeWithdraw(false);\n    setShowStake(false);\n    setStakeData(null);\n    setStakeValue(0);\n  }\n  const handleROIModal = () => {\n    setShowStakeWithdraw(false);\n    setShowStake(false);\n    setStakeData(null);\n    setStakeValue(0);\n  }\n  const stakeHandle = (data, type) => {\n    if (type === 'withdraw') {\n      setStakeData(data);\n      setShowStakeWithdraw(true);\n    }\n    if (type === 'deposit') {\n      setStakeData(data);\n      setShowStake(true);\n    }\n  }\n\n  const handleStakeValue = e => {\n    const value = e.target.value;\n    setStakeValue(value);\n  }\n  const setMaxValue = () => setStakeValue(stakeData.balance);\n\n  const harvest = async (pid, lpTokenName) => {\n    const acc = await ContractServices.getDefaultAccount();\n    if (acc && acc.toLowerCase() !== isUserConnected.toLowerCase()) {\n      return toast.error('Wallet address doesn`t match!');\n    }\n\n    if (stakeConfirmation) {\n      return toast.info('Transaction is processing!');\n    }\n    setStakeConfimation(true);\n    const data = {\n      pid: pid.toString(),\n      amount: 0,\n      referrer: referrer,\n      from: isUserConnected\n    }\n    try {\n      dispatch(startLoading());\n      const result = await FarmService.deposit(data);\n      dispatch(stopLoading());\n      setStakeConfimation(false);\n\n      if (result) {\n        setTxHash(result);\n        setShowTransactionModal(true);\n\n        const data = {\n          message: `Harvest ${lpTokenName}`,\n          tx: result\n        };\n        dispatch(addTransaction(data));\n      }\n    } catch (err) {\n      console.log(err, 'lp harvest');\n      dispatch(stopLoading());\n      setStakeConfimation(false);\n\n      const message = await ContractServices.web3ErrorHandle(err);\n      toast.error(message);\n    }\n  }\n\n  const depositWithdraw = async (type, isLocked) => {\n    const acc = await ContractServices.getDefaultAccount();\n    if (acc && acc.toLowerCase() !== isUserConnected.toLowerCase()) {\n      return toast.error('Wallet address doesn`t match!');\n    }\n    const value = Number(stakeValue);\n    if (isNaN(value)) {\n      return toast.error('Enter vaild amount!');\n    }\n    if (value <= 0) {\n      return toast.error('Enter amount greater than zero!');\n    }\n    if (value > stakeData.balance) {\n      return toast.error('Value is greater than max value!');\n    }\n    if (!stakeData) {\n      return toast.info('Reload page try again!');\n    }\n    if (stakeConfirmation) {\n      return toast.info('Transaction is processing!');\n    }\n    setStakeConfimation(true);\n    if (type === 'deposit') {\n      const amount = BigNumber(value * 10 ** stakeData.lpTokenDetails.decimals).toFixed();\n      // const deposit = '10000';\n\n      const data = {\n        pid: stakeData.pid.toString(),\n        amount,\n        referrer: referrer,\n        from: isUserConnected,\n      }\n      // console.log(data, 'before deposit----------farm--------------');\n      try {\n        closeStakeModal();\n        dispatch(startLoading());\n        const result = await FarmService.deposit(data);\n        dispatch(stopLoading());\n        setStakeConfimation(false);\n\n        if (result) {\n          setTxHash(result);\n          setShowTransactionModal(true);\n\n          const data = {\n            message: `Deposit ${stakeData.lpTokenDetails.lpTokenName}`,\n            tx: result\n          };\n          dispatch(addTransaction(data));\n        }\n      } catch (err) {\n        console.log(err, 'lp deposit');\n        dispatch(stopLoading());\n        setStakeConfimation(false);\n\n        const message = await ContractServices.web3ErrorHandle(err);\n        toast.error(message);\n      }\n    }\n    if (type === 'withdraw') {\n      const amount = BigNumber(value * 10 ** stakeData.lpTokenDetails.decimals).toFixed();\n\n      const data = {\n        pid: stakeData.pid.toString(),\n        amount,\n        from: isUserConnected\n      }\n      // console.log(data, 'before withdraw----------farm--------------');\n      try {\n        closeStakeModal();\n        dispatch(startLoading());\n        let result;\n        if (isLocked) {\n          console.log('zzz', data);\n          result = await FarmService.withdrawNiob(data);\n        } else {\n          result = await FarmService.withdraw(data);\n        }\n        dispatch(stopLoading());\n        setStakeConfimation(false);\n\n        if (result) {\n          setTxHash(result);\n          setShowTransactionModal(true);\n\n          const data = {\n            message: `Withdraw ${stakeData.lpTokenDetails.lpTokenName}`,\n            tx: result\n          };\n          dispatch(addTransaction(data));\n        }\n      } catch (err) {\n        console.log(err, 'lp withdraw');\n        dispatch(stopLoading());\n        setStakeConfimation(false);\n\n        const message = await ContractServices.web3ErrorHandle(err);\n        toast.error(message);\n\n      }\n    }\n  }\n  return (\n    <div className=\"container_wrap farmpln poolGalaxy_cont\">\n      <div className=\"upper_text\">\n        <Container>\n          <Row>\n            <Col xl={6} className=\"pl-0\">\n              <div className=\"farm_title\">\n                <div className=\"farm_icon\">\n                  <img src={PoolIcon} />\n                </div>\n                <div className=\"desc\">\n                  <h1 className=\"title_hd\">Pool Galaxy</h1>\n                  <p>\n                    Stake NIOB to earn new tokens. You can unstake at any time!\n                    Rewards are calculated per block.\n                  </p>\n                </div>\n              </div>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n      <div className=\"farm_srchbar\">\n        <Container>\n          <div className=\"contain_area\">\n            <Form className=\"srchbar_area\">\n              <div className=\"serch_field\">\n                <Form.Label>Search</Form.Label>\n                <InputGroup>\n                  <FormControl id=\"search\" placeholder=\"Niob\" />\n                  <Button className=\"search_btn\">\n                    <img src={Searchicon} />\n                  </Button>\n                </InputGroup>\n              </div>\n              <div className=\"staked_only\">\n                <Form.Check\n                  type=\"checkbox\"\n                  id=\"stakecheck\"\n                  label=\"Staked only\"\n                  checked={checked}\n                  onChange={handleChange}\n                />\n                <Button className=\"btn harvest_btn\">Harvest all</Button>\n              </div>\n            </Form>\n            <div className=\"frm_plnet_list\">\n              <div className=\"farm_tabs\">\n                <Tabs\n                  activeKey={tab}\n                  id=\"frmplanet_tab\"\n                  variant=\"pills\"\n                //   onSelect={handleTab}\n                >\n\n                  <Tab eventKey=\"active\" title=\"Active\">\n                    <div className=\"planet_list active\">\n                      <Row>\n                        <Col xl={12}>\n                          {checked && (\n                            <div className=\"planet_list_view\">\n                              <div className=\"headingStyle\">\n                                <h6>Token</h6>\n                                <h6>APR</h6>\n                                <h6>Total Staked</h6>\n                                <h6 className=\"earnTxt\">Earned</h6>\n                              </div>\n                              {stakingOnly.map((farm, index) =>\n                                <GalaxyCard\n                                  key={index}\n                                  index={index}\n                                  harvestOnClick={harvest}\n                                  currentIndex={currentIndex}\n                                  handleChange={() => handleIndex(index)}\n                                  stakeHandle={stakeHandle}\n                                  handleRoiModal={handleRoiModal}\n                                  status={true}\n                                  farm={farm}\n                                  icon1={NIOB}\n                                  icon2={BUSD}\n                                  title={`NIOB`}\n                                  title1={`BUSD`}\n                                />\n                              )}\n                            </div>\n                          )}\n                          {!checked && (\n                            <div className=\"planet_list_view\">\n                              <div className=\"headingStyle\">\n                                <h6>Token</h6>\n                                <h6>APR</h6>\n                                <h6>Total Staked</h6>\n                                <h6 className=\"earnTxt\">Earned</h6>\n                              </div>\n                              {farms.map((farm, index) =>\n                                <GalaxyCard\n                                  key={index}\n                                  index={index}\n                                  harvestOnClick={harvest}\n                                  currentIndex={currentIndex}\n                                  handleChange={() => handleIndex(index)}\n                                  stakeHandle={stakeHandle}\n                                  handleRoiModal={handleRoiModal}\n                                  status={true}\n                                  farm={farm}\n                                  icon1={NIOB}\n                                  icon2={BUSD}\n                                  title={`NIOB`}\n                                  title1={`BUSD`}\n                                />\n                              )}\n                            </div>\n                          )}\n                        </Col>\n                      </Row>\n                    </div>\n                  </Tab>\n\n                  <Tab eventKey=\"inactive\" title=\"Inactive\">\n                    <div className=\"planet_list active\">\n                      <Row>\n                        <Col xl={12}>\n                          <div className=\"planet_list_view\">\n                            <div className=\"headingStyle\">\n                              <h6>Token</h6>\n                              <h6>APR</h6>\n                              <h6>Total Staked</h6>\n                              <h6 className=\"earnTxt\">Earned</h6>\n                            </div>\n                            {inactiveFarms.map((farm, index) =>\n                              <GalaxyCard\n                                key={index}\n                                index={index}\n                                harvestOnClick={harvest}\n                                currentIndex={currentIndex}\n                                handleChange={() => handleIndex(index)}\n                                stakeHandle={stakeHandle}\n                                handleRoiModal={handleRoiModal}\n                                status={false}\n                                farm={farm}\n                                icon1={NIOB}\n                                icon2={BUSD}\n                                title={`NIOB`}\n                                title1={`BUSD`}\n                              />\n                            )}\n                          </div>\n                        </Col>\n                      </Row>\n                    </div>\n                  </Tab>\n\n                </Tabs>\n              </div>\n            </div>\n          </div>\n        </Container>\n      </div>\n      <GetLPToken stakeValue={stakeValue} stakeData={stakeData} stakeConfirmation={stakeConfirmation} handleStakeValue={handleStakeValue} depositWithdraw={depositWithdraw} setMaxValue={setMaxValue} show={showStake} closeStakeModal={handleClose} />\n      <WithDrawLPToken stakeValue={stakeValue} stakeData={stakeData} stakeConfirmation={stakeConfirmation} handleStakeValue={handleStakeValue} depositWithdraw={depositWithdraw} setMaxValue={setMaxValue} show={showStakeWithdraw} closeStakeModal={handleWithdrawClose} address={isUserConnected} isNiobWithdrawabe={true} />\n      <TransactionalModal show={showTransactionModal} handleClose={closeTransactionModal} txHash={txHash} />\n      {showAPY && <ReturnInvest\n        show={showAPY}\n        niobId={niobStats}\n        roiModalData={roiModalData}\n        lpDetails={lpDetails}\n        handleClose={cloaseRoiModal}\n      />}\n    </div>\n  );\n}\n\nexport default PoolGalaxy;\n"]},"metadata":{},"sourceType":"module"}