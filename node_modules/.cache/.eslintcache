[{"/data/nm/SaitaSwap/src/index.js":"1","/data/nm/SaitaSwap/src/reportWebVitals.js":"2","/data/nm/SaitaSwap/src/App.js":"3","/data/nm/SaitaSwap/src/Application.js":"4","/data/nm/SaitaSwap/src/redux/store.js":"5","/data/nm/SaitaSwap/src/redux/reducers/history.js":"6","/data/nm/SaitaSwap/src/constant.js":"7","/data/nm/SaitaSwap/src/Confirmation.js":"8","/data/nm/SaitaSwap/src/redux/reducers/index.js":"9","/data/nm/SaitaSwap/src/routes/PublicRoutes/PublicRoutes.js":"10","/data/nm/SaitaSwap/src/components/LoaderComponent/LoaderComponent.js":"11","/data/nm/SaitaSwap/src/redux/reducers/security.js":"12","/data/nm/SaitaSwap/src/redux/reducers/loading.js":"13","/data/nm/SaitaSwap/src/redux/reducers/register.js":"14","/data/nm/SaitaSwap/src/redux/reducers/persist.js":"15","/data/nm/SaitaSwap/src/redux/reducers/farm.js":"16","/data/nm/SaitaSwap/src/components/Header/Header.js":"17","/data/nm/SaitaSwap/src/components/Sidebar/Sidebar.js":"18","/data/nm/SaitaSwap/src/components/Footer/Footer.js":"19","/data/nm/SaitaSwap/src/pages/Referral/Referral.js":"20","/data/nm/SaitaSwap/src/pages/Trade/Staking.js":"21","/data/nm/SaitaSwap/src/pages/Home/Home.js":"22","/data/nm/SaitaSwap/src/pages/Trade/Trade.js":"23","/data/nm/SaitaSwap/src/pages/Trade/AddLiquidity.js":"24","/data/nm/SaitaSwap/src/pages/PoolGalaxy/PoolGalaxy.js":"25","/data/nm/SaitaSwap/src/pages/FarmPlanets/FarmPlanets.js":"26","/data/nm/SaitaSwap/src/redux/actions/index.js":"27","/data/nm/SaitaSwap/src/redux/actions/LoadingActions.js":"28","/data/nm/SaitaSwap/src/redux/actions/PersistActions.js":"29","/data/nm/SaitaSwap/src/services/UserService.js":"30","/data/nm/SaitaSwap/src/services/ContractServices.js":"31","/data/nm/SaitaSwap/src/services/ExchangeService.js":"32","/data/nm/SaitaSwap/src/components/ProfileModal/ProfileModal.js":"33","/data/nm/SaitaSwap/src/components/Button/Button.js":"34","/data/nm/SaitaSwap/src/components/ConnectWallet/ConnectWallet.js":"35","/data/nm/SaitaSwap/src/services/ReferralsServices.js":"36","/data/nm/SaitaSwap/src/hooks/getWindowDimensions.js":"37","/data/nm/SaitaSwap/src/components/ScrollTop/ScrollTop.js":"38","/data/nm/SaitaSwap/src/services/FarmService.js":"39","/data/nm/SaitaSwap/src/components/Toast/Toast.js":"40","/data/nm/SaitaSwap/src/components/TransactionalModal/TransactionalModal.js":"41","/data/nm/SaitaSwap/src/components/TransactionModal/TransactionModal.js":"42","/data/nm/SaitaSwap/src/components/GetLPToken/WithDrawLPToken.js":"43","/data/nm/SaitaSwap/src/components/GetLPToken/GetLPToken.js":"44","/data/nm/SaitaSwap/src/components/PlanetCard/PlanetCard.js":"45","/data/nm/SaitaSwap/src/components/ReturnInvest/ReturnInvest.js":"46","/data/nm/SaitaSwap/src/components/GalaxyCard/GalaxyCard.js":"47","/data/nm/SaitaSwap/src/redux/actions/ExchangeActions.js":"48","/data/nm/SaitaSwap/src/redux/actions/tokenActions.js":"49","/data/nm/SaitaSwap/src/redux/actions/SecurityActions.js":"50","/data/nm/SaitaSwap/src/redux/actions/FarmAction.js":"51","/data/nm/SaitaSwap/src/redux/actions/RegisterActions.js":"52","/data/nm/SaitaSwap/src/redux/actions/AuthActions.js":"53","/data/nm/SaitaSwap/src/assets/tokens/index.js":"54","/data/nm/SaitaSwap/src/services/Fetch.js":"55","/data/nm/SaitaSwap/src/components/Card/Card.js":"56","/data/nm/SaitaSwap/src/components/RecentTransactions/RecentTransactions.js":"57","/data/nm/SaitaSwap/src/components/SupplyModal/SupplyModal.js":"58","/data/nm/SaitaSwap/src/components/buttonBack/ButtonBack.js":"59","/data/nm/SaitaSwap/src/components/selectCoin/SelectCoin.js":"60","/data/nm/SaitaSwap/src/pages/Trade/ImportPool.js":"61","/data/nm/SaitaSwap/src/components/Modal/SettingModal/SettingModal.js":"62","/data/nm/SaitaSwap/src/pages/Trade/Liquidity.js":"63","/data/nm/SaitaSwap/src/components/Modal/ModalCurrency/ModalCurrency.js":"64","/data/nm/SaitaSwap/src/pages/Trade/Exchange.js":"65","/data/nm/SaitaSwap/src/components/cardCustom/CardCustom.js":"66","/data/nm/SaitaSwap/src/services/SecurityService.js":"67","/data/nm/SaitaSwap/src/components/Timer/Timer.js":"68","/data/nm/SaitaSwap/src/components/FarmCard/FarmCard.js":"69","/data/nm/SaitaSwap/src/Helpers/storageHelper.js":"70","/data/nm/SaitaSwap/src/pages/Trade/TokenBalance.js":"71","/data/nm/SaitaSwap/src/components/coinItem/CoinItem.js":"72","/data/nm/SaitaSwap/src/components/SwapModal/SwapModal.js":"73","/data/nm/SaitaSwap/src/components/buttonLink/ButtonLink.js":"74","/data/nm/SaitaSwap/src/components/Modal/RemoveLiquidity/RemoveLiquidity.js":"75","/data/nm/SaitaSwap/src/pages/Trade/RangeSlider.js":"76","/data/nm/SaitaSwap/src/components/StakeModal/StakeModal.js":"77"},{"size":573,"mtime":1655813874000,"results":"78","hashOfConfig":"79"},{"size":362,"mtime":1655813606000,"results":"80","hashOfConfig":"79"},{"size":705,"mtime":1655813874000,"results":"81","hashOfConfig":"79"},{"size":1088,"mtime":1655813874000,"results":"82","hashOfConfig":"79"},{"size":1099,"mtime":1655813874000,"results":"83","hashOfConfig":"79"},{"size":94,"mtime":1655813874000,"results":"84","hashOfConfig":"79"},{"size":3557,"mtime":1658906868802,"results":"85","hashOfConfig":"79"},{"size":1067,"mtime":1656063010553,"results":"86","hashOfConfig":"79"},{"size":782,"mtime":1655813874000,"results":"87","hashOfConfig":"79"},{"size":3388,"mtime":1658839005115,"results":"88","hashOfConfig":"79"},{"size":708,"mtime":1655813874000,"results":"89","hashOfConfig":"79"},{"size":1336,"mtime":1655813874000,"results":"90","hashOfConfig":"79"},{"size":377,"mtime":1655813874000,"results":"91","hashOfConfig":"79"},{"size":431,"mtime":1655813874000,"results":"92","hashOfConfig":"79"},{"size":2563,"mtime":1655816405483,"results":"93","hashOfConfig":"79"},{"size":400,"mtime":1655813874000,"results":"94","hashOfConfig":"79"},{"size":3669,"mtime":1655813874000,"results":"95","hashOfConfig":"79"},{"size":10734,"mtime":1658839005123,"results":"96","hashOfConfig":"79"},{"size":2440,"mtime":1658749509394,"results":"97","hashOfConfig":"79"},{"size":6514,"mtime":1656063010557,"results":"98","hashOfConfig":"79"},{"size":18916,"mtime":1658924873108,"results":"99","hashOfConfig":"79"},{"size":30160,"mtime":1656496797147,"results":"100","hashOfConfig":"79"},{"size":6068,"mtime":1658867161090,"results":"101","hashOfConfig":"79"},{"size":35162,"mtime":1658923968080,"results":"102","hashOfConfig":"79"},{"size":20429,"mtime":1656420403594,"results":"103","hashOfConfig":"79"},{"size":18925,"mtime":1658726805071,"results":"104","hashOfConfig":"79"},{"size":264,"mtime":1655813874000,"results":"105","hashOfConfig":"79"},{"size":377,"mtime":1655813874000,"results":"106","hashOfConfig":"79"},{"size":3707,"mtime":1658819859482,"results":"107","hashOfConfig":"79"},{"size":706,"mtime":1655813874000,"results":"108","hashOfConfig":"79"},{"size":14315,"mtime":1659015545190,"results":"109","hashOfConfig":"79"},{"size":39859,"mtime":1659017814223,"results":"110","hashOfConfig":"79"},{"size":2082,"mtime":1656070660757,"results":"111","hashOfConfig":"79"},{"size":338,"mtime":1655813874000,"results":"112","hashOfConfig":"79"},{"size":4976,"mtime":1658818290415,"results":"113","hashOfConfig":"79"},{"size":1296,"mtime":1655813874000,"results":"114","hashOfConfig":"79"},{"size":581,"mtime":1655813874000,"results":"115","hashOfConfig":"79"},{"size":950,"mtime":1655813606000,"results":"116","hashOfConfig":"79"},{"size":8655,"mtime":1658382660184,"results":"117","hashOfConfig":"79"},{"size":511,"mtime":1655813874000,"results":"118","hashOfConfig":"79"},{"size":1400,"mtime":1656073090431,"results":"119","hashOfConfig":"79"},{"size":1645,"mtime":1656073098199,"results":"120","hashOfConfig":"79"},{"size":3746,"mtime":1655813874000,"results":"121","hashOfConfig":"79"},{"size":2475,"mtime":1655813874000,"results":"122","hashOfConfig":"79"},{"size":25862,"mtime":1658401128538,"results":"123","hashOfConfig":"79"},{"size":4118,"mtime":1655813874000,"results":"124","hashOfConfig":"79"},{"size":18408,"mtime":1656063010557,"results":"125","hashOfConfig":"79"},{"size":9866,"mtime":1658948025928,"results":"126","hashOfConfig":"79"},{"size":493,"mtime":1655813874000,"results":"127","hashOfConfig":"79"},{"size":7423,"mtime":1655813874000,"results":"128","hashOfConfig":"79"},{"size":1,"mtime":1655813874000,"results":"129","hashOfConfig":"79"},{"size":1660,"mtime":1655813874000,"results":"130","hashOfConfig":"79"},{"size":733,"mtime":1655813874000,"results":"131","hashOfConfig":"79"},{"size":12501,"mtime":1659030059900,"results":"132","hashOfConfig":"79"},{"size":1538,"mtime":1656420403594,"results":"133","hashOfConfig":"79"},{"size":192,"mtime":1655813874000,"results":"134","hashOfConfig":"79"},{"size":3562,"mtime":1656265360209,"results":"135","hashOfConfig":"79"},{"size":2842,"mtime":1656509092733,"results":"136","hashOfConfig":"79"},{"size":439,"mtime":1655813606000,"results":"137","hashOfConfig":"79"},{"size":1821,"mtime":1658859108916,"results":"138","hashOfConfig":"79"},{"size":9444,"mtime":1658990418533,"results":"139","hashOfConfig":"79"},{"size":4977,"mtime":1659021920258,"results":"140","hashOfConfig":"79"},{"size":6990,"mtime":1659021627315,"results":"141","hashOfConfig":"79"},{"size":2962,"mtime":1659000056971,"results":"142","hashOfConfig":"79"},{"size":40309,"mtime":1658989722522,"results":"143","hashOfConfig":"79"},{"size":270,"mtime":1655813606000,"results":"144","hashOfConfig":"79"},{"size":2181,"mtime":1655813874000,"results":"145","hashOfConfig":"79"},{"size":285,"mtime":1656654840723,"results":"146","hashOfConfig":"79"},{"size":1162,"mtime":1655813874000,"results":"147","hashOfConfig":"79"},{"size":637,"mtime":1655813874000,"results":"148","hashOfConfig":"79"},{"size":1048,"mtime":1655813874000,"results":"149","hashOfConfig":"79"},{"size":360,"mtime":1655813874000,"results":"150","hashOfConfig":"79"},{"size":2084,"mtime":1655813874000,"results":"151","hashOfConfig":"79"},{"size":309,"mtime":1655813606000,"results":"152","hashOfConfig":"79"},{"size":33449,"mtime":1659017982469,"results":"153","hashOfConfig":"79"},{"size":729,"mtime":1655813874000,"results":"154","hashOfConfig":"79"},{"size":1974,"mtime":1658863555702,"results":"155","hashOfConfig":"79"},{"filePath":"156","messages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},"f7cgan",{"filePath":"159","messages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"161","messages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"163","messages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"158"},{"filePath":"166","messages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"168","messages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"170","messages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"172","messages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"158"},{"filePath":"175","messages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"177","messages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"158"},{"filePath":"180","messages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"182","messages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"184","messages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"186","messages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"158"},{"filePath":"189","messages":"190","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"191","messages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"193","messages":"194","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"158"},{"filePath":"196","messages":"197","errorCount":0,"fatalErrorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":6,"source":"198","usedDeprecatedRules":"158"},{"filePath":"199","messages":"200","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"158"},{"filePath":"202","messages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"158"},{"filePath":"205","messages":"206","errorCount":0,"fatalErrorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"207","messages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":84,"fixableErrorCount":0,"fixableWarningCount":3,"source":"209","usedDeprecatedRules":"158"},{"filePath":"210","messages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"212","messages":"213","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"214","messages":"215","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"158"},{"filePath":"217","messages":"218","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"158"},{"filePath":"220","messages":"221","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"222","messages":"223","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"224","messages":"225","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"158"},{"filePath":"227","messages":"228","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"229","messages":"230","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"231","messages":"232","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"233","messages":"234","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"158"},{"filePath":"236","messages":"237","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"158"},{"filePath":"239","messages":"240","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"158"},{"filePath":"242","messages":"243","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"244","messages":"245","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"246","messages":"247","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248","usedDeprecatedRules":"158"},{"filePath":"249","messages":"250","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251","usedDeprecatedRules":"158"},{"filePath":"252","messages":"253","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"254","messages":"255","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"158"},{"filePath":"257","messages":"258","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"259","messages":"260","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"261","usedDeprecatedRules":"158"},{"filePath":"262","messages":"263","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"264","messages":"265","errorCount":0,"fatalErrorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":"266","usedDeprecatedRules":"158"},{"filePath":"267","messages":"268","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"269","usedDeprecatedRules":"158"},{"filePath":"270","messages":"271","errorCount":0,"fatalErrorCount":0,"warningCount":34,"fixableErrorCount":0,"fixableWarningCount":0,"source":"272","usedDeprecatedRules":"158"},{"filePath":"273","messages":"274","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"275","messages":"276","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"277","usedDeprecatedRules":"158"},{"filePath":"278","messages":"279","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"280","usedDeprecatedRules":"158"},{"filePath":"281","messages":"282","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"283","messages":"284","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"285","messages":"286","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"287","messages":"288","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"289","messages":"290","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"291","messages":"292","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"293","messages":"294","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"295","messages":"296","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"297","messages":"298","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"299","usedDeprecatedRules":"158"},{"filePath":"300","messages":"301","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"302","messages":"303","errorCount":0,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"304","messages":"305","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"306","messages":"307","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"308","messages":"309","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"310","messages":"311","errorCount":0,"fatalErrorCount":0,"warningCount":42,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"312","messages":"313","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"314","messages":"315","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"316","messages":"317","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"318","messages":"319","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"320","usedDeprecatedRules":"158"},{"filePath":"321","messages":"322","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"323","messages":"324","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"325","usedDeprecatedRules":"158"},{"filePath":"326","messages":"327","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"328","usedDeprecatedRules":"158"},{"filePath":"329","messages":"330","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"331","usedDeprecatedRules":"158"},{"filePath":"332","messages":"333","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"334","messages":"335","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"336","messages":"337","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"338","messages":"339","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/data/nm/SaitaSwap/src/index.js",[],["340","341"],"/data/nm/SaitaSwap/src/reportWebVitals.js",[],"/data/nm/SaitaSwap/src/App.js",[],"/data/nm/SaitaSwap/src/Application.js",["342","343","344"],"import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport PublicRoutes from \"./routes/PublicRoutes/PublicRoutes\";\nimport { rootName } from \"./constant\";\nimport LoaderComponent from \"./components/LoaderComponent/LoaderComponent\";\nimport Confirmation from \"./Confirmation\";\nimport { useSelector } from \"react-redux\";\n\nconst Application = () => {\n    // const hasAccess = useSelector(state => state.persist.hasAccess);\n\n    return (\n        // <>\n            // {hasAccess === false ?\n                // <> <Confirmation /> </>\n                // :\n                <>\n                    <LoaderComponent></LoaderComponent>\n                    <Router>\n                        <Switch>\n                            {/* <AuthGuard path={`${rootName}/auth`} component={PrivateRoutes} /> */}\n                            <Route path={`${rootName}/`} component={PublicRoutes} />\n                        </Switch>\n                    </Router>\n                </>\n            // }\n        // </>\n    )\n}\n\nexport default Application\n","/data/nm/SaitaSwap/src/redux/store.js",[],"/data/nm/SaitaSwap/src/redux/reducers/history.js",[],"/data/nm/SaitaSwap/src/constant.js",["345","346","347","348"],"/data/nm/SaitaSwap/src/Confirmation.js",["349"],"import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { loginConfirmationScreen } from \"./redux/actions\";\n\nconst Confirmation = () => {\n    const dispatch = useDispatch();\n\n    let m = \"hN5r&HCPMs\";\n    const [inputValue, setInputValue] = useState(\"\");\n\n    const onChange = (e) => {\n        setInputValue(e.target.value);\n    }\n\n    const handleEnter = (e) => {\n        e.preventDefault();\n        if(inputValue === m) {\n            dispatch(loginConfirmationScreen())\n        }\n    }\n\n    return (\n          <div className=\"d-center\">\n              <div className=\"information-box\">\n                <h3>Welcome To SaitaSwap</h3>  \n                <h3>Please Enter Code To Access Site</h3>\n                <form action=\"\">\n                    <input type=\"text\" value={inputValue} onChange={onChange} className=\"form-control mb-3\" />\n                    <h6><button onClick={handleEnter}>Enter</button></h6>\n                </form>\n              </div>\n          </div>\n        \n    )\n}\n\nexport default Confirmation\n","/data/nm/SaitaSwap/src/redux/reducers/index.js",[],"/data/nm/SaitaSwap/src/routes/PublicRoutes/PublicRoutes.js",["350","351","352","353","354","355","356"],"import React, { useEffect, useState } from \"react\";\nimport { Route, Redirect, Switch } from \"react-router-dom\";\nimport { useLocation, withRouter } from \"react-router\";\nimport Header from \"../../components/Header/Header\";\nimport Sidebar from \"../../components/Sidebar/Sidebar\";\nimport Home from \"../../pages/Home/Home\";\nimport Referral from \"../../pages/Referral/Referral\";\nimport FarmPlanets from \"../../pages/FarmPlanets/FarmPlanets\";\nimport Footer from \"../../components/Footer/Footer\";\nimport Trade from \"../../pages/Trade/Trade\";\nimport AddLiquidity from \"../../pages/Trade/AddLiquidity\";\nimport { rootName } from \"../../constant\";\nimport PoolGalaxy from \"../../pages/PoolGalaxy/PoolGalaxy\";\nimport ReactGA from \"react-ga\";\nimport Staking from \"../../pages/Trade/Staking\";\nconst PublicRoutes = () => {\n  const location = useLocation();\n\n  useEffect(() => {\n    ReactGA.initialize(\"UA-216327768-1\");\n    ReactGA.pageview(location.pathname + location.search);\n  }, [location]);\n\n  const [small, setSmall] = useState(false);\n  const [navCollapse, setNavCollapse] = useState(false);\n  const [tradeDropdown, openCloseTradeDropdown] = useState(false);\n\n  useEffect(() => {\n    if (typeof window !== \"undefined\") {\n      window.addEventListener(\"scroll\", () =>\n        setSmall(window.pageYOffset > 200)\n      );\n    }\n  }, []);\n\n  const handleNavCollapse = () => {\n    setNavCollapse((prevNavCollapse) => !prevNavCollapse);\n    if (navCollapse === false) {\n      document.body.className = \"expande_container\";\n      // return () => { document.body.className = ''; }\n    } else {\n      document.body.className = \"\";\n    }\n  };\n\n  const handleSubNav = () => {\n    setNavCollapse((prevNavCollapse) => prevNavCollapse);\n  };\n\n  return (\n    <>\n      <Header\n        className={`fixed ${small ? \"isFixed\" : \"\"}`}\n        small_nav={() => handleNavCollapse()}\n        mobileIcon={navCollapse}\n      />\n      <Sidebar\n        small_nav={() => handleNavCollapse()}\n        className={`fixed ${small ? \"isFixed\" : \"\"} ${\n          navCollapse ? \"small_nav\" : \"\"\n        }`}\n        showSocial={navCollapse}\n        onClickOpenSidebar={() => handleSubNav()}\n        closeSidebar={() => {\n          handleNavCollapse();\n        }}\n        tradeDropdown={() => {\n          if (navCollapse === true) {\n            alert(\"collapsed\");\n            handleNavCollapse();\n          }\n        }}\n        tradeDropdown={!tradeDropdown}\n        onOpenChange={(open) => {\n          alert(\"fd\");\n          openCloseTradeDropdown(!open);\n        }}\n      />\n      <Switch>\n        <Route path={\"/\"} component={Trade} exact={true} />\n        <Route path={\"/home\"} component={Trade} exact={true} />\n        <Route path={\"/r/:ref\"} component={Home} />\n        {/* <Route path={\"/referral\"} component={Referral} exact={true} /> */}\n        <Route path={\"/staking\"} component={Staking} exact={true} />\n        {/* <Route\n          path={\"/farmplanets/:tab\"}\n          component={FarmPlanets}\n          exact={true}\n        /> */}\n        <Route path={\"/trade/:tab/:fillter?\"} component={Trade} exact={true} />\n        {/* <Route\n              path={'/trade/addLiquidity'}\n              component={AddLiquidity}\n              exact={true} \n          /> */}\n        {/* <Route path={\"/poolgalaxy\"} component={PoolGalaxy} exact={true} /> */}\n      </Switch>\n      <Footer />\n    </>\n  );\n};\n\nexport default withRouter(PublicRoutes);\n","/data/nm/SaitaSwap/src/components/LoaderComponent/LoaderComponent.js",[],"/data/nm/SaitaSwap/src/redux/reducers/security.js",[],"/data/nm/SaitaSwap/src/redux/reducers/loading.js",[],"/data/nm/SaitaSwap/src/redux/reducers/register.js",["357"],"import { UserService } from \"../../services/UserService\";\nimport { actionTypes } from \"../actions\";\n\nconst initialState = {\n  email: \"\",\n  captcha: \"\"\n};\n\nconst register = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.REGISTER_FORM_UPDATE:\n      return {\n\n        ...state, [action.payload.prop]: action.payload.value\n\n      };\n\n\n\n    default:\n      return state;\n  }\n}\nexport default register;\n","/data/nm/SaitaSwap/src/redux/reducers/persist.js",[],"/data/nm/SaitaSwap/src/redux/reducers/farm.js",[],"/data/nm/SaitaSwap/src/components/Header/Header.js",["358","359","360"],"import React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\"\nimport './Header.scss'\nimport { Link } from 'react-router-dom'\nimport IconToggle from '../../assets/images/menu_toggle_icon.png'\nimport Iconmenu from '../../assets/images/wrap-menu.png'\nimport Button from \"../Button/Button\";\nimport ConnectWallet from \"../ConnectWallet/ConnectWallet\";\nimport ProfileModal from \"../ProfileModal/ProfileModal\";\nimport { login, logout, versionManager } from \"../../redux/actions\"\nimport { ContractServices } from \"../../services/ContractServices\";\n\nconst Header = props => {\n    const dispatch = useDispatch();\n    const isUserConnected = useSelector(state => state.persist.isUserConnected);\n    const walletType = useSelector(state => state.persist.walletType);\n    const [show, setShow] = useState(false);\n    useEffect(() => {\n        const init = async () => {\n            await dispatch(versionManager());\n            if (walletType) {\n                await ContractServices.setWalletType(walletType);\n            } else {\n                dispatch(logout());\n            }\n        };\n        init();\n        addListeners();\n    }, []);\n    const handleClose = () => setShow(false);\n\n    const handleShow = () => setShow(true);\n\n    const connectCall = () => {\n        isUserConnected ? setShow(!show) : setShow(true);\n    }\n    const addListeners = async () => {\n        let address;\n        if (walletType === 'Metamask') {\n            address = await ContractServices.isMetamaskInstalled('');\n        }\n        if (walletType === 'BinanceChain') {\n            address = await ContractServices.isBinanceChainInstalled();\n        }\n\n        ContractServices.walletWindowListener();\n        if (address) {\n            window.ethereum.on('accountsChanged', function (accounts) {\n                const account = accounts[0];\n                dispatch(login({ account, walletType }));\n                window.location.reload();\n            });\n        }\n    };\n    const logoutCall = () => {\n        dispatch(logout());\n        setShow(false);\n    }\n\n    return (\n        <div className={`header_style ${props.className}`}>\n            <div className=\"header_left_style\">\n                <div className=\"for_desktop\">\n                    <div className=\"hamburg\" onClick={props.small_nav}>\n                        {\n                            props.mobileIcon ?\n                                <img src={Iconmenu} alt=\"\" />\n                                :\n                                <img src={IconToggle} />\n                        }\n                    </div>\n                </div>\n                <div className=\"for_mobile\">\n                    <div className=\"hamburg\" onClick={props.small_nav}>\n                        {\n                            props.mobileIcon ?\n                                <img src={IconToggle} />\n                                :\n                                <img src={Iconmenu} alt=\"\" />\n                        }\n                    </div>\n                </div>\n                <Link to=\"/home\" className=\"header_logo\"></Link>\n            </div>\n            <div className=\"header_right_style\">\n                <Button onClick={() => connectCall()} title={isUserConnected ? `${isUserConnected.substring(1, 6)}...${isUserConnected.substr(isUserConnected.length - 4)}` : 'Connect'} />\n            </div>\n            {isUserConnected === \"\" && <ConnectWallet show={show} handleShow={handleShow} handleClose={handleClose} />}\n            {isUserConnected !== \"\" && <ProfileModal show={show} handleClose={handleClose} logout={logoutCall} />}\n        </div>\n\n    )\n}\n\nexport default Header;","/data/nm/SaitaSwap/src/components/Sidebar/Sidebar.js",["361","362","363","364","365","366","367","368","369","370","371","372","373","374","375","376","377","378","379","380","381","382","383","384","385","386","387","388"],"import React, { useEffect, useState } from \"react\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport {\n  ProSidebar,\n  Menu,\n  MenuItem,\n  SubMenu,\n  SidebarFooter,\n} from \"react-pro-sidebar\";\nimport { isMobile } from \"react-device-detect\";\nimport Twitter from \"../../assets/images/twitter-icon.svg\";\nimport NIOBtoken from \"../../assets/images/saitaswap.png\";\nimport Telegram from \"../../assets/images/telegram-icon.svg\";\nimport Docs from \"../../assets/images/docs-icon.svg\";\nimport Youtube from \"../../assets/images/token_icons/saitamaIcons/youtube.svg\";\nimport facebook from \"../../assets/images/token_icons/saitamaIcons/facebook.svg\";\nimport instagram from \"../../assets/images/token_icons/saitamaIcons/instagram.svg\";\nimport discord from \"../../assets/images/token_icons/saitamaIcons/discord.svg\";\n\nimport Medium from \"../../assets/images/medium-icon.svg\";\nimport Github from \"../../assets/images/git.svg\";\nimport Globe from \"../../assets/images/language-switcher-icon.svg\";\nimport \"./Sidebar.scss\";\nimport useWindowDimensions from \"../../hooks/getWindowDimensions\";\nimport {\n  ANCHOR_BUSD_LP,\n  AUDIT,\n  DOCS,\n  INSURANCE_FUND,\n  LOTTERY,\n  NIOB_SHARING,\n  PREDICTION_TRAINING,\n  TRADING_FEE_CASHBACK,\n} from \"../../assets/tokens\";\nimport { ExchangeService } from \"../../services/ExchangeService\";\n\nconst Sidebar = (props) => {\n  const { width } = useWindowDimensions();\n\n  const [selectedOption, setSelectedOption] = useState(\"\");\n  const [NiobBusdValue, setNiobBusdValue] = useState(\"\");\n  const location = useLocation();\n  const { pathname } = location;\n  const splitLocation = pathname.split(\"/\");\n\n  const closeSidebar = () => {\n    if (width < 991) {\n      props.small_nav();\n    }\n  };\n\n  const setSideBarOption = (option) => {\n    if (selectedOption == option) {\n      setSelectedOption(\"\");\n    } else {\n      if (props.showSocial) {\n        if (!isMobile) {\n          // props.closeSidebar();\n        }\n      }\n      setSelectedOption(option);\n    }\n  };\n\n  const getNiobDollarValue = async () => {\n    const res = await ExchangeService.getAmountsOutForDValue(1000000000, [\n      \"0x0eD81CAe766d5B1a4B3ed4DFbED036be13c6C09C\",\n      \"0xc778417E063141139Fce010982780140Aa0cD5Ab\",\n      \"0xe185DB528FAfCBceb3bF00687E5aaFDC6DB17089\",\n    ]);\n    setNiobBusdValue(res[2] / 10 ** 18);\n  };\n\n  React.useEffect(() => {\n    getNiobDollarValue();\n    if (props.showSocial) {\n      setSelectedOption(\"\");\n    }\n  }, [props.showSocial]);\n  return (\n    <ProSidebar\n      className={`sidebar_style ${props.className}`}\n      style={{ width: \"150px\" }}\n    >\n      <Menu iconShape=\"square\">\n        {/* <MenuItem\n          onClick={() => { closeSidebar(); setSideBarOption(\"\") }}\n          className={splitLocation[1] === \"home\" ? \"active\" : \"\"}\n          icon={<i className=\"home_nav_icon\"></i>}\n        >\n          <Link to=\"/home\">Homebase</Link>\n        </MenuItem>\n        <MenuItem\n          onClick={() => { closeSidebar(); setSideBarOption(\"\") }}\n          className={splitLocation[1] === \"home\" ? \"active\" : \"\"}\n          icon={<i className=\"pred_nav_icon\"></i>}\n        >\n          <Link to=\"/home\">Prediction Trading</Link>\n          <a href={\"https://prdt.niob.app\"} target=\"_blank\">Prediction Trading</a>\n        </MenuItem> */}\n        <SubMenu\n          title=\"Trade\"\n          open={selectedOption == \"Trade\"}\n          onOpenChange={() => setSideBarOption(\"Trade\")}\n          icon={<i className=\"trade_nav\"></i>}\n        >\n          <MenuItem\n            onClick={() => closeSidebar()}\n            className={splitLocation[2] === \"exchange\" ? \"active\" : \"\"}\n            icon={<i className=\"exchange_nav_icon\"></i>}\n          >\n            <Link to=\"/trade/exchange\">Exchange</Link>\n          </MenuItem>\n          <MenuItem\n            onClick={() => closeSidebar()}\n            className={splitLocation[2] === \"liquidity\" ? \"active\" : \"\"}\n            icon={<i className=\"liquidity_nav_icon\"></i>}\n          >\n            <Link to=\"/trade/liquidity\">Liquidity</Link>\n          </MenuItem>\n        </SubMenu>\n        <MenuItem\n          onClick={() => {\n            closeSidebar();\n            setSideBarOption(\"\");\n          }}\n          className={splitLocation[1] === \"liquidity\" ? \"active\" : \"\"}\n          icon={<i className=\"stake_nav_icon\"></i>}\n        >\n          <Link to=\"/staking\">Stake</Link>\n        </MenuItem>\n        {/* <MenuItem\n          onClick={() => {\n            closeSidebar();\n            setSideBarOption(\"\");\n          }}\n          className={splitLocation[1] === \"farmplanets\" ? \"active\" : \"\"}\n          icon={<i className=\"farm_nav_icon\"></i>}\n        >\n<<<<<<< HEAD\n          <Link to=\"/farmplanets/active\">Farms</Link>\n=======\n          <Link to=\"/farmplanets/active\">Farm Planets</Link>\n>>>>>>> df46fef32bab5644bb50b4020f57df50047d7a16\n        </MenuItem> */}\n        {/* <MenuItem\n          onClick={() => {\n            closeSidebar();\n            setSideBarOption(\"\");\n          }}\n          className={splitLocation[1] === \"poolgalaxy\" ? \"active\" : \"\"}\n          icon={<i className=\"pools_nav_icon\"></i>}\n        >\n          <Link to=\"/poolgalaxy\">Pool Galaxy</Link>\n        </MenuItem> */}\n        {/* <MenuItem onClick={()=>setSideBarOption(\"\")} icon={<i className=\"lottery_nav_icon\"></i>}><Link to=\"/lottery\">Lottery</Link></MenuItem> */}\n        {/* <MenuItem\n          onClick={() => {\n            closeSidebar();\n            setSideBarOption(\"\");\n          }}\n          className={splitLocation[1] === \"referral\" ? \"active\" : \"\"}\n          icon={<i className=\"referrals_nav_icon\"></i>}\n        >\n          <Link to=\"/referral\">Referral</Link>\n        </MenuItem> */}\n        {/* <MenuItem\n          onClick={() => {\n            setSideBarOption(\"\");\n            closeSidebar();\n          }}\n          icon={<i className=\"audits_nav_icon\"></i>}\n        >\n          <a href={AUDIT} target=\"_blank\">\n            Audits\n          </a>\n        </MenuItem> */}\n        {/* <SubMenu\n          title=\"Features\"\n          open={selectedOption == \"Features\"}\n          onOpenChange={() => setSideBarOption(\"Features\")}\n          icon={<i className=\"features_nav_icon\"></i>}\n        > */}\n        {/* <MenuItem\n            onClick={() => { closeSidebar() }}\n          >\n            <a href={LOTTERY} target=\"_blank\">Lottery</a>\n          </MenuItem>  */}\n        {/* <MenuItem\n            onClick={() => { closeSidebar() }}\n          >\n            <a href={NIOB_SHARING} target=\"_blank\">Niob-Sharing</a>\n          </MenuItem>\n          <MenuItem\n            onClick={() => { closeSidebar() }}\n          >\n            <a href={PREDICTION_TRAINING} target=\"_blank\">Prediction Trading</a>\n          </MenuItem>\n          <MenuItem\n            onClick={() => { closeSidebar() }}\n          >\n            <a href={INSURANCE_FUND} target=\"_blank\">Insurance Fund</a>\n          </MenuItem> */}\n        {/* <MenuItem\n            onClick={() => { closeSidebar() }}\n          >\n            <a href={TRADING_FEE_CASHBACK} target=\"_blank\">Trading-Fee Cashback</a>\n          </MenuItem> */}\n        {/* </SubMenu> */}\n\n        {/* <SubMenu\n          title=\"Listings\"\n          open={selectedOption == \"Listings\"}\n          onOpenChange={() => setSideBarOption(\"Listings\")}\n          icon={<i className=\"listings_nav_icon\"></i>}\n        >\n          <MenuItem\n            onClick={() => {closeSidebar()}}\n          >\n            <Link to=\"/\">Listing A</Link>\n          </MenuItem>\n          <MenuItem\n            onClick={() => {closeSidebar()}}\n          >\n            <Link to=\"/\">Listing B</Link>\n          </MenuItem>\n        </SubMenu> */}\n\n        {/* <SubMenu\n          title=\"Analytics\"\n          open={selectedOption == \"Analytics\"}\n          onOpenChange={() => setSideBarOption(\"Analytics\")}\n          icon={<i className=\"analytics_nav_icon\"></i>}\n        >\n          <MenuItem\n            onClick={() => {\n              closeSidebar();\n            }}\n          >\n            <Link to=\"/\">Analytic A</Link>\n          </MenuItem>\n          <MenuItem\n            onClick={() => {\n              closeSidebar();\n            }}\n          >\n            <Link to=\"/\">Analytic B</Link>\n          </MenuItem>\n        </SubMenu> */}\n\n        {/* <SubMenu\n          title=\"More\"\n          open={selectedOption == \"More\"}\n          onOpenChange={() => setSideBarOption(\"More\")}\n          icon={<i className=\"more_nav_icon\"></i>}\n        > */}\n        {/* <MenuItem\n            onClick={() => {\n              closeSidebar();\n            }}\n          >\n            <a href={DOCS} target=\"_blank\">\n              Docs\n            </a>\n          </MenuItem> */}\n        {/* <MenuItem\n            onClick={() => {closeSidebar()}}\n          >\n            <Link to=\"/\">Blog</Link>\n          </MenuItem> */}\n        {/* </SubMenu> */}\n      </Menu>\n      {/* {props.showSocial ? (\n        <></>\n      ) : ( */}\n      <SidebarFooter className=\"sidebar_footer\">\n        <ul className=\"token-language\">\n          <li className=\"token_list\">\n            <img src={NIOBtoken} />{\" \"}\n            <span style={{ color: \"white\" }}>\n              ${NiobBusdValue ? NiobBusdValue.toFixed(4) : \"0\"}\n            </span>\n          </li>\n          {/* <li className=\"lang_list\">\n            <img src={Globe} /> <span className=\"lang_text\">EN</span>\n          </li> */}\n        </ul>\n        <ul className=\"social_links\">\n          {/* <li>\n            <Link>\n              <img src={Github} />\n            </Link>\n          </li> */}\n          <li>\n            <a href=\"https://www.instagram.com/we.are.saitama/\" target=\"_blank\">\n              <img src={instagram} />\n            </a>\n          </li>\n          <li>\n            <a\n              href=\"https://www.facebook.com/groups/1275234186328559/\"\n              target=\"_blank\"\n            >\n              <img src={facebook} />\n            </a>\n          </li>\n          <li>\n            <a\n              href=\"https://www.youtube.com/channel/UCcgXSwHloSMeXygKx8bTGBA\"\n              target=\"_blank\"\n            >\n              <img src={Youtube} />\n            </a>\n          </li>\n          <li>\n            <a href=\"https://discord.gg/saitama\" target=\"_blank\">\n              <img src={discord} />\n            </a>\n          </li>\n          {/* <li>\n            <Link>\n              <img src={Medium} />\n            </Link>\n          </li> */}\n          <li>\n            <a href=\"https://twitter.com/wearesaitama\" target=\"_blank\">\n              <img src={Twitter} />\n            </a>\n          </li>\n          <li>\n            <a href=\"https://t.me/+PjupkZhaJSc1Mjhh\" target=\"_blank\">\n              <img src={Telegram} />\n            </a>\n          </li>\n        </ul>\n      </SidebarFooter>\n      {/* )} */}\n    </ProSidebar>\n  );\n};\nexport default Sidebar;\n","/data/nm/SaitaSwap/src/components/Footer/Footer.js",["389","390","391","392"],"import React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport \"./Footer.scss\";\nimport { Link } from \"react-router-dom\";\nimport NIOB from \"../../assets/images/saitaswap.png\";\nimport MetaMask from \"../../assets/images/MetaMask-Icon.svg\";\nimport ScrollTop from \"../ScrollTop/ScrollTop\";\nimport { Button } from \"react-bootstrap\";\nimport { addCommas } from \"../../constant\";\n\nconst Footer = (props) => {\n  const footerValues = useSelector((state) => state.persist.footerValues);\n  useEffect(() => {}, []);\n  const handelToken = async () => {\n    const { ethereum } = window;\n    const tokenAddress = \"0x0eD81CAe766d5B1a4B3ed4DFbED036be13c6C09C\";\n    const tokenSymbol = \"SAITAMA\";\n    const tokenDecimals = 18;\n    //const tokenImage = 'http://placekitten.com/200/300';\n    try {\n      // wasAdded is a boolean. Like any RPC method, an error may be thrown.\n      const wasAdded = await ethereum.request({\n        method: \"wallet_watchAsset\",\n        params: {\n          type: \"ERC20\", // Initially only supports ERC20, but eventually more!\n          options: {\n            address: tokenAddress, // The address that the token is at.\n            symbol: tokenSymbol, // A ticker symbol or shorthand, up to 5 chars.\n            decimals: tokenDecimals, // The number of decimals in the token\n            //image: tokenImage, // A string url of the token logo\n          },\n        },\n      });\n\n      if (wasAdded) {\n        console.log(\"Thanks for your interest!\");\n      } else {\n        console.log(\"Your loss!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  return (\n    <div className={`footer_style ${props.className}`}>\n      <div className=\"footer_align\">\n        <div className=\"niob_price\">\n          {/* <img src={NIOB} alt={\"img\"} /> */}\n          {/* <div className=\"flex\"> */}\n          {/* <span>SAITAMA</span> */}\n          {/* <span className=\"vlue\">${footerValues?.niobValue?.toFixed(2)}</span> */}\n          {/* </div> */}\n        </div>\n        <div className=\"buy_niob\">\n          <img src={NIOB} alt={\"icon\"} onClick={() => handelToken()} />\n          <Link to=\"/trade/exchange\">\n            <Button className=\"cm_btn\" onClick={() => handelToken()}>\n              Buy SAITAMA\n            </Button>\n          </Link>\n        </div>\n\n        <div className=\"scrollUp\">\n          <ScrollTop />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Footer;\n","/data/nm/SaitaSwap/src/pages/Referral/Referral.js",["393","394","395","396","397"],"import React, { useEffect, useState } from \"react\";\nimport { Container, Col, Row, Form, FormControl } from 'react-bootstrap'\nimport { Link } from 'react-router-dom'\nimport { ReferralsServices } from \"../../services/ReferralsServices\";\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport Reflink from \"../../assets/images/reflink-icon.svg\";\nimport Twitter from \"../../assets/images/twitter-icon.svg\";\nimport Telegram from \"../../assets/images/telegram-icon.svg\";\nimport './Referral.scss'\nimport { useSelector } from \"react-redux\";\nimport Button from \"../../components/Button/Button\";\nimport ConnectWallet from \"../../components/ConnectWallet/ConnectWallet\";\nimport { toast } from \"../../components/Toast/Toast\";\n\nconst Referral = () => {\n    const isUserConnected = useSelector((state) => state.persist.isUserConnected);\n    const [show, setShow] = useState(false);\n\n    const handleClose = () => setShow(false);\n\n    const handleShow = () => setShow(true);\n\n    const connectCall = () => {\n        isUserConnected ? setShow(!show) : setShow(true);\n    }\n\n    useEffect(() => {\n        init();\n        return () => { };\n    }, []);\n\n    const [referralCount, setReferralCount] = useState(\"\");\n    const [referralIncome, setReferralIncome] = useState(\"\");\n\n    const init = async () => {\n        const count = await ReferralsServices.getReferralCount(isUserConnected);\n        // console.log('dddd', count);\n        const income = await ReferralsServices.getReferralCommissions(\n            isUserConnected\n        );\n        // console.log('inc',income);\n        setReferralCount(count);\n        setReferralIncome(income);\n    };\n\n    return (\n        <div className=\"container_wrap referral_page\">\n            <div className=\"timeto_connect\">\n                <Container className=\"custom_container\">\n                    <Row>\n                        <Col xxl={6} xl={6}>\n                            <div className=\"invite_othr\">\n                                <h1 className=\"title_hd\">Time to connect</h1>\n                                <h3>Invite your friends to earn rewards from their SAITA staking rewards. </h3>\n                                <p>Every direct referral provides 1% income on Saita farms and pools staking rewards claims. Every indirect referral provides an additional 1% referral reward. Users can receive these rewards on their indirect referrals for up to the 3-rd level. Referral rewards are paid in SAITA tokens. </p>\n                            </div>\n                        </Col>\n                        <Col xxl={5} xl={6}>\n                            <div className=\"invite_othr refflink\">\n                                {isUserConnected ? <>  <img src={Reflink} />\n                                    <h2>My Referral Link</h2>\n                                    <div className=\"referalcodeDiv d-block\">\n                                        <Form.Group>\n                                            <div className=\"referalCopyBox\">\n                                                <input class=\"form-control\" value={`https://niob.app/r/${isUserConnected}`} readOnly />\n                                                <CopyToClipboard text={`${window.location.origin}/r/${isUserConnected}`} onCopy={() => toast.success('Copied!')}>\n                                                    <button></button>\n                                                </CopyToClipboard>\n                                            </div>\n                                        </Form.Group>\n                                    </div>\n                                    {/* <ul className=\"how_get\">\n                                        <li>\n                                            <p>You will get</p>\n                                            <span>100%</span>\n                                        </li>\n                                        <li>\n                                            <p>Friends will get</p>\n                                            <span>0%</span>\n                                        </li>\n                                    </ul> */}\n                                    <div className=\"share_anyone\">\n                                        <p>Share</p>\n                                        <ul class=\"shareable\">\n                                            <li><Link><img src={Twitter} /></Link></li>\n                                            <li><Link><img src={Telegram} /></Link></li>\n                                        </ul>\n                                    </div> </>\n                                    :\n                                    <>\n                                        <Button onClick={() => connectCall()} title=\"Unlock Wallet\" />\n                                        <h2>Unlock wallet to get your unique referral link</h2>\n                                        {isUserConnected === \"\" && <ConnectWallet show={show} handleShow={handleShow} handleClose={handleClose} />}\n                                    </>\n                                }\n                            </div>\n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n            <div className=\"referrl_comm\">\n                <Container className=\"custom_container\">\n                    <Row>\n                        <Col lg={4} md={6} xs={12}>\n                            {isUserConnected && <div className=\"totl_reff\">\n                                <div className=\"reff_title\">\n                                    <h3>Total Referrals</h3>\n                                </div>\n                                <div className=\"reff_cont\">\n                                    <span>{referralCount}</span>\n                                </div>\n                            </div>}\n                        </Col>\n                        <Col lg={4} md={6} xs={12}>\n                            {isUserConnected && <div className=\"totl_reff\">\n                                <div className=\"reff_title\">\n                                    <h3>Total Referral Commission</h3>\n                                </div>\n                                <div className=\"reff_cont\">\n                                    <span>{referralIncome}</span>\n                                </div>\n                            </div>}\n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n\n        </div>\n\n    )\n\n}\n\nexport default Referral;","/data/nm/SaitaSwap/src/pages/Trade/Staking.js",["398","399","400","401","402","403","404","405","406","407","408","409","410","411","412","413","414","415","416","417","418","419","420","421","422"],"/data/nm/SaitaSwap/src/pages/Home/Home.js",["423","424","425","426","427","428","429","430","431","432","433","434","435","436","437","438","439","440","441","442","443","444","445","446","447","448","449","450","451","452","453","454","455","456","457","458","459","460","461","462","463","464","465","466","467","468","469","470","471","472","473","474","475","476","477","478","479","480","481","482","483","484","485","486","487","488","489","490","491","492","493","494","495","496","497","498","499","500","501","502","503","504","505","506"],"import React, { useEffect, useState } from \"react\";\nimport { Carousel, Row, Col, Image } from \"react-bootstrap\";\nimport { useHistory, useParams } from \"react-router\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Web3 from \"web3\";\nimport { Link } from \"react-router-dom\";\nimport { rootName } from \"../../constant\";\nimport Button from \"../../components/Button/Button\";\nimport FarmCard from \"../../components/FarmCard/FarmCard\";\nimport NIOB from \"../../assets/images/saitaswap.png\";\nimport BUSD from \"../../assets/images/token_icons/BUSD-Token.svg\";\nimport ANCHOR from \"../../assets/images/token_icons/ANCHOR-Token.svg\";\nimport BTCB from \"../../assets/images/token_icons/BTCB-Token.svg\";\nimport { ContractServices } from \"../../services/ContractServices\";\nimport { ExchangeService } from \"../../services/ExchangeService\";\nimport { FarmService } from \"../../services/FarmService\";\nimport { ReferralsServices } from \"../../services/ReferralsServices\";\nimport Statement from \"../../assets/Pdfs/Statement.pdf\";\nimport {\n  MAIN_CONTRACT_LIST,\n  BURN_ADDRESS,\n  ANCHOR_BUSD_LP,\n  WETH,\n  TOKEN_LIST,\n  BNB_BUSD_LP,\n} from \"../../assets/tokens\";\nimport { addCommas } from \"../../constant\";\nimport {\n  addTransaction,\n  startLoading,\n  stopLoading,\n  saveFotterValues,\n} from \"../../redux/actions\";\nimport { BigNumber } from \"bignumber.js\";\nimport Loader from \"react-loader-spinner\";\nimport { TwitterTimelineEmbed } from \"react-twitter-embed\";\nimport Default from \"../../assets/images/token_icons/default.svg\";\nimport { savereffralAddress } from \"../../redux/actions\";\n\nimport \"./Home.scss\";\nimport { toast } from \"../../components/Toast/Toast\";\n\nimport UpdateDsk from \"../../assets/images/PRDT-Trading-Banner.jpg\";\n// import UpdateMob from \"../../assets/images/update_Mob.jpg\";\n\nconst Home = () => {\n  const dispatch = useDispatch();\n  const isUserConnected = useSelector((state) => state.persist.isUserConnected);\n  const [potDetails, setPotDetails] = useState({\n    prizeArray: [0, 0, 0],\n    miniPrice: 0,\n    pot: 0,\n    decimals: 0,\n  });\n  const { ref } = useParams();\n  const referralAddress = useSelector((state) => state.persist.referralAddress);\n  const [rewards, seRewards] = useState(0);\n  const [niobPerBlock, setNiobPerBlock] = useState(0);\n  const [transferTaxRate, setTransferTaxRate] = useState(0);\n  const [burnedToken, setBurnedToken] = useState(0);\n  const [walletShow, setWalletShow] = useState(false);\n  const [poolLength, setPoolLength] = useState(0);\n  const [farms, setFarms] = useState([]);\n  const [inactiveFarms, setInactiveFarms] = useState([]);\n  const [stakingOnly, setStakingOnly] = useState([]);\n  const [stakeData, setStakeData] = useState(null);\n  const [stakeValue, setStakeValue] = useState(0);\n  const [referrer, setReferrer] = useState(\n    \"0x0000000000000000000000000000000000000000\"\n  );\n  const [totalAmount, setAmount] = useState(0);\n  const [totalRewards, setRewards] = useState(0);\n  const [marketCap, setMarketCap] = useState(0.0);\n  const [anchorTotalSupply, setAnchorTotalSupply] = useState(0);\n  const [niobBusdValue, setNiobBusdValue] = useState(0);\n  const [totalMinted, setTotalMinted] = useState(0);\n  const [totalLockedRewards, setTotalLockedRewards] = useState(0);\n  const [anchorBnbWorth, setAnchorBnbWorth] = useState(0);\n  const [anchorBusdWorth, setAnchorBusdWorth] = useState(0);\n  const [tokenIds, setTokenIds] = useState();\n  const [allowance, setAllowance] = useState(false);\n  const [disable, setDisabledBUtton] = useState(false);\n  const [IButton, setIButton] = useState(false);\n  const [ticketWindow, openTicketWindow] = useState(false);\n  const [ticketValue, setvalue] = useState(1);\n  const [buyButton, setBuyButton] = useState(false);\n  const [loader, setLoader] = useState(false);\n  const [currentTicketsArray, setCurrentArray] = useState([]);\n  const [showHarvest, setShowHarvest] = useState(false);\n  const [harvest, setHarvestAll] = useState([]);\n  const [stakeConfirmation, setStakeConfimation] = useState(0);\n  const [showTransactionModal, setShowTransactionModal] = useState(false);\n  const [txHash, setTxHash] = useState(\"\");\n  const [farmAndStakeLoader, setFarmAndStakeLoader] = useState(false);\n  const [liquidity, setLiquidity] = useState(0);\n  const [niobApr, setNiobApr] = useState(0);\n\n  const [topFarms, setTopFarms] = useState([]);\n  const [topFarmApy, setTopFarmApy] = useState(\"\");\n\n  useEffect(async () => {\n    init();\n    if (ref) {\n      const checkAddress = await Web3.utils.isAddress(ref.toLowerCase());\n      if (!checkAddress) {\n        toast.error(\"Address does not exist!\");\n        return;\n      }\n      if (isUserConnected) {\n        let re = await ReferralsServices.getReferrer(isUserConnected);\n        if (re != \"0x0000000000000000000000000000000000000000\") {\n          toast.error(`This user has already referral`);\n          return;\n        }\n        dispatch(savereffralAddress(ref.toLowerCase()));\n        return;\n      }\n      toast.success(`Please connect with wallet!`);\n    }\n  }, [isUserConnected]);\n\n  const init = async () => {\n    const res = await ContractServices.isMetamaskInstalled();\n\n    if (isUserConnected && res) {\n      getMarketCap();\n      getBurnedToken();\n      getNiobPerBlock();\n      try {\n        dispatch(startLoading());\n        let ref = await ReferralsServices.getReferrer(isUserConnected);\n        if (ref === \"0x0000000000000000000000000000000000000000\") {\n          if (\n            referralAddress &&\n            referralAddress !== \"0x0000000000000000000000000000000000000000\"\n          ) {\n            ref = referralAddress;\n          }\n          setReferrer(ref);\n        }\n        dispatch(stopLoading());\n        const pL = Number(await FarmService.poolLength());\n        setPoolLength(pL);\n        // let farmsTemp = [];\n        let totalRewards = 0;\n        let totalLockedRewards = 0;\n        let totalLiquidity = 0;\n        let options = [];\n        const res = await ContractServices.getTokenBalance(\n          TOKEN_LIST[1].address,\n          isUserConnected\n        );\n        setAmount(res);\n        // setFarmAndStakeLoader(true);\n        let allAPRs = [];\n        for (let i = 0; i < pL; i++) {\n          const res = await FarmService.totalPoolInfo(i);\n          const userInfo = await FarmService.userInfo(i, isUserConnected);\n          const { poolInfo, latest } = res;\n\n          if (poolInfo.lpToken != undefined) {\n            const allowance = await ContractServices.allowanceToken(\n              poolInfo.lpToken,\n              MAIN_CONTRACT_LIST.farm.address,\n              isUserConnected\n            );\n            let check = true;\n            if (\n              BigNumber(allowance).isGreaterThanOrEqualTo(\n                BigNumber(2 * 255 - 1)\n              )\n            ) {\n              // setShowApproveButton(false);\n              check = false;\n            }\n            const reserve = await ExchangeService.getReserves(ANCHOR_BUSD_LP);\n            const tokenZero = await ExchangeService.getTokenZero(\n              ANCHOR_BUSD_LP\n            );\n            const tokenOne = await ExchangeService.getTokenOne(ANCHOR_BUSD_LP);\n            const anchorPerBlock = Number(await FarmService.pantherPerBlock());\n            const price = await getPriceInUsd(tokenZero, tokenOne, reserve);\n\n            totalLockedRewards +=\n              (latest - poolInfo.lastRewardBlock) *\n              price *\n              (anchorPerBlock / 10 ** 18);\n            setTotalLockedRewards(totalLockedRewards);\n\n            const farmPoolInfo = await FarmService.farmAndPoolInfo(i);\n            const { farm, pool } = farmPoolInfo;\n            if (farm) {\n              let res = await handleTotalLiquidity(farm.lpToken);\n\n              const lpTokenDetailsTemp = await FarmService.getLpTokenDetails(\n                poolInfo.lpToken\n              );\n              let apr = await calculateAPR(farm.allocPoint, res);\n              setTopFarms((topFarms) => [\n                ...topFarms,\n                {\n                  symbol0: lpTokenDetailsTemp.symbol0,\n                  symbol1: lpTokenDetailsTemp.symbol1,\n                  newLiquidity: res,\n                  newApr: apr,\n                },\n              ]);\n              allAPRs.push(apr);\n              totalLiquidity += Number(res);\n            }\n            if (pool) {\n              const poolInfoForNiob = await FarmService.poolInfo(i, \"2\");\n              // console.log(\"poolInfoForNiob\", poolInfoForNiob);\n              let res = await handleTotalLiquidityForPool(pool.lpToken);\n              const tokenAmount = await ExchangeService.getTokenStaked(\n                pool.lpToken\n              );\n              let price = 0;\n              if (\n                pool.lpToken.toLowerCase() ===\n                TOKEN_LIST[2].address.toLowerCase()\n              ) {\n                price = 1;\n              } else {\n                const tokenPairUSDT = await ExchangeService.getPair(\n                  pool.lpToken,\n                  TOKEN_LIST[2].address\n                );\n                price = await calPrice(tokenPairUSDT);\n              }\n              //const niobId = await FarmService.niobId();\n              //console.log('this is apr',poolInfo,  niobId);\n              if (poolInfoForNiob.allocPoint === \"30\") {\n                let apr = await calculateAPR(poolInfoForNiob.allocPoint, res);\n                setNiobApr(apr);\n              }\n              const liq = tokenAmount * price;\n              totalLiquidity += Number(liq);\n              setLiquidity(totalLiquidity);\n            }\n\n            if (i === pL - 1) {\n              const totalSupply = await getTotalSupply();\n              const niobValue = await getNiobDollarValue();\n              const obj = {\n                tvl: totalLiquidity,\n                totalSupply: totalSupply,\n                niobValue: niobValue,\n              };\n              dispatch(saveFotterValues(obj));\n            }\n            const rewards = Number(\n              Number(\n                (await FarmService.pendingPanther(i, isUserConnected)) /\n                  10 ** 18\n              ).toFixed(3)\n            );\n            totalRewards += rewards;\n            setRewards(totalRewards);\n\n            const nextHarvestUntil = await FarmService.canHarvest(\n              i,\n              isUserConnected\n            );\n            if (\n              !check &&\n              rewards > 0 &&\n              Number(userInfo.nextHarvestUntil) > 0 &&\n              nextHarvestUntil\n            ) {\n              setShowHarvest(true);\n              options.push({ pid: i, lpToken: poolInfo.lpToken });\n            }\n          }\n          // if (i + 1 == pL) {\n          //     setFarmAndStakeLoader(false);\n          // }\n        }\n        setTopFarmApy(Math.max.apply(Math, allAPRs));\n        setHarvestAll(options);\n      } catch (err) {\n        console.log(err);\n        setFarmAndStakeLoader(false);\n        dispatch(stopLoading());\n      }\n    }\n  };\n  const calculateAPR = async (allocPoint, liquidity) => {\n    const anchorPrice = await calPrice(ANCHOR_BUSD_LP);\n    const totalAllcationPoint = Number(\n      await FarmService.totalAllocationPoint()\n    );\n    const anchorPerBlock = Number(await FarmService.pantherPerBlock());\n    //need to calculate usd price.\n    // console.log(\"liquidity: \", liquidity);\n    if (liquidity != 0) {\n      const apr =\n        ((allocPoint / totalAllcationPoint) *\n          ((anchorPerBlock / 10 ** 18) * 28800 * 365 * 100 * anchorPrice)) /\n        liquidity;\n\n      return apr.toFixed(2);\n    }\n\n    return 0;\n  };\n  const getMarketCap = async () => {\n    const dollarValue = await getNiobDollarValue();\n    const totalSupply = await getTotalSupply();\n    setMarketCap(dollarValue * totalSupply);\n  };\n  const getNiobDollarValue = async () => {\n    const reserves = await ExchangeService.getReserves(ANCHOR_BUSD_LP);\n    setNiobBusdValue(reserves[1] / reserves[0]);\n    return reserves[1] / reserves[0];\n  };\n  const getTotalSupply = async () => {\n    const res = await ExchangeService.getTotalSupply(\n      MAIN_CONTRACT_LIST.anchorNew.address\n    );\n    const anchorTotalSupply = res;\n    const txAmount = (0.05 * anchorTotalSupply) / 100;\n    setTotalMinted(anchorTotalSupply);\n    setAnchorTotalSupply(txAmount);\n    return res;\n  };\n  const getBurnedToken = async () => {\n    try {\n      const response = await ExchangeService.getBurnedToken();\n      setBurnedToken(response);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  const getNiobPerBlock = async () => {\n    try {\n      const niobPerBlock = Number(await FarmService.pantherPerBlock());\n      setNiobPerBlock(niobPerBlock / 10 ** 18);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  const getPriceInUsd = async (tokenZero, tokenOne, reserve) => {\n    let price;\n\n    const decimalZero = await ContractServices.getDecimals(tokenZero);\n    const decimalOne = await ContractServices.getDecimals(tokenOne);\n\n    if (tokenZero.toLowerCase() === TOKEN_LIST[2].address.toLowerCase()) {\n      price = (reserve[0] * decimalOne) / (reserve[1] * decimalZero);\n    }\n\n    if (tokenOne.toLowerCase() === TOKEN_LIST[2].address.toLowerCase()) {\n      price = (reserve[1] * decimalZero) / (reserve[0] * decimalOne);\n    }\n\n    return price;\n  };\n  const calPrice = async (pairAddress) => {\n    let price = 0;\n\n    if (pairAddress == \"0x0000000000000000000000000000000000000000\") {\n      return 0;\n    }\n\n    // console.log(\"pairAddresspairAddress\", pairAddress);\n    const tokenZero = await ExchangeService.getTokenZero(pairAddress);\n    const tokenOne = await ExchangeService.getTokenOne(pairAddress);\n    const reserve = await ExchangeService.getReserves(pairAddress);\n\n    const decimalZero = await ContractServices.getDecimals(tokenZero);\n    const decimalOne = await ContractServices.getDecimals(tokenOne);\n\n    if (tokenZero.toLowerCase() === TOKEN_LIST[2].address.toLowerCase()) {\n      return (price =\n        (reserve[0] * 10 ** decimalOne) / (reserve[1] * 10 ** decimalZero));\n    }\n\n    if (tokenOne.toLowerCase() === TOKEN_LIST[2].address.toLowerCase()) {\n      return (price =\n        (reserve[1] * 10 ** decimalZero) / (reserve[0] * 10 ** decimalOne));\n    }\n\n    let priceBNBToUSD = await calPrice(BNB_BUSD_LP); //replace with BNB-USD pair\n\n    if (tokenZero.toLowerCase() === WETH.toLowerCase()) {\n      price =\n        (reserve[0] * 10 ** decimalOne) / (reserve[1] * 10 ** decimalZero);\n      return price * priceBNBToUSD;\n    }\n\n    if (tokenOne.toLowerCase() === WETH.toLowerCase()) {\n      price =\n        (reserve[1] * 10 ** decimalZero) / (reserve[0] * 10 ** decimalOne);\n      return price * priceBNBToUSD;\n    }\n  };\n\n  const getDollarAPR = async (address) => {\n    try {\n      if (address.toLowerCase() === TOKEN_LIST[1].address.toLowerCase()) {\n        const reserves = await ExchangeService.getReserves(ANCHOR_BUSD_LP);\n        let val = reserves[1] / reserves[0];\n        val = val || 0;\n        //setAnchorDollarValue(val.toFixed(3));\n        return val.toFixed(3);\n      } else if (\n        address.toLowerCase() === TOKEN_LIST[2].address.toLowerCase()\n      ) {\n        return 1;\n      } else if (address.toLowerCase() != TOKEN_LIST[2].address.toLowerCase()) {\n        const pair = await ExchangeService.getPairFromPancakeFactory(\n          address,\n          TOKEN_LIST[2].address\n        );\n        const reserves = await ExchangeService.getReserves(pair);\n        let val = reserves[1] / reserves[0];\n        val = val || 0;\n        // setAnchorDollarValue(val.toFixed(3));\n        return val.toFixed(3);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const handleTotalLiquidity = async (pairAddress) => {\n    if (pairAddress != \"0x0000000000000000000000000000000000000000\") {\n      // console.log(pairAddress);\n      const tokenZero = await ExchangeService.getTokenZero(pairAddress);\n      const tokenOne = await ExchangeService.getTokenOne(pairAddress);\n      const reserve = await ExchangeService.getReserves(pairAddress);\n      const tokenZeroPairUSDT = await ExchangeService.getPair(\n        tokenZero,\n        TOKEN_LIST[2].address\n      );\n      const tokenOnePairUSDT = await ExchangeService.getPair(\n        tokenOne,\n        TOKEN_LIST[2].address\n      );\n\n      const tokenZeroPairBNB = await ExchangeService.getPair(tokenZero, WETH);\n      const tokenOnePairBNB = await ExchangeService.getPair(tokenOne, WETH);\n\n      const decimalZero = await ContractServices.getDecimals(tokenZero);\n      const decimalOne = await ContractServices.getDecimals(tokenOne);\n      // const decimalPair = await ContractServices.getDecimals(pairAddress);\n\n      let priceA = await getDollarAPR(tokenZero);\n      let priceB = await getDollarAPR(tokenOne);\n\n      // let priceA = 0;\n      // let priceB = 0;\n\n      // if (tokenZero.toLowerCase() == TOKEN_LIST[2].address.toLowerCase()) {\n      //   priceA = 1;\n      // } else if (tokenZero.toLowerCase() == WETH.toLowerCase()) {\n      //   priceA = await calPrice(BNB_BUSD_LP);\n      // }\n\n      // if (tokenOne.toLowerCase() == TOKEN_LIST[2].address.toLowerCase()) {\n      //   priceB = 1;\n      // } else if (tokenOne.toLowerCase() == WETH.toLowerCase()) {\n      //   priceB = await calPrice(BNB_BUSD_LP);\n      // }\n\n      // if (priceA == 0) {\n      //   if (tokenZeroPairUSDT != \"0x0000000000000000000000000000000000000000\") {\n      //     priceA = await calPrice(tokenZeroPairUSDT);\n      //   } else if (\n      //     tokenZeroPairBNB != \"0x0000000000000000000000000000000000000000\"\n      //   ) {\n      //     priceA = await calPrice(tokenZeroPairBNB);\n      //   } else {\n      //     priceA = 0;\n      //   }\n      // }\n\n      // if (priceB == 0) {\n      //   if (tokenOnePairUSDT != \"0x0000000000000000000000000000000000000000\") {\n      //     priceB = await calPrice(tokenOnePairUSDT);\n      //   } else if (\n      //     tokenOnePairBNB != \"0x0000000000000000000000000000000000000000\"\n      //   ) {\n      //     priceB = await calPrice(tokenOnePairBNB);\n      //   } else {\n      //     priceB = 0;\n      //   }\n      // }\n\n      const totalSupply = await ExchangeService.getTotalSupply(pairAddress);\n      const tokenStaked = await ExchangeService.getTokenStaked(pairAddress);\n\n      const liquidity =\n        (((reserve[0] / 10 ** decimalZero) * priceA +\n          (reserve[1] / 10 ** decimalOne) * priceB) /\n          totalSupply) *\n        tokenStaked;\n\n      return liquidity;\n    }\n    return 0;\n  };\n  const options = {\n    indicators: false,\n  };\n  const handleTotalLiquidityForPool = async (tokenAddress) => {\n    if (tokenAddress != \"0x0000000000000000000000000000000000000000\") {\n      const reserve = await ExchangeService.getTokenStaked(tokenAddress);\n      const tokenPairUSDT = await ExchangeService.getPair(\n        tokenAddress,\n        TOKEN_LIST[2].address\n      );\n      const tokenPairBNB = await ExchangeService.getPair(tokenAddress, WETH);\n\n      let priceA = 0;\n\n      if (tokenAddress.toLowerCase() == TOKEN_LIST[2].address.toLowerCase()) {\n        priceA = 1;\n      } else if (tokenAddress.toLowerCase() == WETH.toLowerCase()) {\n        priceA = await calPrice(BNB_BUSD_LP);\n      }\n\n      if (priceA == 0) {\n        if (tokenPairUSDT != \"0x0000000000000000000000000000000000000000\") {\n          priceA = await calPrice(tokenPairUSDT);\n        } else if (\n          tokenPairBNB != \"0x0000000000000000000000000000000000000000\"\n        ) {\n          priceA = await calPrice(tokenPairBNB);\n          priceA = 0;\n        }\n      }\n\n      const liquidity = reserve * priceA;\n\n      return Number(liquidity).toFixed(2);\n    }\n    return 0;\n  };\n  const handleIcon = (symbol) => {\n    if (symbol != undefined) {\n      const tokenObj = TOKEN_LIST.find(\n        (d) => d.symbol.toLowerCase() === symbol.toLowerCase()\n      );\n      return tokenObj != undefined ? tokenObj.icon : Default;\n    }\n  };\n\n  const history = useHistory();\n  return (\n    <div className=\"container_wrap\">\n      <div className=\"container container_inside homePage\">\n        <div className=\"updateSection\">\n          <img src={UpdateDsk} className=\"forDesktop\" alt=\"banner\" />\n          {/* <img src={UpdateMob} className=\"forMob\" alt=\"banner\" /> */}\n          {/* <Button  title=\"Read Statement of the team\" className=\"readState_btn\" /> */}\n          <a\n            rel=\"stylesheet\"\n            href={\"https://prdt.niob.app\"}\n            target=\"_blank\"\n            type=\"button\"\n            className=\"readState_btn\"\n          >\n            Go to Prediction Trading\n          </a>\n          {/* <a rel=\"stylesheet\" href={Statement} target=\"_blank\" type=\"button\" className=\"readState_btn\" >Read Statement of the team</a> */}\n        </div>\n\n        <Carousel fade {...options}>\n          <Carousel.Item>\n            <Carousel.Caption>\n              <h3>Welcome to SAITA Swap</h3>\n              <p>\n                Decentralized Exchange and Automatic Liquidity Acquisition Yield\n                Farm running currently on Binance Smart Chain.\n              </p>\n              <p>\n                If you are new to SAITA please also visit our Tutorial Section in\n                our official docs. We’ll teach you step by step you to use SAITA\n                Swap and it’s assets.\n              </p>\n              <a\n                href=\"https://docs.niob.finance/tutorial\"\n                target={\"_blank\"}\n                className=\"captionFooter d-flex justify-content-between align-items-center\"\n              >\n                <span>SAITA Tutorial</span>\n                <span>\n                  <Image\n                    src={require(\"../../assets/images/Link-Icon.svg\").default}\n                    alt=\"icon\"\n                  />\n                </span>\n              </a>\n            </Carousel.Caption>\n            <Image\n              className=\"bgImage\"\n              alt=\"image\"\n              src={\n                require(\"../../assets/images/dashboard-header-bg.jpg\").default\n              }\n            />\n          </Carousel.Item>\n          <Carousel.Item>\n            <Carousel.Caption>\n              <h3>The Docs</h3>\n              <p>\n                All important and technical information about the project\n                \"Saita\", tokenomics, project roadmap and term explanations can be\n                found in our docs. If you have any questions, please ask them in\n                the official Saita Telegram Channel.\n              </p>\n              <a\n                href=\"https://docs.niob.finance\"\n                target={\"_blank\"}\n                className=\"captionFooter d-flex justify-content-between align-items-center\"\n              >\n                <span>SAITA Docs</span>{\" \"}\n                <span>\n                  <Image\n                    src={require(\"../../assets/images/Link-Icon.svg\").default}\n                    alt=\"icon\"\n                  />\n                </span>\n              </a>\n            </Carousel.Caption>\n            <Image\n              className=\"bgImage\"\n              alt=\"image\"\n              src={\n                require(\"../../assets/images/dashboard-header-bg.jpg\").default\n              }\n            />\n          </Carousel.Item>\n        </Carousel>\n        <Row className=\"startEngine\">\n          <Col xl={4} lg={12}>\n            <div className=\"comnBlk\">\n              <Image\n                className=\"headerImg\"\n                src={require(\"../../assets/images/swap-icon.svg\").default}\n              />\n              <h3>Start your engine </h3>\n              <p>Start your journey or improve your wallet portfolio:</p>\n              <h3>SAITA Price: ${niobBusdValue.toFixed(4)}</h3>\n              <Link\n                to={\"/trade/exchange\"}\n                className=\"captionFooter d-flex justify-content-between align-items-center\"\n              >\n                <span>Buy SAITA Token </span> <span className=\"arrowIcon\" />\n              </Link>\n            </div>\n          </Col>\n          <Col xl={4} lg={12}>\n            <div className=\"comnBlk\">\n              <Image\n                className=\"headerImg\"\n                src={require(\"../../assets/images/farm-icon.svg\").default}\n              />\n              <h3>Farm Planets</h3>\n              <p>Stake LP tokens in Farms and earn up to:</p>\n              <h3>{topFarmApy !== \"\" ? topFarmApy : \"loading..\"} % APR</h3>\n              <Link\n                className=\"captionFooter d-flex justify-content-between align-items-center\"\n                to=\"farmplanets/active\"\n              >\n                <span>Start farming</span> <span className=\"arrowIcon\" />\n              </Link>\n            </div>\n          </Col>\n          <Col xl={4} lg={12}>\n            <div className=\"comnBlk\">\n              <Image\n                className=\"headerImg\"\n                src={require(\"../../assets/images/reflink-icon.svg\").default}\n              />\n              <h3>Decentralized Ref Link </h3>\n              <p>Enjoy Referral Rewards from:</p>\n              <h3>Farms, Pools Swaps</h3>\n              <Link\n                className=\"captionFooter d-flex justify-content-between align-items-center\"\n                to=\"/referral\"\n              >\n                <span>Start inviting friends</span>{\" \"}\n                <span className=\"arrowIcon\" />\n              </Link>\n            </div>\n          </Col>\n        </Row>\n        <Row className=\"announcements\">\n          <Col xl={6} lg={12}>\n            <div className=\"comnBlk  carousel_caption_announce\">\n              <h3 className=\"fw-strong pb-2\">Announcements</h3>\n              <TwitterTimelineEmbed\n                sourceType=\"profile\"\n                screenName=\"saitafinance\"\n                options={{ height: 418 }}\n                theme=\"dark\"\n                noScrollbar={true}\n              />\n            </div>\n          </Col>\n          <Col xl={6} lg={12}>\n            <div className=\"comnBlk mb-4\">\n              <h3>SAITA Stats</h3>\n              <ul className=\"pl-0 niobStats\">\n                <li>\n                  <label>Market Cap</label>\n                  <span>${addCommas(marketCap.toFixed(2))}</span>\n                </li>\n                <li>\n                  <label>Total Minted</label>\n                  <span>{addCommas(Number(totalMinted).toFixed(2))}</span>\n                </li>\n                <li>\n                  <label>Total Burned</label>\n                  <span>{addCommas(burnedToken)}</span>\n                </li>\n                <li>\n                  <label>Total Locked Rewards</label>\n                  <span>\n                    <strong className=\"value\">\n                      {farmAndStakeLoader ? (\n                        <Loader\n                          type=\"Circles\"\n                          color=\"#FFFFFF\"\n                          height={15}\n                          width={15}\n                          visible={true}\n                          // timeout={5000} //3 secs\n                        />\n                      ) : (\n                        addCommas(\n                          totalLockedRewards ? totalLockedRewards.toFixed(2) : 0\n                        )\n                      )}\n                    </strong>\n                  </span>\n                </li>\n                <li>\n                  <label> Circulating Supply </label>\n                  <span>\n                    {addCommas((totalMinted - burnedToken).toFixed(2))}\n                  </span>\n                </li>\n                <li>\n                  <label>Max Tx Amount </label>\n                  <span>{addCommas(anchorTotalSupply.toFixed(2))}</span>\n                </li>\n                <li>\n                  <label>New Saita/Block</label>\n                  <span>{niobPerBlock}</span>\n                  {/* <span>{addCommas(anchorPerBlock)}</span> */}\n                </li>\n                <li>\n                  <label>Transfer Tax</label>\n                  <span>{\"3%\"}</span>\n                </li>\n              </ul>\n            </div>\n            <div className=\"comnBlk\">\n              <h3>Total Value Locked (TVL)</h3>\n              <div className=\"totl_value\">\n                <h3>\n                  {\" \"}\n                  {farmAndStakeLoader ? (\n                    <Loader\n                      type=\"Circles\"\n                      color=\"#FFFFFF\"\n                      height={15}\n                      width={15}\n                      visible={true}\n                      // timeout={5000} //3 secs\n                    />\n                  ) : (\n                    addCommas(liquidity ? liquidity.toFixed(2) : 0)\n                  )}\n                </h3>\n                <p className=\"mb-0\">Across all Farms and Pools</p>\n              </div>\n            </div>\n          </Col>\n        </Row>\n        <Row className=\"all_farms\">\n          <Col md={12}>\n            <div className=\"farm_title\">\n              <h3>Top Farm Planets</h3>\n              <Button\n                title=\"All Farms\"\n                onClick={() => {\n                  history.push(`${rootName}/farmplanets/active`);\n                }}\n              />\n            </div>\n          </Col>\n\n          {topFarms\n            .sort(function (a, b) {\n              let keyA = a.newApr,\n                keyB = b.newApr;\n              // Compare the 2 farms\n              if (keyA < keyB) return 1;\n              if (keyA > keyB) return -1;\n              return 0;\n            })\n            .filter((farm, index) => index < 3)\n            .map((topFarm, index) => (\n              <Col xl={4} lg={12}>\n                <FarmCard\n                  title={topFarm.symbol0}\n                  title1={topFarm.symbol1}\n                  icon1={\n                    handleIcon(topFarm?.symbol0)\n                      ? handleIcon(topFarm?.symbol0)\n                      : \"\"\n                  }\n                  icon2={\n                    handleIcon(topFarm?.symbol1)\n                      ? handleIcon(topFarm?.symbol1)\n                      : \"\"\n                  }\n                  liquidity={`$${topFarm.newLiquidity} `}\n                  apy={`${topFarm.newApr != \"NaN\" ? topFarm.newApr : \"0\"} %`}\n                />\n              </Col>\n            ))}\n        </Row>\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","/data/nm/SaitaSwap/src/pages/Trade/Trade.js",["507","508","509","510"],"/data/nm/SaitaSwap/src/pages/Trade/AddLiquidity.js",["511","512","513","514","515","516","517","518","519","520","521","522","523","524","525"],"/data/nm/SaitaSwap/src/pages/PoolGalaxy/PoolGalaxy.js",["526","527","528","529","530","531","532","533","534","535","536","537","538","539","540"],"import React, { useEffect, useState } from \"react\";\nimport Button from \"@restart/ui/esm/Button\";\nimport {\n  Container,\n  Col,\n  Row,\n  Form,\n  InputGroup,\n  FormControl,\n  Tabs,\n  Tab,\n} from \"react-bootstrap\";\nimport Searchicon from \"../../assets/images/search.png\";\nimport PoolIcon from \"../../assets/images/Pool-Header-Logo.svg\";\nimport \"./PoolGalaxy.scss\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addTransaction, startLoading, stopLoading } from \"../../redux/actions\";\nimport { ReferralsServices } from \"../../services/ReferralsServices\";\nimport { FarmService } from \"../../services/FarmService\";\nimport { ContractServices } from \"../../services/ContractServices\";\nimport { ExchangeService } from \"../../services/ExchangeService\";\nimport { toast } from \"../../components/Toast/Toast\";\nimport BigNumber from \"bignumber.js\";\nimport GalaxyCard from \"../../components/GalaxyCard/GalaxyCard\";\nimport NIOB from \"../../assets/images/token_icons/NIOB.svg\";\nimport BUSD from \"../../assets/images/token_icons/BUSD-Token.svg\";\nimport GetLPToken from \"../../components/GetLPToken/GetLPToken\";\nimport WithDrawLPToken from \"../../components/GetLPToken/WithDrawLPToken\";\nimport TransactionalModal from \"../../components/TransactionalModal/TransactionalModal\";\nimport ReturnInvest from \"../../components/ReturnInvest/ReturnInvest\"\nimport { TOKEN_LIST, ANCHOR_BUSD_LP } from \"../../assets/tokens\";\n\nfunction PoolGalaxy(props) {\n  const {\n    match: { params },\n    history,\n  } = props;\n  const { tab } = params;\n  // const handleTab = (data) => {\n  //   history.push(`${rootName}/farmplanets/${data}`);\n  // };\n\n  const handleClose = () => { setStakeValue(null); setShowStake(false) };\n  const handleWithdrawClose = () => { setStakeValue(null); setShowStakeWithdraw(false) };\n\n  const dispatch = useDispatch();\n  const isUserConnected = useSelector(state => state.persist.isUserConnected);\n  const referralAddress = useSelector(state => state.persist.referralAddress);\n\n  const [checked, setChecked] = useState(false);\n  const [active, setActive] = useState(true);\n  const [currentIndex, setCurrentIndex] = useState(-1);\n  const [showStake, setShowStake] = useState(false);\n  const [showStakeWithdraw, setShowStakeWithdraw] = useState(false);\n  const [showAPY, setShowAPY] = useState(false);\n  const [roiModalData, setRoiModalData] = useState(null);\n\n  const [poolLength, setPoolLength] = useState(0);\n  const [farms, setFarms] = useState([]);\n  const [inactiveFarms, setInactiveFarms] = useState([]);\n  const [stakingOnly, setStakingOnly] = useState([]);\n  const [stakeData, setStakeData] = useState(null);\n  const [stakeValue, setStakeValue] = useState(0);\n  const [referrer, setReferrer] = useState('0x0000000000000000000000000000000000000000');\n\n  const [stakeConfirmation, setStakeConfimation] = useState(0);\n  const [showTransactionModal, setShowTransactionModal] = useState(false);\n  const [txHash, setTxHash] = useState('');\n  const [lpDetails, setLpTokenDetails] = useState(null);\n  const [niobStats, setNiobStats] = useState(null);\n\n\n  //staking only\n  const handleChange = () => setChecked(!checked);\n\n  const closeTransactionModal = () => {\n    setShowTransactionModal(false);\n    setFarms([]);\n    setInactiveFarms([]);\n    setStakingOnly([]);\n    init();\n    window.location.reload();\n  }\n\n  const cloaseRoiModal = () => {\n    setShowAPY(false);\n  }\n  const handleRoiModal = (data, lpDetails, niobId) => {\n    // console.log(data, lpDetails);\n    setNiobStats(niobId);\n    setRoiModalData(data);\n    setLpTokenDetails(lpDetails);\n    setShowAPY(true);\n  }\n\n  const handleIndex = (index) => {\n    if (currentIndex === index) {\n      setCurrentIndex(-1);\n    } else {\n      setCurrentIndex(index);\n    }\n  };\n\n\n  const getValue = async (address) => {\n    if (address != undefined) {\n      try {\n        const reserves = await ExchangeService.getReserves(ANCHOR_BUSD_LP);\n        let val = reserves[1] / reserves[0];\n        val = val || 0;\n        return (val.toFixed(3));\n\n      } catch (error) {\n        console.log(error)\n      }\n    }\n\n  }\n\n\n  //this will re-arrange locked pool to desired position\n  const getSortedPools = (array, from, to) => {\n    if (to === from) return array;\n\n    let target = array[from];\n    let increment = to < from ? -1 : 1;\n\n    for (let k = from; k != to; k += increment) {\n      array[k] = array[k + increment];\n    }\n    array[to] = target;\n    return array;\n  }\n\n  useEffect(() => {\n    init();\n    return () => {\n      setFarms([]);\n      setInactiveFarms([]);\n    }\n  }, [isUserConnected]);\n\n  const init = async () => {\n    try {\n      dispatch(startLoading());\n      let ref = await ReferralsServices.getReferrer(isUserConnected);\n      if (ref === '0x0000000000000000000000000000000000000000') {\n        if (referralAddress && referralAddress !== '0x0000000000000000000000000000000000000000') {\n          ref = referralAddress;\n        }\n        setReferrer(ref);\n      }\n      const pL = Number(await FarmService.poolLength());\n      // console.log('qq', pL);\n      setPoolLength(pL);\n      // let farmsTemp = [];\n      dispatch(stopLoading());\n      let activePoolsToSort = [];\n      let stakingOnlyArrayToSort = [];\n      for (let i = 0; i < pL; i++) {\n\n        const poolInfo = await FarmService.poolInfo(i, '2');\n        const niobId = await FarmService.niobId();\n        const userInfo = await FarmService.userInfo(i, isUserConnected);\n        const dollarVal = await getValue(poolInfo.lpToken);\n        if (poolInfo) {\n          if (Number(poolInfo.allocPoint) === 0) {\n            setInactiveFarms(inactiveFarms => [...inactiveFarms, { poolInfo, userInfo, pid: i, isLocked: niobId == i ? true : false, dollarVal }]);\n          } else {\n            if (Number(userInfo.amount) > 0) {\n              // stakingOnlyArrayToSort.push({ poolInfo, userInfo, pid: i, niobId })\n              setStakingOnly(stakingOnly => [...stakingOnly, { poolInfo, userInfo, pid: i, isLocked: false, dollarVal }]);\n            }\n            // activePoolsToSort.push({ poolInfo, userInfo, pid: i, niobId })\n            setFarms(farms => [...farms, { poolInfo, userInfo, pid: i, niobId, isLocked: false, dollarVal }]);\n          }\n        }\n      }\n\n      // // this x is the current postion of lockedNiobPool which we use to change it's position up to second later\n      // let lockedNiobIndex =  activePoolsToSort.findIndex(x => x.pid == x.niobId)\n      // // this will change position of lockedNiobPool to index 1\n      // let sortedAllPools = getSortedPools(activePoolsToSort, lockedNiobIndex, 1);\n      // //Now get unlocked niob pool details\n      // const unlockedNiobPool = sortedAllPools.find(pool => pool.pid == '6');\n      // // again get index of lockedNiobPool\n      // let newlockedNiobIndex =  sortedAllPools.findIndex(x => x.pid == x.niobId)\n      // //firstly lets fix realAllocPoint of lockedNiobPool \n      // let realAllocPointOfLockedPool = sortedAllPools[newlockedNiobIndex].poolInfo.allocPoint; \n\n      // //Now attach unlockedNiob pool's allocPoint to lockedNiobPool\n      // sortedAllPools[newlockedNiobIndex].poolInfo.allocPoint = unlockedNiobPool.poolInfo.allocPoint; \n      // sortedAllPools[newlockedNiobIndex].poolInfo.displayAllocPoint = realAllocPointOfLockedPool; \n      // // these are the total (also active) farms\n      // // setFarms(sortedAllPools);\n\n      // // these are the staked pools\n      // let lockedNiobIndexStakedOnly =  stakingOnlyArrayToSort.findIndex(x => x.pid == x.niobId);\n      // // this will change position of lockedNiobPool to index 1\n      // // check if user has staked locked pool, if yes only then sort the pools\n      // let sortedStakingOnlyPools;\n      // if (lockedNiobIndexStakedOnly !== -1 && stakingOnlyArrayToSort.length > 1) {\n      //      sortedStakingOnlyPools = getSortedPools(stakingOnlyArrayToSort, lockedNiobIndexStakedOnly, 1);\n      //     //  setStakingOnly(sortedStakingOnlyPools);\n      // }\n      // // else set the stakingOnly array as it is\n      // else {\n      //   // setStakingOnly(stakingOnlyArrayToSort);\n      // }\n\n      // these are the inactive pools\n\n    } catch (err) {\n      console.log(err)\n    }\n  };\n  const closeStakeModal = () => {\n    setShowStakeWithdraw(false);\n    setShowStake(false);\n    setStakeData(null);\n    setStakeValue(0);\n  }\n  const handleROIModal = () => {\n    setShowStakeWithdraw(false);\n    setShowStake(false);\n    setStakeData(null);\n    setStakeValue(0);\n  }\n  const stakeHandle = (data, type) => {\n    if (type === 'withdraw') {\n      setStakeData(data);\n      setShowStakeWithdraw(true);\n    }\n    if (type === 'deposit') {\n      setStakeData(data);\n      setShowStake(true);\n    }\n  }\n\n  const handleStakeValue = e => {\n    const value = e.target.value;\n    setStakeValue(value);\n  }\n  const setMaxValue = () => setStakeValue(stakeData.balance);\n\n  const harvest = async (pid, lpTokenName) => {\n    const acc = await ContractServices.getDefaultAccount();\n    if (acc && acc.toLowerCase() !== isUserConnected.toLowerCase()) {\n      return toast.error('Wallet address doesn`t match!');\n    }\n\n    if (stakeConfirmation) {\n      return toast.info('Transaction is processing!');\n    }\n    setStakeConfimation(true);\n    const data = {\n      pid: pid.toString(),\n      amount: 0,\n      referrer: referrer,\n      from: isUserConnected\n    }\n    try {\n      dispatch(startLoading());\n      const result = await FarmService.deposit(data);\n      dispatch(stopLoading());\n      setStakeConfimation(false);\n\n      if (result) {\n        setTxHash(result);\n        setShowTransactionModal(true);\n\n        const data = {\n          message: `Harvest ${lpTokenName}`,\n          tx: result\n        };\n        dispatch(addTransaction(data));\n      }\n    } catch (err) {\n      dispatch(stopLoading());\n      setStakeConfimation(false);\n\n      const message = await ContractServices.web3ErrorHandle(err);\n      toast.error(message);\n    }\n  }\n\n  const depositWithdraw = async (type, isLocked) => {\n    const acc = await ContractServices.getDefaultAccount();\n    if (acc && acc.toLowerCase() !== isUserConnected.toLowerCase()) {\n      return toast.error('Wallet address doesn`t match!');\n    }\n    const value = Number(stakeValue);\n    if (isNaN(value)) {\n      return toast.error('Enter vaild amount!');\n    }\n    if (value <= 0) {\n      return toast.error('Enter amount greater than zero!');\n    }\n    if (value > stakeData.balance) {\n      return toast.error('Value is greater than max value!');\n    }\n    if (!stakeData) {\n      return toast.info('Reload page try again!');\n    }\n    if (stakeConfirmation) {\n      return toast.info('Transaction is processing!');\n    }\n    setStakeConfimation(true);\n    if (type === 'deposit') {\n      const amount = BigNumber(value * 10 ** stakeData.lpTokenDetails.decimals).toFixed();\n      // const deposit = '10000';\n\n      const data = {\n        pid: stakeData.pid.toString(),\n        amount,\n        referrer: referrer,\n        from: isUserConnected,\n      }\n      // console.log(data, 'before deposit----------farm--------------');\n      try {\n        closeStakeModal();\n        dispatch(startLoading());\n        const result = await FarmService.deposit(data);\n        dispatch(stopLoading());\n        setStakeConfimation(false);\n\n        if (result) {\n          setTxHash(result);\n          setShowTransactionModal(true);\n\n          const data = {\n            message: `Deposit ${stakeData.lpTokenDetails.lpTokenName}`,\n            tx: result\n          };\n          dispatch(addTransaction(data));\n        }\n      } catch (err) {\n        console.log(err, 'lp deposit');\n        dispatch(stopLoading());\n        setStakeConfimation(false);\n\n        const message = await ContractServices.web3ErrorHandle(err);\n        toast.error(message);\n      }\n    }\n    if (type === 'withdraw') {\n      const amount = BigNumber(value * 10 ** stakeData.lpTokenDetails.decimals).toFixed();\n\n      const data = {\n        pid: stakeData.pid.toString(),\n        amount,\n        from: isUserConnected\n      }\n      // console.log(data, 'before withdraw----------farm--------------');\n      try {\n        closeStakeModal();\n        dispatch(startLoading());\n        let result;\n        if (isLocked) {\n          console.log('zzz', data);\n          result = await FarmService.withdrawNiob(data);\n        } else {\n          result = await FarmService.withdraw(data);\n        }\n        dispatch(stopLoading());\n        setStakeConfimation(false);\n\n        if (result) {\n          setTxHash(result);\n          setShowTransactionModal(true);\n\n          const data = {\n            message: `Withdraw ${stakeData.lpTokenDetails.lpTokenName}`,\n            tx: result\n          };\n          dispatch(addTransaction(data));\n        }\n      } catch (err) {\n        console.log(err, 'lp withdraw');\n        dispatch(stopLoading());\n        setStakeConfimation(false);\n\n        const message = await ContractServices.web3ErrorHandle(err);\n        toast.error(message);\n\n      }\n    }\n  }\n  return (\n    <div className=\"container_wrap farmpln poolGalaxy_cont\">\n      <div className=\"upper_text\">\n        <Container>\n          <Row>\n            <Col xl={6} className=\"pl-0\">\n              <div className=\"farm_title\">\n                <div className=\"farm_icon\">\n                  <img src={PoolIcon} />\n                </div>\n                <div className=\"desc\">\n                  <h1 className=\"title_hd\">Pool Galaxy</h1>\n                  <p>\n                    Stake NIOB to earn new tokens. You can unstake at any time!\n                    Rewards are calculated per block.\n                  </p>\n                </div>\n              </div>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n      <div className=\"farm_srchbar\">\n        <Container>\n          <div className=\"contain_area\">\n            <Form className=\"srchbar_area\">\n              <div className=\"serch_field\">\n                <Form.Label>Search</Form.Label>\n                <InputGroup>\n                  <FormControl id=\"search\" placeholder=\"Niob\" />\n                  <Button className=\"search_btn\">\n                    <img src={Searchicon} />\n                  </Button>\n                </InputGroup>\n              </div>\n              <div className=\"staked_only\">\n                <Form.Check\n                  type=\"checkbox\"\n                  id=\"stakecheck\"\n                  label=\"Staked only\"\n                  checked={checked}\n                  onChange={handleChange}\n                />\n                <Button className=\"btn harvest_btn\">Harvest all</Button>\n              </div>\n            </Form>\n            <div className=\"frm_plnet_list\">\n              <div className=\"farm_tabs\">\n                <Tabs\n                  activeKey={tab}\n                  id=\"frmplanet_tab\"\n                  variant=\"pills\"\n                //   onSelect={handleTab}\n                >\n\n                  <Tab eventKey=\"active\" title=\"Active\">\n                    <div className=\"planet_list active\">\n                      <Row>\n                        <Col xl={12}>\n                          {checked && (\n                            <div className=\"planet_list_view\">\n                              <div className=\"headingStyle\">\n                                <h6>Token</h6>\n                                <h6>APR</h6>\n                                <h6>Total Staked</h6>\n                                <h6 className=\"earnTxt\">Earned</h6>\n                              </div>\n                              {stakingOnly.map((farm, index) =>\n                                <GalaxyCard\n                                  key={index}\n                                  index={index}\n                                  harvestOnClick={harvest}\n                                  currentIndex={currentIndex}\n                                  handleChange={() => handleIndex(index)}\n                                  stakeHandle={stakeHandle}\n                                  handleRoiModal={handleRoiModal}\n                                  status={true}\n                                  farm={farm}\n                                  icon1={NIOB}\n                                  icon2={BUSD}\n                                  title={`NIOB`}\n                                  title1={`BUSD`}\n                                />\n                              )}\n                            </div>\n                          )}\n                          {!checked && (\n                            <div className=\"planet_list_view\">\n                              <div className=\"headingStyle\">\n                                <h6>Token</h6>\n                                <h6>APR</h6>\n                                <h6>Total Staked</h6>\n                                <h6 className=\"earnTxt\">Earned</h6>\n                              </div>\n                              {farms.map((farm, index) =>\n                                <GalaxyCard\n                                  key={index}\n                                  index={index}\n                                  harvestOnClick={harvest}\n                                  currentIndex={currentIndex}\n                                  handleChange={() => handleIndex(index)}\n                                  stakeHandle={stakeHandle}\n                                  handleRoiModal={handleRoiModal}\n                                  status={true}\n                                  farm={farm}\n                                  icon1={NIOB}\n                                  icon2={BUSD}\n                                  title={`NIOB`}\n                                  title1={`BUSD`}\n                                />\n                              )}\n                            </div>\n                          )}\n                        </Col>\n                      </Row>\n                    </div>\n                  </Tab>\n\n                  <Tab eventKey=\"inactive\" title=\"Inactive\">\n                    <div className=\"planet_list active\">\n                      <Row>\n                        <Col xl={12}>\n                          <div className=\"planet_list_view\">\n                            <div className=\"headingStyle\">\n                              <h6>Token</h6>\n                              <h6>APR</h6>\n                              <h6>Total Staked</h6>\n                              <h6 className=\"earnTxt\">Earned</h6>\n                            </div>\n                            {inactiveFarms.map((farm, index) =>\n                              <GalaxyCard\n                                key={index}\n                                index={index}\n                                harvestOnClick={harvest}\n                                currentIndex={currentIndex}\n                                handleChange={() => handleIndex(index)}\n                                stakeHandle={stakeHandle}\n                                handleRoiModal={handleRoiModal}\n                                status={false}\n                                farm={farm}\n                                icon1={NIOB}\n                                icon2={BUSD}\n                                title={`NIOB`}\n                                title1={`BUSD`}\n                              />\n                            )}\n                          </div>\n                        </Col>\n                      </Row>\n                    </div>\n                  </Tab>\n\n                </Tabs>\n              </div>\n            </div>\n          </div>\n        </Container>\n      </div>\n      <GetLPToken stakeValue={stakeValue} stakeData={stakeData} stakeConfirmation={stakeConfirmation} handleStakeValue={handleStakeValue} depositWithdraw={depositWithdraw} setMaxValue={setMaxValue} show={showStake} closeStakeModal={handleClose} />\n      <WithDrawLPToken stakeValue={stakeValue} stakeData={stakeData} stakeConfirmation={stakeConfirmation} handleStakeValue={handleStakeValue} depositWithdraw={depositWithdraw} setMaxValue={setMaxValue} show={showStakeWithdraw} closeStakeModal={handleWithdrawClose} address={isUserConnected} isNiobWithdrawabe={true} />\n      <TransactionalModal show={showTransactionModal} handleClose={closeTransactionModal} txHash={txHash} />\n      {showAPY && <ReturnInvest\n        show={showAPY}\n        niobId={niobStats}\n        roiModalData={roiModalData}\n        lpDetails={lpDetails}\n        handleClose={cloaseRoiModal}\n      />}\n    </div>\n  );\n}\n\nexport default PoolGalaxy;\n","/data/nm/SaitaSwap/src/pages/FarmPlanets/FarmPlanets.js",["541","542","543","544","545","546","547","548","549","550","551","552","553","554"],"import Button from \"@restart/ui/esm/Button\";\nimport React, { useEffect, useState } from \"react\";\nimport {\n  Container,\n  Col,\n  Row,\n  Form,\n  InputGroup,\n  FormControl,\n  Table,\n} from \"react-bootstrap\";\nimport {\n  addTransaction,\n  searchTokenByNameOrAddress,\n  startLoading,\n  stopLoading,\n} from \"../../redux/actions\";\nimport { ReferralsServices } from \"../../services/ReferralsServices\";\nimport { FarmService } from \"../../services/FarmService\";\nimport { toast } from \"../../components/Toast/Toast\";\nimport { ContractServices } from \"../../services/ContractServices\";\nimport BigNumber from \"bignumber.js\";\nimport GetLPToken from \"../../components/GetLPToken/GetLPToken\";\n\nimport { Tabs, Tab } from \"react-bootstrap\";\nimport { rootName } from \"../../constant\";\nimport Searchicon from \"../../assets/images/search.png\";\nimport FarmIcon from \"../../assets/images/Farm-Header-Logo.svg\";\nimport \"./FarmPlanets.scss\";\nimport PlanetCard from \"../../components/PlanetCard/PlanetCard\";\nimport NIOB from \"../../assets/images/token_icons/NIOB.svg\";\nimport BUSD from \"../../assets/images/token_icons/BUSD-Token.svg\";\nimport ANCHOR from \"../../assets/images/token_icons/ANCHOR-Token.svg\";\nimport { useDispatch } from \"react-redux\";\nimport { useSelector } from \"react-redux\";\nimport WithDrawLPToken from \"../../components/GetLPToken/WithDrawLPToken\";\nimport TransactionalModal from \"../../components/TransactionalModal/TransactionalModal\";\nimport TransactionModal from \"../../components/TransactionModal/TransactionModal\";\n\nconst FarmPlanets = (props) => {\n  const {\n    match: { params },\n    history,\n  } = props;\n  const { tab } = params;\n  const handleTab = (data) => {\n    history.push(`${rootName}/farmplanets/${data}`);\n  };\n\n  const handleClose = () => {\n    setStakeValue(null);\n    setShowStake(false);\n  };\n  const handleWithdrawClose = () => {\n    setStakeValue(null);\n    setShowStakeWithdraw(false);\n  };\n\n  const dispatch = useDispatch();\n  const isUserConnected = useSelector((state) => state.persist.isUserConnected);\n  const referralAddress = useSelector((state) => state.persist.referralAddress);\n\n  const [checked, setChecked] = useState(false);\n  const [active, setActive] = useState(true);\n  const [currentIndex, setCurrentIndex] = useState(-1);\n  const [showStake, setShowStake] = useState(false);\n  const [showStakeWithdraw, setShowStakeWithdraw] = useState(false);\n  const [showAPY, setShowAPY] = useState(false);\n  const [roiModalData, setRoiModalData] = useState(null);\n\n  const [poolLength, setPoolLength] = useState(0);\n  const [farms, setFarms] = useState([]);\n  const [inactiveFarms, setInactiveFarms] = useState([]);\n  const [stakingOnly, setStakingOnly] = useState([]);\n  const [stakeData, setStakeData] = useState(null);\n  const [stakeValue, setStakeValue] = useState(0);\n  const [referrer, setReferrer] = useState(\n    \"0x0000000000000000000000000000000000000000\"\n  );\n\n  const [stakeConfirmation, setStakeConfimation] = useState(0);\n  const [showTransactionModal, setShowTransactionModal] = useState(false);\n  const [txHash, setTxHash] = useState(\"\");\n  const [lpDetails, setLpTokenDetails] = useState(null);\n  const [selectedPairId, setSelectedPairId] = useState();\n\n  //staking only\n  const handleChange = () => setChecked(!checked);\n\n  const closeTransactionModal = () => {\n    setShowTransactionModal(false);\n    setFarms([]);\n    setInactiveFarms([]);\n    setStakingOnly([]);\n    init();\n    window.location.reload();\n  };\n\n  const cloaseRoiModal = () => {\n    setShowAPY(false);\n  };\n  const handleRoiModal = (data, lpDetails) => {\n    setRoiModalData(data);\n    setLpTokenDetails(lpDetails);\n    setShowAPY(true);\n  };\n\n  const handleIndex = (index) => {\n    if (currentIndex === index) {\n      setCurrentIndex(-1);\n    } else {\n      setCurrentIndex(index);\n    }\n  };\n\n  useEffect(() => {\n    init();\n    return () => {\n      setFarms([]);\n      setInactiveFarms([]);\n    };\n  }, [isUserConnected]);\n\n  const init = async () => {\n    try {\n      dispatch(startLoading());\n      let ref = await ReferralsServices.getReferrer(isUserConnected);\n      if (ref === \"0x0000000000000000000000000000000000000000\") {\n        if (\n          referralAddress &&\n          referralAddress !== \"0x0000000000000000000000000000000000000000\"\n        ) {\n          ref = referralAddress;\n        }\n        setReferrer(ref);\n      }\n      const pL = Number(await FarmService.poolLength());\n      setPoolLength(pL);\n      dispatch(stopLoading());\n      for (let i = 0; i < pL; i++) {\n        const poolInfo = await FarmService.poolInfo(i, \"1\");\n        const userInfo = await FarmService.userInfo(i, isUserConnected);\n        if (poolInfo) {\n          if (Number(poolInfo.allocPoint) === 0) {\n            setInactiveFarms((inactiveFarms) => [\n              ...inactiveFarms,\n              { poolInfo, userInfo, pid: i },\n            ]);\n          } else {\n            if (Number(userInfo.amount) > 0) {\n              // console.log('index', i);\n              setStakingOnly((stakingOnly) => [\n                ...stakingOnly,\n                { poolInfo, userInfo, pid: i },\n              ]);\n            }\n            setFarms((farms) => [...farms, { poolInfo, userInfo, pid: i }]);\n          }\n        }\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  const closeStakeModal = () => {\n    setShowStakeWithdraw(false);\n    setShowStake(false);\n    setStakeData(null);\n    setStakeValue(0);\n  };\n\n  const stakeHandle = (data, type) => {\n    // setSelectedPairId is used for getting the id of the farm that user clicked (and staked) to\n    // change the values of only single farm --will be implemented in future\n    setSelectedPairId(data.pid);\n    if (type === \"withdraw\") {\n      setStakeData(data);\n      setShowStakeWithdraw(true);\n    }\n    if (type === \"deposit\") {\n      setStakeData(data);\n      setShowStake(true);\n    }\n  };\n\n  const handleStakeValue = (e) => {\n    const value = e.target.value;\n    setStakeValue(value);\n  };\n  const setMaxValue = () => setStakeValue(stakeData.balance);\n\n  const harvest = async (pid, lpTokenName) => {\n    const acc = await ContractServices.getDefaultAccount();\n    if (acc && acc.toLowerCase() !== isUserConnected.toLowerCase()) {\n      return toast.error(\"Wallet address doesn`t match!\");\n    }\n\n    if (stakeConfirmation) {\n      return toast.info(\"Transaction is processing!\");\n    }\n    setStakeConfimation(true);\n    const data = {\n      pid: pid.toString(),\n      amount: 0,\n      referrer: referrer,\n      from: isUserConnected,\n    };\n    try {\n      dispatch(startLoading());\n      const result = await FarmService.deposit(data);\n      dispatch(stopLoading());\n      setStakeConfimation(false);\n\n      if (result) {\n        setTxHash(result);\n        setShowTransactionModal(true);\n\n        const data = {\n          message: `Harvest ${lpTokenName}`,\n          tx: result,\n        };\n        dispatch(addTransaction(data));\n      }\n    } catch (err) {\n      console.log(err, \"lp harvest\");\n      dispatch(stopLoading());\n      setStakeConfimation(false);\n\n      const message = await ContractServices.web3ErrorHandle(err);\n      toast.error(message);\n    }\n  };\n\n  // // this function will be used to change the values of single farm that user clicked and staked\n  // const refreshChangedItem = async () => {\n  //   try {\n  //     dispatch(startLoading());\n  //     let ref = await ReferralsServices.getReferrer(isUserConnected);\n  //     if (ref === '0x0000000000000000000000000000000000000000') {\n  //       if (referralAddress && referralAddress !== '0x0000000000000000000000000000000000000000') {\n  //         ref = referralAddress;\n  //       }\n  //       setReferrer(ref);\n  //     }\n  //     const pL = Number(await FarmService.poolLength());\n  //     setPoolLength(pL);\n  //     // let farmsTemp = [];\n  //     dispatch(stopLoading());\n  //     for (let i = 0; i < pL; i++) {\n  //       const poolInfo = await FarmService.poolInfo(i, '1');\n  //       const userInfo = await FarmService.userInfo(i, isUserConnected);\n  //       // console.log(userInfo, '------i------', i);\n  //       if (poolInfo) {\n  //         if (Number(poolInfo.allocPoint) === 0) {\n  //           setInactiveFarms(inactiveFarms => [...inactiveFarms, { poolInfo, userInfo, pid: i }]);\n  //         } else {\n  //           if (Number(userInfo.amount) > 0) {\n  //             console.log('index', i);\n  //           }\n  //           // setStakingOnly(stakingOnly => stakingOnly.pid === selectedPairId ?  { poolInfo, userInfo, pid: i }: stakingOnly);\n  //           // setFarms(farms => [...farms, { poolInfo, userInfo, pid: i }]);\n  //           let newArr = [...farms]; // copying the old farms\n  //           newArr[selectedPairId] = { poolInfo, userInfo, pid: selectedPairId };\n  //           setFarms(newArr);\n  //         }\n  //       }\n  //     }\n  //   } catch (err) {\n  //     console.log(err)\n  //   }\n  // }\n\n  const depositWithdraw = async (type) => {\n    const acc = await ContractServices.getDefaultAccount();\n    if (acc && acc.toLowerCase() !== isUserConnected.toLowerCase()) {\n      return toast.error(\"Wallet address doesn`t match!\");\n    }\n    const value = Number(stakeValue);\n    if (isNaN(value)) {\n      return toast.error(\"Enter vaild amount!\");\n    }\n    if (value <= 0) {\n      return toast.error(\"Enter amount greater than zero!\");\n    }\n    if (value > stakeData.balance) {\n      return toast.error(\"Value is greater than max value!\");\n    }\n    if (!stakeData) {\n      return toast.info(\"Reload page try again!\");\n    }\n    if (stakeConfirmation) {\n      return toast.info(\"Transaction is processing!\");\n    }\n    setStakeConfimation(true);\n    if (type === \"deposit\") {\n      const amount = BigNumber(\n        value * 10 ** stakeData.lpTokenDetails.decimals\n      ).toFixed();\n\n      const data = {\n        pid: stakeData.pid.toString(),\n        amount,\n        referrer: referrer,\n        from: isUserConnected,\n      };\n      // console.log('sending this deposit data' ,data);\n      try {\n        closeStakeModal();\n        dispatch(startLoading());\n        const result = await FarmService.deposit(data);\n        setStakeConfimation(false);\n        dispatch(stopLoading());\n\n        if (result) {\n          setTxHash(result);\n          setShowTransactionModal(true);\n\n          const data = {\n            message: `Deposit ${stakeData.lpTokenDetails.lpTokenName}`,\n            tx: result,\n          };\n          dispatch(addTransaction(data));\n        }\n      } catch (err) {\n        console.log(err, \"lp deposit\");\n        dispatch(stopLoading());\n        setStakeConfimation(false);\n\n        const message = await ContractServices.web3ErrorHandle(err);\n        toast.error(message);\n      }\n    }\n    if (type === \"withdraw\") {\n      const amount = BigNumber(\n        value * 10 ** stakeData.lpTokenDetails.decimals\n      ).toFixed();\n      const data = {\n        pid: stakeData.pid.toString(),\n        amount,\n        from: isUserConnected,\n      };\n      // console.log('sending this withdraw data' , data);\n      try {\n        closeStakeModal();\n        dispatch(startLoading());\n        const result = await FarmService.withdraw(data);\n        dispatch(stopLoading());\n        setStakeConfimation(false);\n\n        if (result) {\n          setTxHash(result);\n          setShowTransactionModal(true);\n\n          const data = {\n            message: `Withdraw ${stakeData.lpTokenDetails.lpTokenName}`,\n            tx: result,\n          };\n          dispatch(addTransaction(data));\n        }\n      } catch (err) {\n        console.log(err, \"lp withdraw\");\n        dispatch(stopLoading());\n        setStakeConfimation(false);\n\n        const message = await ContractServices.web3ErrorHandle(err);\n        toast.error(message);\n      }\n    }\n  };\n\n  return (\n    <div className=\"container_wrap farmpln frm_plnet_disply\">\n      <div className=\"upperBox\">\n        <Container>\n          <div className=\"upper_text\">\n            <Row>\n              <Col xl={6} className=\"pl-0\">\n                <div className=\"farm_title\">\n                  <div className=\"farm_icon\">\n                    <img src={FarmIcon} />\n                  </div>\n                  <div className=\"desc\">\n                    <h1 className=\"title_hd\">Farms</h1>\n                    <p>\n                      There is so much to explore! SaitaSwap offers multiple\n                      farming oppurtunities to you. Get amazing rewards by\n                      staking your LP tokens in return for additional SAITAMA\n                      Tokens.\n                    </p>\n                  </div>\n                </div>\n              </Col>\n            </Row>\n          </div>\n        </Container>\n      </div>\n      <div className=\"farm_srchbar\">\n        <Container>\n          <div className=\"contain_area\">\n            <Form className=\"srchbar_area\">\n              <div className=\"serch_field\">\n                <Form.Label>Search</Form.Label>\n                <InputGroup>\n                  <FormControl id=\"search\" placeholder=\"Saitama\" />\n                  <Button className=\"search_btn\">\n                    <img src={Searchicon} />\n                  </Button>\n                </InputGroup>\n              </div>\n              <div className=\"staked_only\">\n                <Form.Check\n                  type=\"checkbox\"\n                  id=\"stakecheck\"\n                  label=\"Staked only\"\n                  checked={checked}\n                  onChange={handleChange}\n                />\n                <Button className=\"btn harvest_btn\">Harvest all</Button>\n              </div>\n            </Form>\n            <div className=\"frm_plnet_list\">\n              <div className=\"farm_tabs\">\n                <Tabs\n                  activeKey={tab}\n                  id=\"frmplanet_tab\"\n                  variant=\"pills\"\n                  onSelect={handleTab}\n                >\n                  <Tab eventKey=\"active\" title=\"Active\">\n                    <div className=\"planet_list active\">\n                      <Row>\n                        <Col xl={12}>\n                          {checked && (\n                            <div className=\"planet_list_view\">\n                              <Table responsive>\n                                <tbody>\n                                  {stakingOnly.map((farm, index) => (\n                                    <PlanetCard\n                                      key={index}\n                                      index={index}\n                                      harvestOnClick={harvest}\n                                      currentIndex={currentIndex}\n                                      handleChange={() => handleIndex(index)}\n                                      stakeHandle={stakeHandle}\n                                      handleRoiModal={handleRoiModal}\n                                      status={true}\n                                      farm={farm}\n                                      icon1={NIOB}\n                                      icon2={BUSD}\n                                      title={`NIOB`}\n                                      title1={`BUSD`}\n                                    />\n                                  ))}\n                                </tbody>\n                              </Table>\n                            </div>\n                          )}\n\n                          {!checked && (\n                            <div className=\"planet_list_view\">\n                              <Table responsive>\n                                <tbody>\n                                  {farms.map((farm, index) => (\n                                    <PlanetCard\n                                      key={index}\n                                      index={index}\n                                      harvestOnClick={harvest}\n                                      currentIndex={currentIndex}\n                                      handleChange={() => handleIndex(index)}\n                                      stakeHandle={stakeHandle}\n                                      handleRoiModal={handleRoiModal}\n                                      status={true}\n                                      farm={farm}\n                                      icon1={NIOB}\n                                      icon2={BUSD}\n                                      title={`NIOB`}\n                                      title1={`BUSD`}\n                                    />\n                                  ))}\n                                </tbody>\n                              </Table>\n                            </div>\n                          )}\n                        </Col>\n                      </Row>\n                    </div>\n                  </Tab>\n\n                  <Tab eventKey=\"inactive\" title=\"Inactive\">\n                    <div className=\"planet_list active\">\n                      <Row>\n                        <Col xl={12}>\n                          <div className=\"planet_list_view\">\n                            {inactiveFarms.map((farm, index) => (\n                              <PlanetCard\n                                key={index}\n                                index={index}\n                                harvestOnClick={harvest}\n                                currentIndex={currentIndex}\n                                handleChange={() => handleIndex(index)}\n                                stakeHandle={stakeHandle}\n                                handleRoiModal={handleRoiModal}\n                                status={true}\n                                farm={farm}\n                                icon1={NIOB}\n                                icon2={BUSD}\n                                title={`NIOB`}\n                                title1={`BUSD`}\n                              />\n                            ))}\n                          </div>\n                        </Col>\n                      </Row>\n                    </div>\n                  </Tab>\n                </Tabs>\n              </div>\n            </div>\n          </div>\n        </Container>\n      </div>\n      <GetLPToken\n        stakeValue={stakeValue}\n        stakeData={stakeData}\n        stakeConfirmation={stakeConfirmation}\n        handleStakeValue={handleStakeValue}\n        depositWithdraw={depositWithdraw}\n        setMaxValue={setMaxValue}\n        show={showStake}\n        closeStakeModal={handleClose}\n      />\n      <WithDrawLPToken\n        stakeValue={stakeValue}\n        stakeData={stakeData}\n        stakeConfirmation={stakeConfirmation}\n        handleStakeValue={handleStakeValue}\n        depositWithdraw={depositWithdraw}\n        setMaxValue={setMaxValue}\n        show={showStakeWithdraw}\n        closeStakeModal={handleWithdrawClose}\n        isNiobWithdrawabe={false}\n      />\n      <TransactionalModal\n        show={showTransactionModal}\n        handleClose={closeTransactionModal}\n        txHash={txHash}\n      />\n    </div>\n  );\n};\n\nexport default FarmPlanets;\n","/data/nm/SaitaSwap/src/redux/actions/index.js",[],"/data/nm/SaitaSwap/src/redux/actions/LoadingActions.js",[],"/data/nm/SaitaSwap/src/redux/actions/PersistActions.js",["555"],"import packageJson from \"../../../package.json\";\nimport { EVENTS } from \"../../constant\";\nimport { ContractServices } from \"../../services/ContractServices\";\n\n/** seting action types */\nexport const actionTypes = {\n  USER_CONNECTED: \"USER_CONNECTED\",\n  LOGOUT: \"LOGOUT\",\n  TOKEN_LIST_ADD: \"TOKEN_LIST_ADD\",\n  TOKEN_LIST_DEL: \"TOKEN_LIST_DEL\",\n  SAVE_SLIPPAGE_PERCENTAGE: \"SAVE_SLIPPAGE_PERCENTAGE\",\n  SAVE_DEADLINE: \"SAVE_DEADLINE\",\n  LOGIN_USER_SUCCESS: \"LOGIN_USER_SUCCESS\",\n  SAVE_USER_LP_TOKENS: \"SAVE_USER_LP_TOKENS\",\n  SAVE_USER_RECENT_TRANSACTIONS: \"SAVE_USER_RECENT_TRANSACTIONS\",\n  SAVE_REFFRAL_ADDRESS: \"SAVE_REFFRAL_ADDRESS\",\n  CHECK_USER_LPTOKENS: \"CHECK_USER_LPTOKENS\",\n  LOGIN_CONFIRMATION_SREEN: \"LOGIN_CONFIRMATION_SREEN\",\n  LOGOUT_CONFIRMATION_SREEN: \"LOGOUT_CONFIRMATION_SREEN\",\n  SAVE_FOOTER_DATA: \"SAVE_FOOTER_DATA\",\n};\n\nexport const versionManager = () => async (dispatch, getState) => {\n  try {\n    const version = packageJson.version;\n    const react_version = localStorage.getItem(\"react_version\");\n    if (react_version && version !== react_version) {\n      localStorage.clear();\n      window.location.reload();\n    }\n    if (!react_version) {\n      localStorage.setItem(\"react_version\", version);\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n/*\n * Action creators\n */\nexport const login = (data) => {\n  // console.log(\"##hi i am sam\");\n  setTimeout((_) => {\n    document.dispatchEvent(new Event(EVENTS.LOGIN_SUCCESS, {}));\n  }, 100);\n  return {\n    type: actionTypes.USER_CONNECTED,\n    payload: data,\n  };\n};\nexport const logout = () => {\n  ContractServices.setWalletType(\"Metamask\");\n  localStorage.clear();\n  window.location.reload();\n  return {\n    type: actionTypes.LOGOUT,\n  };\n};\n\nexport const tokenListAdd = (data) => {\n  return {\n    type: actionTypes.TOKEN_LIST_ADD,\n    payload: data,\n  };\n};\nexport const tokenListDel = (data) => {\n  return {\n    type: actionTypes.TOKEN_LIST_DEL,\n    payload: data,\n  };\n};\nexport const saveSlippagePercentage = (data) => {\n  return {\n    type: actionTypes.SAVE_SLIPPAGE_PERCENTAGE,\n    payload: data,\n  };\n};\nexport const saveDeadline = (data) => {\n  return {\n    type: actionTypes.SAVE_DEADLINE,\n    payload: data,\n  };\n};\nexport const saveUser = (data) => {\n  return {\n    type: actionTypes.LOGIN_USER_SUCCESS,\n    payload: data,\n  };\n};\nexport const saveUserLpTokens = (data) => {\n  return {\n    type: actionTypes.SAVE_USER_LP_TOKENS,\n    payload: data,\n  };\n};\nexport const checkUserLpTokens = (payload) => {\n  return {\n    type: actionTypes.CHECK_USER_LPTOKENS,\n    payload,\n  };\n};\n\nexport const savereffralAddress = (address) => {\n  return {\n    type: actionTypes.SAVE_REFFRAL_ADDRESS,\n    payload: address,\n  };\n};\n\nexport const addTransaction = (data) => async (dispatch, getState) => {\n  let {\n    persist: { recentTransactions },\n  } = getState();\n  recentTransactions.unshift(data);\n  dispatch({\n    type: actionTypes.SAVE_USER_RECENT_TRANSACTIONS,\n    payload: { recentTransactions },\n  });\n};\n\nexport const removeTokenList = (data) => async (dispatch, getState) => {\n  let {\n    persist: { tokenList },\n  } = getState();\n  const findIndex = tokenList.findIndex(\n    (a) => a.address.toLowerCase() === data.address.toLowerCase()\n  );\n  const tkList = tokenList.splice(findIndex, 1);\n  // console.log(tkList);\n};\n\nexport const loginConfirmationScreen = (data) => {\n  return {\n    type: actionTypes.LOGIN_CONFIRMATION_SREEN,\n  };\n};\n\nexport const logoutConfirmationScreen = (data) => {\n  return {\n    type: actionTypes.LOGOUT_CONFIRMATION_SREEN,\n  };\n};\n\nexport const saveFotterValues = (data) => async (dispatch, getState) => {\n  dispatch({\n    type: actionTypes.SAVE_FOOTER_DATA,\n    payload: data,\n  });\n};\n","/data/nm/SaitaSwap/src/services/UserService.js",[],"/data/nm/SaitaSwap/src/services/ContractServices.js",["556","557","558","559","560","561"],"/data/nm/SaitaSwap/src/services/ExchangeService.js",["562","563","564","565","566"],"/data/nm/SaitaSwap/src/components/ProfileModal/ProfileModal.js",["567"],"import React from \"react\";\nimport { Col, Row, Modal } from \"react-bootstrap\";\nimport CopyIcon from \"../../assets/images/copy.png\";\nimport \"./ProfileModal.scss\";\nimport { useSelector } from \"react-redux\";\nimport { BSC_SCAN } from \"../../constant\";\nimport { toast } from \"../Toast/Toast\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport TolerenceIcon from \"../../assets/images/tolerence.png\";\nimport Button from \"../Button/Button\";\n\nconst ProfileModal = ({ show, handleClose, logout }) => {\n  const isUserConnected = useSelector((state) => state.persist.isUserConnected);\n\n  return (\n    <Modal\n      centered\n      scrollable={true}\n      className=\"connect_wallet\"\n      show={show}\n      onHide={handleClose}\n    >\n      <Modal.Header closeButton>\n        <Modal.Title>Your Wallet</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Row>\n          <Col className=\"baseToken_style\">\n            <div className=\"profileModal_sec\">\n              <p>{isUserConnected}</p>\n              <div className=\"copySec\">\n                <a\n                  href={`${BSC_SCAN}/address/${isUserConnected}`}\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                >\n                  View on EtherScan\n                  <img src={TolerenceIcon} />\n                </a>\n                <div className=\"ms-3\">\n                  <span>Copy</span>&nbsp;\n                  <CopyToClipboard\n                    text={`${BSC_SCAN}/address/${isUserConnected}`}\n                    onCopy={() => toast.success(\"Copied!\")}\n                  >\n                    <img className=\"copy-icon\" alt=\"copy\" src={CopyIcon} />\n                  </CopyToClipboard>\n                </div>\n              </div>\n              <div className=\"text-center\">\n                <Button\n                  className=\"logout_btn mx-auto\"\n                  onClick={logout}\n                  title=\"Logout\"\n                />\n              </div>\n            </div>\n          </Col>\n        </Row>\n      </Modal.Body>\n    </Modal>\n  );\n};\n\nexport default ProfileModal;\n","/data/nm/SaitaSwap/src/components/Button/Button.js",["568"],"import \"./Button.scss\";\n\nconst Button = (props) => {\n  return (\n    <button\n      onClick={props.onClick}\n      title={props.title}\n      className={`btn buttonStyle ${props.className}`}\n      disabled={props.disabled}\n    >\n      {props.title} {props.icon ? <img src={props.icon} /> : \"\" } \n    </button>\n  );\n};\n\nexport default Button;\n","/data/nm/SaitaSwap/src/components/ConnectWallet/ConnectWallet.js",["569","570","571","572","573","574","575","576","577"],"import React, { useEffect } from \"react\";\nimport { Col, Row, Modal, Button } from \"react-bootstrap\";\nimport \"./ConnectWallet.scss\";\nimport { useDispatch } from \"react-redux\";\nimport { ContractServices } from \"../../services/ContractServices\";\nimport { login } from \"../../redux/actions\";\nimport { toast } from \"../../components/Toast/Toast\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\n\nimport iconMatamask from \"../../assets/images/metamask_icon.png\";\nimport iconCoinbase from \"../../assets/images/coinbase_icon.svg\";\nimport iconWallet from \"../../assets/images/wallet_icon.svg\";\nimport TokenPocket from \"../../assets/images/tp.png\";\nimport TrustWallet from \"../../assets/images/trust-wallet.png\";\nimport Binance from \"../../assets/images/Binance-chain.png\";\nimport MathWallet from \"../../assets/images/mathwallet.png\";\n\nconst ConnectWallet = ({ show, handleClose }) => {\n  const dispatch = useDispatch();\n\n  const loginCall = async (walletType, type) => {\n    try {\n      if (walletType === \"BinanceChain\") {\n        const account = await ContractServices.isBinanceChainInstalled();\n        if (account) {\n          dispatch(login({ account, walletType }));\n          handleClose(false);\n          window.location.reload();\n        }\n      } else if (walletType === \"Walletconnect\") {\n        try {\n          const d = await ContractServices.callWeb3ForWalletConnect();\n          const account = d.provider.accounts[0];\n          console.log(\"in connect wallet\", account, d);\n          d.provider.on(\"connect\", (_) =>\n            console.log(\"congrats u r connected..\")\n          );\n          d.provider.on(\"accountsChanged\", async (accounts) => {\n            console.log(\"account changed on remote\");\n            setTimeout(function () {\n              window.location.reload();\n            }, 500);\n            let account = accounts[0];\n            console.log(\"in connect wallet1\", account);\n            dispatch(login({ account, walletType }));\n            handleClose(false);\n            //return;\n            window.location.reload();\n          });\n          dispatch(login({ account, walletType }));\n          \n          handleClose(false);\n          //  window.location.reload();\n        } catch (error) {\n          console.log(error, \"wallet error\");\n        }\n      } else {\n        const account = await ContractServices.isMetamaskInstalled(type);\n        if (account) {\n          dispatch(login({ account, walletType }));\n          handleClose(false);\n          // window.location.reload();\n        }\n      }\n    } catch (err) {\n      toast.error(err.message);\n    }\n  };\n  useEffect(() => {\n    (async () => {\n      if (localStorage.getItem(\"walletconnect\"))\n        loginCall(\"Walletconnect\", \"Walletconnect\");\n    })();\n  }, []);\n\n  return (\n    <Modal\n      centered\n      scrollable={true}\n      className=\"connect_wallet\"\n      show={show}\n      onHide={handleClose}\n    >\n      <Modal.Header closeButton>\n        <Modal.Title>Connect to a wallet</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Row>\n          <Col className=\"baseToken_style token_strut\">\n            <ul>\n              <li>\n                <Button onClick={() => loginCall(\"Metamask\", \"Metamask\")}>\n                  MetaMask\n                  <span>\n                    <img src={iconMatamask} />\n                  </span>{\" \"}\n                </Button>\n              </li>\n              {/* <li>\n                <Button>\n                  CoinBase Wallet\n                  <span>\n                    <img src={iconCoinbase} />\n                  </span>{\" \"}\n                </Button>\n              </li> */}\n              <li>\n                <Button\n                  onClick={() => loginCall(\"Walletconnect\", \"Walletconnect\")}\n                >\n                  WalletConnect\n                  <span>\n                    <img src={iconWallet} />\n                  </span>{\" \"}\n                </Button>\n              </li>\n\n              {/* <li>\n                <Button>\n                  TrustWallet\n                  <span>\n                    <img src={TrustWallet} />\n                  </span>{\" \"}\n                </Button>\n              </li>\n              <li>\n                <Button>\n                  MathWallet\n                  <span>\n                    <img src={MathWallet} />\n                  </span>{\" \"}\n                </Button>\n              </li>\n              <li>\n                <Button>\n                  TokenPocket\n                  <span>\n                    <img src={TokenPocket} />\n                  </span>{\" \"}\n                </Button>\n              </li>\n              <li>\n                <Button>\n                  Binance Chain Wallet\n                  <span>\n                    <img src={Binance} />\n                  </span>{\" \"}\n                </Button>\n              </li> */}\n            </ul>\n          </Col>\n        </Row>\n      </Modal.Body>\n    </Modal>\n  );\n};\n\nexport default ConnectWallet;\n","/data/nm/SaitaSwap/src/services/ReferralsServices.js",[],"/data/nm/SaitaSwap/src/hooks/getWindowDimensions.js",[],"/data/nm/SaitaSwap/src/components/ScrollTop/ScrollTop.js",["578"],"import React, { Component } from \"react\";\nimport ScrollUp from \"../../assets/images/scroll-up-icon.svg\";\n\nexport default class ScrollTop extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      is_visible: false\n    };\n  }\n\n  componentDidMount() {\n    var scrollComponent = this;\n    document.addEventListener(\"scroll\", function(e) {\n      scrollComponent.toggleVisibility();\n    });\n  }\n\n  toggleVisibility() {\n    if (window.pageYOffset > 100) {\n      this.setState({\n        is_visible: true\n      });\n    } else {\n      this.setState({\n        is_visible: false\n      });\n    }\n  }\n\n  scrollToTop() {\n    window.scrollTo({\n      top: 0,\n      behavior: \"smooth\"\n    });\n  }\n\n  render() {\n    const { is_visible } = this.state;\n    return (\n      <div className=\"scroll_top\">\n        <div onClick={() => this.scrollToTop()}>\n              <img src={ScrollUp} alt={\"icon\"} />\n          </div>\n      </div>\n    );\n  }\n}\n","/data/nm/SaitaSwap/src/services/FarmService.js",["579","580"],"import { MAIN_CONTRACT_LIST } from \"../assets/tokens\";\nimport { toast } from \"../components/Toast/Toast\";\nimport { ContractServices } from \"./ContractServices\";\n\nconst poolLength = async () => {\n  try {\n    const contract = await ContractServices.callContract(\n      MAIN_CONTRACT_LIST.farm.address,\n      MAIN_CONTRACT_LIST.farm.abi\n    );\n    return await contract.methods.poolLength().call();\n  } catch (error) {\n    return error;\n  }\n};\n\nconst poolInfo = async (index, type) => {\n  try {\n    const contract = await ContractServices.callContract(\n      MAIN_CONTRACT_LIST.farm.address,\n      MAIN_CONTRACT_LIST.farm.abi\n    );\n    const result = await contract.methods.poolInfo(index).call();\n    return result;\n  } catch (error) {\n    return error;\n  }\n};\n\nconst niobId = async () => {\n  try {\n    const contract = await ContractServices.callContract(\n      MAIN_CONTRACT_LIST.farm.address,\n      MAIN_CONTRACT_LIST.farm.abi\n    );\n    return await contract.methods.niobId().call();\n  } catch (error) {\n    return error;\n  }\n};\n\nconst farmAndPoolInfo = async (index) => {\n  try {\n    const contract = await ContractServices.callContract(\n      MAIN_CONTRACT_LIST.farm.address,\n      MAIN_CONTRACT_LIST.farm.abi\n    );\n    const result = await contract.methods.poolInfo(index).call();\n    const poolType = await contract.methods.poolType(result.lpToken).call();\n\n    if (poolType === \"1\") {\n      return { farm: result, pool: false };\n    }\n    if (poolType === \"2\") {\n      return { farm: false, pool: result };\n    }\n    return false;\n  } catch (error) {\n    return error;\n  }\n};\nconst totalPoolInfo = async (index, type) => {\n  try {\n    const contract = await ContractServices.callContract(\n      MAIN_CONTRACT_LIST.farm.address,\n      MAIN_CONTRACT_LIST.farm.abi\n    );\n    const result = await contract.methods.poolInfo(index).call();\n    const web3 = await ContractServices.callWeb3();\n    const latest = await web3.eth.getBlockNumber();\n    return { poolInfo: result, latest };\n  } catch (error) {\n    return error;\n  }\n};\n\nconst getLpTokenDetails = async (lpToken) => {\n  try {\n    const contract = await ContractServices.callContract(\n      lpToken,\n      MAIN_CONTRACT_LIST.pair.abi\n    );\n    const decimals = await contract.methods.decimals().call();\n    const token0 = await contract.methods.token0().call();\n    const token1 = await contract.methods.token1().call();\n\n    let symbol0 = await ContractServices.getTokenSymbol(token0);\n    if (symbol0 === \"WETH\") {\n      symbol0 = \"ETH\";\n    }\n\n    let symbol1 = await ContractServices.getTokenSymbol(token1);\n    if (symbol1 === \"WETH\") {\n      symbol1 = \"ETH\";\n    }\n    const lpTokenName = `${symbol0}-${symbol1} LP`;\n    return {\n      token0,\n      token1,\n      symbol0,\n      symbol1,\n      decimals,\n      lpTokenName,\n    };\n  } catch (err) {\n    return err;\n  }\n};\nconst getPoolTokenDetails = async (lpToken) => {\n  try {\n    const decimals = await ContractServices.getDecimals(lpToken);\n\n    let symbol = await ContractServices.getTokenSymbol(lpToken);\n    if (symbol === \"WETH\") {\n      symbol = \"BNB\";\n    }\n\n    return {\n      symbol,\n      lpTokenName: symbol,\n      decimals,\n    };\n  } catch (err) {\n    return err;\n  }\n};\nconst userInfo = async (index, address) => {\n  try {\n    const contract = await ContractServices.callContract(\n      MAIN_CONTRACT_LIST.farm.address,\n      MAIN_CONTRACT_LIST.farm.abi\n    );\n    return await contract.methods.userInfo(index, address).call();\n  } catch (err) {\n    return err;\n  }\n};\n\nconst poolInfoo = async (index, address) => {\n  try {\n    const contract = await ContractServices.callContract(\n      MAIN_CONTRACT_LIST.farm.address,\n      MAIN_CONTRACT_LIST.farm.abi\n    );\n    return await contract.methods.niob().call();\n  } catch (err) {\n    return err;\n  }\n};\n\nconst deposit = async (data) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      let { pid, amount, referrer, from } = data;\n      const contract = await ContractServices.callContract(\n        MAIN_CONTRACT_LIST.farm.address,\n        MAIN_CONTRACT_LIST.farm.abi\n      );\n      const gasPrice = await ContractServices.calculateGasPrice();\n\n      const gas = await contract.methods\n        .deposit(pid, amount)\n        .estimateGas({ from, value: 0 });\n\n      contract.methods\n        .deposit(pid, amount)\n        .send({ from, gasPrice, gas, value: 0 })\n        .on(\"transactionHash\", (hash) => {\n          resolve(hash);\n        })\n        .on(\"receipt\", (receipt) => {\n          resolve(receipt);\n          toast.success(\"Token deposited successfully\");\n        })\n        .on(\"error\", (error, receipt) => {\n          reject(error);\n        });\n    } catch (error) {\n      reject(error);\n      return error;\n    }\n  });\n};\nconst withdraw = async (data) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      let { pid, amount, from } = data;\n      const contract = await ContractServices.callContract(\n        MAIN_CONTRACT_LIST.farm.address,\n        MAIN_CONTRACT_LIST.farm.abi\n      );\n      const gasPrice = await ContractServices.calculateGasPrice();\n\n      const gas = await contract.methods\n        .withdraw(pid, amount)\n        .estimateGas({ from, value: 0 });\n\n      contract.methods\n        .withdraw(pid, amount)\n        .send({ from, gasPrice, gas, value: 0 })\n        .on(\"transactionHash\", (hash) => {\n          resolve(hash);\n        })\n        .on(\"receipt\", (receipt) => {\n          toast.success(\"LP withdrawn successfully.\");\n        })\n        .on(\"error\", (error, receipt) => {\n          reject(error);\n        });\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\nconst withdrawNiob = async (data) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      let { pid, amount, from } = data;\n      const contract = await ContractServices.callContract(\n        MAIN_CONTRACT_LIST.farm.address,\n        MAIN_CONTRACT_LIST.farm.abi\n      );\n      const gasPrice = await ContractServices.calculateGasPrice();\n\n      const gas = await contract.methods\n        .withdrawNiob(amount)\n        .estimateGas({ from, value: 0 });\n\n      contract.methods\n        .withdrawNiob(amount)\n        .send({ from, gasPrice, gas, value: 0 })\n        .on(\"transactionHash\", (hash) => {\n          resolve(hash);\n        })\n        .on(\"receipt\", (receipt) => {\n          toast.success(\"LP withdrawn successfully.\");\n        })\n        .on(\"error\", (error, receipt) => {\n          reject(error);\n        });\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\nconst canHarvest = async (pid, address) => {\n  try {\n    const contract = await ContractServices.callContract(\n      MAIN_CONTRACT_LIST.farm.address,\n      MAIN_CONTRACT_LIST.farm.abi\n    );\n    return await contract.methods.canHarvest(pid, address).call();\n  } catch (err) {\n    return err;\n  }\n};\nconst pendingSaitama = async (pid, address) => {\n  try {\n    const contract = await ContractServices.callContract(\n      MAIN_CONTRACT_LIST.farm.address,\n      MAIN_CONTRACT_LIST.farm.abi\n    );\n    return await contract.methods.pendingSaitama(pid, address).call();\n  } catch (err) {\n    return err;\n  }\n};\n\nconst totalAllocationPoint = async () => {\n  try {\n    const contractFarm = await ContractServices.callContract(\n      MAIN_CONTRACT_LIST.farm.address,\n      MAIN_CONTRACT_LIST.farm.abi\n    );\n    return await contractFarm.methods.totalAllocPoint().call();\n  } catch (err) {\n    return err;\n  }\n};\nconst pantherPerBlock = async () => {\n  try {\n    const contractFarm = await ContractServices.callContract(\n      MAIN_CONTRACT_LIST.farm.address,\n      MAIN_CONTRACT_LIST.farm.abi\n    );\n    // console.log(\"jiiiiiiiiiiiiiiiiiiiiiii\", contractFarm.methods);\n    let bbb = await contractFarm.methods.SaitamaPerBlock().call();\n    console.log(\"bbb\", bbb);\n    return await contractFarm.methods.SaitamaPerBlock().call();\n  } catch (err) {\n    return err;\n  }\n};\nconst getNiob = async (address) => {\n  try {\n    const contract = await ContractServices.callContract(\n      MAIN_CONTRACT_LIST.farm.address,\n      MAIN_CONTRACT_LIST.farm.abi\n    );\n    //const decimals = await ContractServices.getDecimals(address);\n    const res = await contract.methods.getWithdrawableNiob(address).call();\n    let niobTokens = 0;\n    if (res[0]) {\n      niobTokens = res[0] / 10 ** 18;\n    }\n    return niobTokens;\n  } catch (error) {\n    return error;\n  }\n};\nexport const FarmService = {\n  poolLength,\n  poolInfo,\n  getLpTokenDetails,\n  userInfo,\n  deposit,\n  withdraw,\n  withdrawNiob,\n  canHarvest,\n  pendingSaitama,\n  getPoolTokenDetails,\n  poolInfoo,\n  totalAllocationPoint,\n  pantherPerBlock,\n  totalPoolInfo,\n  farmAndPoolInfo,\n  niobId,\n  getNiob,\n};\n","/data/nm/SaitaSwap/src/components/Toast/Toast.js",[],"/data/nm/SaitaSwap/src/components/TransactionalModal/TransactionalModal.js",["581","582"],"import React from \"react\";\nimport { Col, Row, Modal, Button } from \"react-bootstrap\";\nimport \"./TransactionalModal.scss\";\nimport { useSelector } from \"react-redux\";\nimport { BSC_SCAN } from \"../../constant\";\nimport checkicon from \"../../assets/images/check_icon.svg\";\n\nconst TransactionalModal = ({ show, handleClose, txHash }) => {\n  const recentTransactions = useSelector(\n    (state) => state.persist.recentTransactions\n  );\n\n  return (\n    <Modal\n      centered\n      scrollable={true}\n      className=\"connect_wallet\"\n      show={show}\n      onHide={handleClose}\n    >\n      <Modal.Header closeButton>\n        <Modal.Title>Transaction Submitted</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Row>\n          <Col className=\"baseToken_style\">\n            <img src={checkicon} alt=\"icon\" width=\"85\" className=\"icon_color\" />\n            <a\n              href={`${BSC_SCAN}/tx/${txHash}`}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              View on EtherScan\n            </a>\n            <div className=\"no_record\">\n              <button\n                type=\"button\"\n                className=\"btn buttonStyle full\"\n                onClick={handleClose}\n              >\n                Close\n              </button>\n            </div>\n          </Col>\n        </Row>\n      </Modal.Body>\n    </Modal>\n  );\n};\n\nexport default TransactionalModal;\n","/data/nm/SaitaSwap/src/components/TransactionModal/TransactionModal.js",[],"/data/nm/SaitaSwap/src/components/GetLPToken/WithDrawLPToken.js",["583","584","585"],"import React, { useEffect, useState } from 'react'\nimport { Col, Row, Modal, Button, Form, InputGroup, FormControl } from 'react-bootstrap'\nimport './GetLPToken.scss'\nimport { FarmService } from '../../services/FarmService'\nimport { toast } from '../Toast/Toast'\n\n\nconst WithDrawLPToken = props => {\n    const [symbolsArr] = useState([\"e\", \"E\", \"+\", \"-\"]);\n    const [niobWithdrawable, setNiob] = useState(0);\n    useEffect(() => {\n        \n        if (props.isNiobWithdrawabe && props?.stakeData?.isLocked) init();\n    }, []);\n\n    const init = async () => {\n        const niob = await FarmService.getNiob(props.address);\n        setNiob(niob);\n    }\n\n    const checkIfAmountGreaterThanWithdrawable = (value, isLocked) => {\n        // console.log('oooo', props.farms.isLocked);\n        // if ( (props.isNiobWithdrawabe && props?.stakeData?.isLocked) && value > niobWithdrawable) {\n            // toast.error('Amount greater than withdrawable !')\n        // } else {\n            props.depositWithdraw('withdraw', isLocked);\n        // }\n    }\n\n    return (\n        <Modal centered scrollable={true} className=\"connect_wallet get_tokens\" show={props.show} onHide={props.closeStakeModal}>\n            <Modal.Header closeButton>\n                <Modal.Title>Withdraw {props.stakeData?.lpTokenDetails?.lpTokenName} Tokens</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Row>\n                    <Col className=\"lp_tokens\">\n                        <Form className=\"lptokn_area\">\n                            <p className=\"text-end\"><span>{props.stakeData?.balance}</span> {props.stakeData?.lpTokenDetails?.lpTokenName} available</p>\n                            {/* {(props.isNiobWithdrawabe && props?.stakeData?.isLocked) &&\n                                <p className=\"text-end\"><span>{niobWithdrawable ? niobWithdrawable?.toFixed(4) : 0}</span> Withdrawable Niob</p>} */}\n                            <InputGroup>\n                                <FormControl\n                                    onKeyDown={(evt) => { symbolsArr.includes(evt.key) && evt.preventDefault() }}\n                                    type=\"number\"\n                                    id=\"search\"\n                                    autoCorrect=\"off\"\n                                    autoComplete=\"off\"\n                                    placeholder=\"0.0\"\n                                    minLength={1}\n                                    maxLength={79}\n                                    value={props.stakeValue}\n                                    onChange={(e) => props.handleStakeValue(e)}\n                                />\n                                <div className=\"action\">\n                                    <span className=\"token_name\"></span>\n                                    <Button onClick={() => props.setMaxValue()} className=\"max_btn cm_btn\">Max</Button>\n                                </div>\n                            </InputGroup>\n                            <div className=\"confirmation\">\n                                <Button onClick={() => props.closeStakeModal()} className=\"cancel_btn\">Cancel</Button>\n                                {/* <Button disabled={props.stakeConfirmation} onClick={() => props.depositWithdraw('withdraw')} className=\"cm_btn confirm\">Confirm</Button> */}\n                                <Button disabled={props.stakeConfirmation} onClick={() => checkIfAmountGreaterThanWithdrawable(props.stakeValue, props.stakeData.isLocked)} className=\"cm_btn confirm\">Confirm</Button>\n                            </div>\n                        </Form>\n                    </Col>\n                </Row>\n            </Modal.Body>\n        </Modal>\n    )\n}\n\nexport default WithDrawLPToken;\n","/data/nm/SaitaSwap/src/components/GetLPToken/GetLPToken.js",[],"/data/nm/SaitaSwap/src/components/PlanetCard/PlanetCard.js",["586","587","588","589","590","591","592","593","594","595","596","597","598","599","600","601","602","603","604","605","606","607","608","609","610","611","612","613"],"import React, { useEffect, useState } from \"react\";\nimport { Button, Table } from \"react-bootstrap\";\nimport \"./PlanetCard.scss\";\nimport RightArrow from \"../../assets/images/right-arrow.png\";\nimport DownArrow from \"../../assets/images/down-arrow.png\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ExchangeService } from \"../../services/ExchangeService\";\nimport {\n  MAIN_CONTRACT_LIST,\n  WETH,\n  ANCHOR_BUSD_LP,\n  TOKEN_LIST,\n  BNB_BUSD_LP,\n} from \"../../assets/tokens\";\nimport { ContractServices } from \"../../services/ContractServices\";\nimport { FarmService } from \"../../services/FarmService\";\nimport { BigNumber } from \"bignumber.js\";\nimport { toast } from \"../Toast/Toast\";\nimport { addTransaction, startLoading, stopLoading } from \"../../redux/actions\";\nimport { addCommas } from \"../../constant\";\nimport defaultImg from \"../../assets/images/token_icons/default.svg\";\n\nconst PlanetCard = (props) => {\n  const [classToggle, setClassToggle] = useState(false);\n\n  const dispatch = useDispatch();\n  const isUserConnected = useSelector((state) => state.persist.isUserConnected);\n  const {\n    farm: { poolInfo, userInfo, pid },\n    index,\n    currentIndex,\n    handleChange,\n    harvestOnClick,\n    stakeHandle,\n    handleRoiModal,\n    status,\n  } = props;\n\n  // console.log(\"PoolInfo:\", poolInfo);\n  const [lpTokenDetails, setLpTokenDetails] = useState(null);\n  const [showIncrease, setShowIncrease] = useState(false);\n  const [totalSupply, setTotalSupply] = useState(0);\n  const [liquidity, setLiquidity] = useState(0);\n  const [worth, setWorth] = useState(0);\n  const [showApproveButton, setShowApproveButton] = useState(true);\n  const [approvalConfirmation, setApprovalConfirmation] = useState(false);\n  const [showHarvest, setShowHarvest] = useState(false);\n  const [balance, setBalance] = useState(0);\n  const [stakeAmounts, setStakeAmounts] = useState({ amount: 0, rewards: 0 });\n  const [apr, setApr] = useState(0);\n  const [roi, setROI] = useState({\n    allocPoint: 0,\n    totalAllcationPoint: 0,\n    anchorPerBlock: 0,\n    anchorPrice: 0,\n    liquidity: 0,\n    lpWorth: 0,\n  });\n  const [dollarValue, setAnchorDollarValue] = useState(0.01);\n\n  const getSaitaDollarValue = async () => {\n    if (poolInfo.lpToken != undefined) {\n      try {\n        let reserves = await ExchangeService.getReserves(ANCHOR_BUSD_LP);\n        // const token0 = await ExchangeService.getTokenZero(poolInfo.lpToken);\n        // const token1 = await ExchangeService.getTokenOne(poolInfo.lpToken);\n\n        // if ((token0.toLowerCase() === TOKEN_LIST[1].address.toLowerCase()) || (token1.toLowerCase() === TOKEN_LIST[1].address.toLowerCase())) {\n        //   reserves = await ExchangeService.getReserves(ANCHOR_BUSD_LP);\n        // } else {\n\n        //   //const pair = await ExchangeService.getPairFromPancakeFactory(poolInfo.lpToken);\n        //   reserves = await ExchangeService.getReserves(poolInfo.lpToken);\n        // }\n\n        let val = reserves[1] / reserves[0];\n        val = val || 0;\n        setAnchorDollarValue(val.toFixed(3));\n        return val.toFixed(3);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  };\n\n  const getDollarAPR = async (address) => {\n    try {\n      if (address.toLowerCase() === TOKEN_LIST[1].address.toLowerCase()) {\n        const tokenZero = await ExchangeService.getTokenZero(ANCHOR_BUSD_LP);\n        const tokenOne = await ExchangeService.getTokenOne(ANCHOR_BUSD_LP);\n\n        const decimalZero = await ContractServices.getDecimals(tokenZero);\n        const decimalOne = await ContractServices.getDecimals(tokenOne);\n        const reserves = await ExchangeService.getReserves(ANCHOR_BUSD_LP);\n\n        let val;\n        if (tokenZero.toLowerCase() == TOKEN_LIST[1].address.toLowerCase()) {\n          val =\n            reserves[1] / 10 ** decimalOne / (reserves[0] / 10 ** decimalZero);\n        } else {\n          val =\n            reserves[0] / 10 ** decimalZero / (reserves[1] / 10 ** decimalOne);\n        }\n        val = val || 0;\n        setAnchorDollarValue(val.toFixed(3));\n        return val.toFixed(3);\n      } else if (\n        address.toLowerCase() === TOKEN_LIST[2].address.toLowerCase()\n      ) {\n        return 1;\n      } else if (address.toLowerCase() != TOKEN_LIST[2].address.toLowerCase()) {\n        const pair = await ExchangeService.getPair(\n          address,\n          TOKEN_LIST[2].address\n        );\n        const tokenZero = await ExchangeService.getTokenZero(pair);\n        const tokenOne = await ExchangeService.getTokenOne(pair);\n\n        const decimalZero = await ContractServices.getDecimals(tokenZero);\n        const decimalOne = await ContractServices.getDecimals(tokenOne);\n        const reserves = await ExchangeService.getReserves(pair);\n        let val;\n        if (tokenZero.toLowerCase() == TOKEN_LIST[0].address.toLowerCase()) {\n          console.log(\n            \"HERE:\",\n            reserves[1] / 10 ** decimalOne,\n            reserves[0] / 10 ** decimalZero\n          );\n          val =\n            reserves[1] / 10 ** decimalOne / (reserves[0] / 10 ** decimalZero);\n        } else {\n          console.log(\n            \"HERE: else \",\n            reserves[1] / 10 ** decimalOne,\n            reserves[0] / 10 ** decimalZero\n          );\n          const resA = reserves[1] / 10 ** decimalZero;\n          const resB = reserves[0] / 10 ** decimalOne;\n          val = resA / resB;\n        }\n        val = val || 0;\n\n        console.log(\"VAlue:\", val);\n        setAnchorDollarValue(val.toFixed(3));\n        return val.toFixed(3);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const init = async () => {\n    if (poolInfo) {\n      const { lpToken } = poolInfo;\n      if (lpToken) {\n        const totalSupplyTemp = await ContractServices.getTotalSupply(lpToken);\n        setTotalSupply(totalSupplyTemp);\n        const liquidity = await handleLiquidity(lpToken);\n\n        setLiquidity(liquidity);\n        const tokenStaked = await ExchangeService.getTokenStaked(lpToken);\n        // const tokenStakedbypiyush = await\n        const lpWorth = liquidity * balance;\n        setWorth(lpWorth);\n        const lpTokenDetailsTemp = await FarmService.getLpTokenDetails(lpToken);\n        console.log(\"balance\", balance);\n        setLpTokenDetails(lpTokenDetailsTemp);\n        console.log(\n          \"liquidity\",\n          liquidity,\n          \"tokenStaked\",\n          tokenStaked,\n          \"lpToken\",\n          lpToken\n        );\n        const a = await calculateAPR(\n          Number(poolInfo.allocPoint),\n          lpToken,\n          liquidity\n        );\n        lpTokenDetailsTemp.apr = a;\n        setApr(a);\n\n        if (isUserConnected) {\n          const allowance = await ContractServices.allowanceToken(\n            lpToken,\n            MAIN_CONTRACT_LIST.farm.address,\n            isUserConnected\n          );\n          let check = true;\n          if (\n            BigNumber(allowance).isGreaterThanOrEqualTo(BigNumber(2 * 255 - 1))\n          ) {\n            setShowApproveButton(false);\n            check = false;\n          }\n\n          let balance = await ContractServices.getTokenBalance(\n            poolInfo.lpToken,\n            isUserConnected\n          );\n          if (balance > 0.00001) {\n            balance -= 0.00001;\n          }\n          setBalance(balance);\n          const amount = userInfo.amount / 10 ** lpTokenDetailsTemp.decimals;\n          // const amount = Number(\n          //   (\n          //     Number(userInfo.amount) /\n          //     10 ** Number(lpTokenDetailsTemp.decimals)\n          //   )\n          // ).toFixed(18)\n\n          const rewards = Number(\n            Number(\n              (await FarmService.pendingSaitama(pid, isUserConnected)) / 10 ** 9\n            ).toFixed(9)\n          );\n          if (!check && amount > 0) {\n            setShowIncrease(true);\n          }\n          setStakeAmounts({ amount, rewards });\n\n          //nextHarvest\n          const nextHarvestUntil = await FarmService.canHarvest(\n            pid,\n            isUserConnected\n          );\n          if (\n            !check &&\n            rewards > 0 &&\n            Number(userInfo.nextHarvestUntil) > 0 &&\n            nextHarvestUntil\n          ) {\n            setShowHarvest(true);\n          }\n        }\n      }\n    }\n  };\n  //call web3 approval function\n  const handleTokenApproval = async () => {\n    const acc = await ContractServices.getDefaultAccount();\n    if (acc && acc.toLowerCase() !== isUserConnected.toLowerCase()) {\n      return toast.error(\"Wallet address doesn`t match!\");\n    }\n    if (approvalConfirmation) {\n      return toast.info(\"Token approval is processing\");\n    }\n    // (2*256 - 1);\n    const value =\n      \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n\n    try {\n      dispatch(startLoading());\n      setApprovalConfirmation(true);\n      const r = await ContractServices.approveToken(\n        isUserConnected,\n        value,\n        MAIN_CONTRACT_LIST.farm.address,\n        poolInfo.lpToken\n      );\n      if (r) {\n        let data = {\n          message: `Approve LP Token`,\n          tx: r.transactionHash,\n        };\n        dispatch(addTransaction(data));\n        setApprovalConfirmation(false);\n        init();\n      }\n      dispatch(stopLoading());\n    } catch (err) {\n      setApprovalConfirmation(false);\n      dispatch(stopLoading());\n      toast.error(\"Approval Transaction Reverted!\");\n    }\n  };\n\n  const beforeStake = async (type) => {\n    if (isUserConnected) {\n      let bal = 0;\n      if (type === \"deposit\") {\n        bal = balance;\n      }\n      if (type === \"withdraw\") {\n        bal = stakeAmounts.amount;\n      }\n      stakeHandle({ pid, poolInfo, lpTokenDetails, balance: bal }, type);\n    } else {\n      return toast.error(\"Connect wallet first!\");\n    }\n  };\n\n  const calPrice = async (pairAddress) => {\n    let price = 0;\n\n    if (pairAddress == \"0x0000000000000000000000000000000000000000\") {\n      return 0;\n    }\n    const tokenZero = await ExchangeService.getTokenZero(pairAddress);\n    const tokenOne = await ExchangeService.getTokenOne(pairAddress);\n    const reserve = await ExchangeService.getReserves(pairAddress);\n    const decimalZero = await ContractServices.getDecimals(tokenZero);\n    const decimalOne = await ContractServices.getDecimals(tokenOne);\n\n    if (tokenZero.toLowerCase() === TOKEN_LIST[2]?.address.toLowerCase()) {\n      return (price =\n        (reserve[0] * 10 ** decimalOne) / (reserve[1] * 10 ** decimalZero));\n    }\n    // console.log(\n    //   tokenZero,\n    //   tokenOne,\n    //   reserve,\n    //   decimalZero,\n    //   decimalOne,\n    //   \"token k baare m jaankari\"\n    // );\n    if (tokenOne.toLowerCase() === TOKEN_LIST[2]?.address.toLowerCase()) {\n      return (price =\n        (reserve[1] * 10 ** decimalZero) / (reserve[0] * 10 ** decimalOne));\n    }\n\n    // let priceBNBToUSD = await calPrice(BNB_BUSD_LP); //replace with BNB-USD pair\n    if (tokenZero.toLowerCase() === WETH.toLowerCase()) {\n      price =\n        (reserve[0] * 10 ** decimalOne) / (reserve[1] * 10 ** decimalZero);\n      return price * 0.002;\n    }\n\n    if (tokenOne.toLowerCase() === WETH.toLowerCase()) {\n      price =\n        (reserve[1] * 10 ** decimalZero) / (reserve[0] * 10 ** decimalOne);\n      return price * 0.002;\n    }\n  };\n  // console.log(\"anchorPrice::\", BigNumber(anchorPrice));\n  const calculateAPR = async (allocPoint, lpToken, lpWorth) => {\n    const anchorPrice = await calPrice(ANCHOR_BUSD_LP);\n    const totalAllcationPoint = Number(\n      await FarmService.totalAllocationPoint()\n    );\n\n    const anchorPerBlock =\n      Number(await FarmService.pantherPerBlock()) /\n      10 ** TOKEN_LIST[1].decimals;\n    console.log(\"anchorPerBlock\", anchorPerBlock);\n    //need to calculate usd price.\n    const liquidity = await handleLiquidity(lpToken);\n    // console.log(\"liquidity: \", liquidity);\n    // console.log(\"anchorPrice\", anchorPrice);\n    // console.log(\"totalAllcationPoint\", totalAllcationPoint);\n    // console.log(\"anchorPerBlock\", anchorPerBlock);\n    if (liquidity != 0) {\n      const apr =\n        ((allocPoint / totalAllcationPoint) *\n          (anchorPerBlock * 5760 * 365 * 100 * anchorPrice)) /\n        liquidity;\n      setROI({\n        allocPoint,\n        totalAllcationPoint,\n        anchorPerBlock,\n        anchorPrice,\n        liquidity,\n        lpWorth,\n      });\n\n      return apr.toFixed(2);\n    }\n\n    return 0;\n  };\n  const handleLiquidity = async (pairAddress) => {\n    if (pairAddress != \"0x0000000000000000000000000000000000000000\") {\n      const tokenZero = await ExchangeService.getTokenZero(pairAddress);\n      const tokenOne = await ExchangeService.getTokenOne(pairAddress);\n      const reserve = await ExchangeService.getReserves(pairAddress);\n\n      // const tokenZeroPairUSDT = await ExchangeService.getPair(\n      //   tokenZero,\n      //   TOKEN_LIST[2]?.address\n      // );\n      // const tokenOnePairUSDT = await ExchangeService.getPair(\n      //   tokenOne,\n      //   TOKEN_LIST[2]?.address\n      // );\n\n      // const tokenZeroPairBNB = await ExchangeService.getPair(tokenZero, WETH);\n      // const tokenOnePairBNB = await ExchangeService.getPair(tokenOne, WETH);\n\n      const decimalZero = await ContractServices.getDecimals(tokenZero);\n      const decimalOne = await ContractServices.getDecimals(tokenOne);\n      console.log(\"tokenZero\", tokenZero, \"tokenOne\", tokenOne);\n      console.log(\"decimalZero\", decimalZero, \"decimalOne\", decimalOne);\n\n      //let priceA = 0.001;\n      //let priceB = 0.002;\n      let priceA = await getDollarAPR(tokenZero);\n      let priceB = await getDollarAPR(tokenOne);\n      console.log(\"priceA\", \"priceB\", priceA, priceB);\n      // if (tokenZero.toLowerCase() == TOKEN_LIST[2].address.toLowerCase()) {\n      //   priceA = 1;\n      // } else if (tokenZero.toLowerCase() == WETH.toLowerCase()) {\n      //   //  priceA = await calPrice(BNB_BUSD_LP);\n      //   priceA = await getDollarAPR(tokenZero);\n      // }\n\n      // if (tokenOne.toLowerCase() == TOKEN_LIST[2].address.toLowerCase()) {\n      //   priceB = 1;\n      // } else if (tokenOne.toLowerCase() == WETH.toLowerCase()) {\n      //   //priceB = await calPrice(BNB_BUSD_LP);\n      //   priceB = await getDollarAPR(tokenOne);\n      // }\n\n      // if (priceA == 0) {\n      //   if (tokenZeroPairUSDT != \"0x0000000000000000000000000000000000000000\") {\n      //     // priceA = await calPrice(tokenZeroPairUSDT);\n      //     priceB = await getDollarAPR(tokenOne);\n      //   } else if (\n      //     tokenZeroPairBNB != \"0x0000000000000000000000000000000000000000\"\n      //   ) {\n      //     //  priceA = await calPrice(tokenZeroPairBNB);\n      //     priceA = await getDollarAPR(tokenZero);\n      //   } else {\n      //     priceA = 0;\n      //   }\n      // }\n\n      // if (priceB == 0) {\n      //   if (tokenOnePairUSDT != \"0x0000000000000000000000000000000000000000\") {\n      //     priceB = await getDollarAPR(tokenOne);\n      //   } else if (\n      //     tokenOnePairBNB != \"0x0000000000000000000000000000000000000000\"\n      //   ) {\n      //     priceB = await getDollarAPR(tokenOne);\n      //   } else {\n      //     priceB = 0;\n      //   }\n      // }\n\n      const totalSupply = await ExchangeService.getTotalSupply(pairAddress);\n      const tokenStaked = await ExchangeService.getTokenStaked(pairAddress);\n      const liquidity =\n        (((reserve[0] / 10 ** decimalZero) * priceA +\n          (reserve[1] / 10 ** decimalOne) * priceB) /\n          totalSupply) *\n        tokenStaked;\n      console.log(\"liquidity\", liquidity, \"totalSupply\", totalSupply);\n      return liquidity;\n    } else {\n      return 0;\n    }\n  };\n  const handleIcon = (symbol) => {\n    if (symbol != undefined) {\n      const tokenObj = TOKEN_LIST.find(\n        (d) => d.symbol.toLowerCase() === symbol.toLowerCase()\n      );\n      return tokenObj != undefined && tokenObj.icon;\n    }\n  };\n\n  const handleDefaultIcon = (symbol) => {\n    if (symbol != undefined) {\n      const tokenObj = TOKEN_LIST.find(\n        (d) => d.symbol.toLowerCase() === symbol.toLowerCase()\n      );\n      let index = tokenObj != undefined && tokenObj.icon.lastIndexOf(\"/\") + 1;\n      let filename = tokenObj != undefined && tokenObj.icon.substr(index);\n      return filename == \"default.60b90c93.svg\" ? \"farm-coin\" : \"\";\n    }\n  };\n  const earnedSaitaValue = (dollarValue, rewards) => {\n    let fixedAfterDecimal = Number(0.01 * rewards).toFixed(9);\n    let res = addCommas(fixedAfterDecimal);\n    return res;\n  };\n\n  const earnedDollarValue = (dollarValue, rewards) => {\n    let fixedAfterDecimal = Number(dollarValue * rewards).toFixed(9);\n    let res = addCommas(fixedAfterDecimal);\n    return res;\n  };\n  useEffect(async () => {\n    await getSaitaDollarValue();\n    init();\n  }, [isUserConnected]);\n  return (\n    <>\n      <tr className={`planet_bar`} onClick={() => setClassToggle(!classToggle)}>\n        <td className=\"d-flex flex-wrap flex-md-nowrap align-items-start\">\n          <div className=\"cions col\">\n            <span className=\"coin_imgs uppr\">\n              <img\n                src={\n                  handleIcon(lpTokenDetails?.symbol0)\n                    ? handleIcon(lpTokenDetails?.symbol0)\n                    : \"\"\n                }\n              />\n            </span>\n            <span className=\"coin_imgs dwn\">\n              <img\n                src={\n                  handleIcon(lpTokenDetails?.symbol1)\n                    ? handleIcon(lpTokenDetails?.symbol1)\n                    : \"\"\n                }\n              />\n            </span>\n            <span className=\"coin_title\">{lpTokenDetails?.lpTokenName}</span>\n          </div>\n          <div className=\"fee col\">\n            {poolInfo.depositFeeBP && Number(poolInfo.depositFeeBP) === 0 && (\n              <div className=\"info_about_card_feeinfo\">\n                {\" \"}\n                <img src={props.fee_icon} alt=\"\" /> No Fee\n              </div>\n            )}\n            <div className=\"prcentx\">{poolInfo?.allocPoint}X</div>\n          </div>\n          <div className=\"coin_detail col\">\n            {status && (\n              <div className=\"apr\">\n                <span>APR</span>\n                <p>{addCommas(apr) === \"NaN\" || NaN ? 0 : addCommas(apr)}%</p>\n              </div>\n            )}\n          </div>\n          <div className=\"lqdty col\">\n            <span>Liquidity</span>\n            <p>\n              $\n              {addCommas(Number(liquidity.toFixed(2))) === \"NaN\" || NaN\n                ? 0\n                : addCommas(Number(liquidity.toFixed(2)))}\n            </p>\n          </div>\n          <div className=\"erndniob col\">\n            <span>Earned Saita</span>\n            <p>\n              {addCommas(stakeAmounts.rewards) === \"NaN\" || NaN\n                ? 0\n                : addCommas(stakeAmounts.rewards)}\n            </p>\n            <p>\n              ${\" \"}\n              {earnedSaitaValue(dollarValue, stakeAmounts.rewards) === \"NaN\" ||\n              NaN\n                ? 0\n                : earnedSaitaValue(dollarValue, stakeAmounts.rewards)}\n            </p>\n          </div>\n          <div className=\"dtl_btn col\">\n            <p>\n              Details{\" \"}\n              <span>\n                <img src={DownArrow} />\n              </span>\n            </p>\n          </div>\n        </td>\n      </tr>\n      <tr className={classToggle ? \"planet_strip\" : \"d-none\"}>\n        <td className=\"available_funds\">\n          <div className=\"funds\">\n            {isUserConnected ? (\n              <>\n                {showIncrease ? (\n                  <div className=\"cardFarm_increase\">\n                    <button\n                      type=\"button\"\n                      onClick={() => beforeStake(\"withdraw\")}\n                    >\n                      <span>-</span>\n                    </button>\n                    <button\n                      type=\"button\"\n                      onClick={() => beforeStake(\"deposit\")}\n                    >\n                      <span>+</span>\n                    </button>\n                  </div>\n                ) : (\n                  <>\n                    {showApproveButton ? (\n                      <Button\n                        className=\"funds_btn\"\n                        onClick={() => handleTokenApproval()}\n                      >\n                        Enable Farm\n                      </Button>\n                    ) : (\n                      <Button\n                        className=\"funds_btn\"\n                        onClick={() => beforeStake(\"deposit\")}\n                      >\n                        Stake\n                      </Button>\n                    )}\n                  </>\n                )}\n              </>\n            ) : (\n              <>\n                <Button\n                  onClick={() => toast.error(\"Connect to wallet first!\")}\n                  className=\"funds_btn\"\n                >\n                  Unlock Wallet\n                </Button>\n              </>\n            )}\n            <div className=\"count_funds\">\n              <span>Available LP</span>\n              <p>{balance} LP</p>\n              <span>LP Worth - </span>\n              <span>${addCommas(Number(worth.toFixed(2)))}</span>\n            </div>\n            <span className=\"forwd_arrow\">\n              <img src={RightArrow} alt={\"right-arrow\"} />\n            </span>\n          </div>\n          <div className=\"funds\">\n            <div className=\"count_funds\">\n              <span>{lpTokenDetails?.lpTokenName} STAKED</span>\n              {showIncrease ? (\n                <p> {addCommas(stakeAmounts.amount)}</p>\n              ) : (\n                <p>0</p>\n              )}\n              <span>\n                $\n                {earnedDollarValue(stakeAmounts.amount, worth) === \"NaN\" || NaN\n                  ? 0\n                  : earnedDollarValue(stakeAmounts.amount, worth)}\n              </span>\n            </div>{\" \"}\n            <span className=\"forwd_arrow\">\n              <img src={RightArrow} alt={\"right-arrow\"} />\n            </span>\n          </div>\n          <div className=\"funds\">\n            <Button\n              onClick={() => {\n                setShowHarvest(false);\n                harvestOnClick(pid, lpTokenDetails?.lpTokenName);\n              }}\n              disabled={!showHarvest}\n              className=\"funds_btn\"\n            >\n              Harvest\n            </Button>\n            <div className=\"count_funds\">\n              <span>Earned</span>\n              <p>\n                {addCommas(stakeAmounts.rewards) === \"NaN\" || NaN\n                  ? 0\n                  : addCommas(stakeAmounts.rewards)}{\" \"}\n                SAITA\n              </p>\n              <span>\n                $\n                {earnedDollarValue(dollarValue, stakeAmounts.rewards) ===\n                  \"NaN\" || NaN\n                  ? 0\n                  : earnedDollarValue(dollarValue, stakeAmounts.rewards)}\n              </span>\n            </div>\n          </div>\n          <div className=\"funds\">\n            <div className=\"count_funds\">\n              <span>\n                Deposit Fee :{\" \"}\n                {poolInfo.depositFeeBP\n                  ? (Number(poolInfo.depositFeeBP) / 10000) * 100\n                  : 0}\n                %\n              </span>\n              <span className=\"d-block\">\n                Harvest Interval:{\" \"}\n                {poolInfo.harvestInterval\n                  ? Number((poolInfo.harvestInterval / 3600).toFixed(2))\n                  : 0}{\" \"}\n                Hour(s)\n              </span>\n            </div>\n          </div>\n        </td>\n      </tr>\n      {/* <Button\n        className={`planet_bar`}\n        onClick={() => setClassToggle(!classToggle)}\n      >\n        <div className=\"cions\">\n          <span className=\"coin_imgs uppr\">\n            <img\n              src={\n                handleIcon(lpTokenDetails?.symbol0)\n                  ? handleIcon(lpTokenDetails?.symbol0)\n                  : \"\"\n              }\n            />\n          </span>\n          <span className=\"coin_imgs dwn\">\n            <img\n              src={\n                handleIcon(lpTokenDetails?.symbol1)\n                  ? handleIcon(lpTokenDetails?.symbol1)\n                  : \"\"\n              }\n            />\n          </span>\n          <span className=\"coin_title\">{lpTokenDetails?.lpTokenName}</span>\n        </div>\n        {poolInfo.depositFeeBP && Number(poolInfo.depositFeeBP) === 0 && (\n          <div className=\"info_about_card_feeinfo\">\n            {\" \"}\n            <img src={props.fee_icon} alt=\"\" /> No Fee\n          </div>\n        )}\n        <div className=\"prcentx\">{poolInfo?.allocPoint}X</div>\n        <div className=\"coin_detail\">\n          {status && (\n            <div className=\"apr\">\n              <span>APR</span>\n              <p>{addCommas(apr) === \"NaN\" || NaN ? 0 : addCommas(apr)}%</p>\n            </div>\n          )}\n          <div className=\"lqdty\">\n            <span>Liquidity</span>\n            <p>\n              $\n              {addCommas(Number(liquidity.toFixed(2))) === \"NaN\" || NaN\n                ? 0\n                : addCommas(Number(liquidity.toFixed(2)))}\n            </p>\n          </div>\n          <div className=\"erndniob\">\n            <span>Earned Saita</span>\n            <p>\n              {addCommas(stakeAmounts.rewards) === \"NaN\" || NaN\n                ? 0\n                : addCommas(stakeAmounts.rewards)}\n            </p>\n            <p>\n              ${\" \"}\n              {earnedSaitaValue(dollarValue, stakeAmounts.rewards) === \"NaN\" ||\n                NaN\n                ? 0\n                : earnedSaitaValue(dollarValue, stakeAmounts.rewards)}\n            </p>\n          </div>\n        </div>\n        <div className=\"dtl_btn\">\n          <p>\n            Details{\" \"}\n            <span>\n              <img src={DownArrow} />\n            </span>\n          </p>\n        </div>\n      </Button> */}\n    </>\n  );\n};\n\nexport default PlanetCard;\n","/data/nm/SaitaSwap/src/components/ReturnInvest/ReturnInvest.js",["614","615","616","617"],"import React, { useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport { Col, Row, Modal, Button, Table } from 'react-bootstrap'\nimport './ReturnInvest.scss'\nconst ReturnInvest = ({ roiModalData, handleClose, lpDetails, show, niobId }) => {\n    const handleROI = (day, liquidity) => {\n        const lq = liquidity ? 1000 : roiModalData?.liquidity;\n        let apr;\n        if (niobId == 12) {\n             apr = (((roiModalData?.allocPoint / roiModalData?.totalAllcationPoint) * ((roiModalData?.anchorPerBlock / 10 ** 18) * 28800 * day * 100 * roiModalData?.anchorPrice)) / lq) * 10.5537;\n        }\n        else {\n             apr = ((roiModalData?.allocPoint / roiModalData?.totalAllcationPoint) * ((roiModalData?.anchorPerBlock / 10 ** 18) * 28800 * day * 100 * roiModalData?.anchorPrice)) / lq;\n        }\n        return isNaN(apr) ? 0 : apr.toFixed(2);\n    }\n\n    const handleAnchorPerThousand = (day) => {\n        const totalLpWorth = roiModalData?.liquidity;\n        let anchorPerThousand;\n        if (niobId == 12) {\n          anchorPerThousand = ((1000 * (roiModalData?.anchorPerBlock / 10 ** 18) * 28800 * day * (roiModalData?.allocPoint / roiModalData?.totalAllcationPoint)) / totalLpWorth) * 10.5537;\n        } else {\n          anchorPerThousand = (1000 * (roiModalData?.anchorPerBlock / 10 ** 18) * 28800 * day * (roiModalData?.allocPoint / roiModalData?.totalAllcationPoint)) / totalLpWorth;\n        }\n        return isNaN(anchorPerThousand) ? 0 : anchorPerThousand.toFixed(2);\n    }\n    return (\n        <Modal centered scrollable={true} className=\"connect_wallet return_invest\" show={show} onHide={handleClose}>\n            <Modal.Header closeButton>\n                <Modal.Title>Return on Invest</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Row>\n                    <Col className=\"lp_tokens\">\n                        <div className=\"invest_area\">\n                            <Table>\n                                <thead>\n                                    <tr>\n                                        <th>Timeframe</th>\n                                        <th>ROI</th>\n                                        <th>NIOB per $1000</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    <tr>\n                                        <td>1d</td>\n                                        <td>{handleROI(1, false)}%</td>\n                                        <td>{handleAnchorPerThousand(1)}</td>\n                                    </tr>\n                                    <tr>\n                                        <td>7d</td>\n                                        <td>{handleROI(7, false)}%</td>\n                                        <td>{handleAnchorPerThousand(7)}</td>\n                                    </tr>\n                                    <tr>\n                                        <td>30d</td>\n                                        <td>{handleROI(30, false)}%</td>\n                                        <td>{handleAnchorPerThousand(30)}</td>\n                                    </tr>\n                                    <tr>\n                                        <td>365d(APR)</td>\n                                        <td>{handleROI(365, false)}%</td>\n                                        <td>{handleAnchorPerThousand(365)}</td>\n                                    </tr>\n                                </tbody>\n                            </Table>\n                            <p>Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.</p>\n                            <div className=\"confirmation\">\n                                <Link to=\"trade/liquidity/addLiquidity\" className=\"btn buttonStyle\" onClick={handleClose}>Get {lpDetails?.lpTokenName} </Link>\n                            </div>\n                        </div>\n                    </Col>\n                </Row>\n            </Modal.Body>\n        </Modal>\n    )\n}\n\nexport default ReturnInvest;\n","/data/nm/SaitaSwap/src/components/GalaxyCard/GalaxyCard.js",["618","619","620","621","622","623","624","625","626","627","628","629","630","631","632","633","634","635","636","637","638","639","640","641","642","643","644","645","646","647","648","649","650","651"],"import React, { useEffect, useState } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport \"../PlanetCard/PlanetCard.scss\";\n// import RightArrow from \"../../assets/images/right-arrow.png\";\nimport DownArrow from \"../../assets/images/down-arrow.png\";\nimport Schdule from \"../../assets/images/schdule.png\";\nimport ButtonPrimary from \"../Button/Button\";\nimport \"./GalaxyCard.scss\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { FarmService } from \"../../services/FarmService\";\nimport { ExchangeService } from \"../../services/ExchangeService\";\nimport { ContractServices } from \"../../services/ContractServices\";\nimport { MAIN_CONTRACT_LIST, TOKEN_LIST, WETH, ANCHOR_BUSD_LP, BNB_BUSD_LP } from \"../../assets/tokens\";\nimport { BigNumber } from \"bignumber.js\"\nimport { toast } from \"../Toast/Toast\";\nimport { addTransaction, startLoading, stopLoading } from \"../../redux/actions\";\nimport { addCommas } from \"../../constant\";\nimport ConnectWallet from \"../ConnectWallet/ConnectWallet\";\n\nconst GalaxyCard = (props) => {\n  const isUserConnected = useSelector(state => state.persist.isUserConnected);\n  const [classToggle, setClassToggle] = useState(false);\n\n  const [show, setShow] = useState(false);\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  const [show1, setShow1] = useState(false);\n  const handleClose1 = () => setShow1(false);\n  const handleShow1 = () => setShow1(true);\n\n  const dispatch = useDispatch();\n  const { farm: { poolInfo, userInfo, pid, niobId, isLocked, dollarVal }, index, currentIndex, handleChange,\n    harvestOnClick, stakeHandle, handleRoiModal, status } = props;\n\n  const [lpTokenDetails, setLpTokenDetails] = useState(null);\n  const [showIncrease, setShowIncrease] = useState(false);\n  const [totalSupply, setTotalSupply] = useState(0);\n  const [tokenStaked, setTokenStaked] = useState(0);\n  const [liquidity, setLiquidity] = useState(0);\n  const [showApproveButton, setShowApproveButton] = useState(true);\n  const [approvalConfirmation, setApprovalConfirmation] = useState(false);\n  const [showHarvest, setShowHarvest] = useState(false);\n  const [balance, setBalance] = useState(0);\n  const [stakeAmounts, setStakeAmounts] = useState({ amount: 0, rewards: 0 });\n  const [pantherAddress, setPantherAddress] = useState('');\n  const [apr, setApr] = useState(0);\n  const [roi, setROI] = useState({ allocPoint: 0, totalAllcationPoint: 0, anchorPerBlock: 0, anchorPrice: 0, liquidity: 0, lpWorth: 0 });\n  const [dollarValue, setAnchorDollarValue] = useState(0.01);\n  const [stakedDollarValue, setStakedDollarValue] = useState(0);\n\n  useEffect(() => {\n    init();\n    getPantherAddress();\n    getAnchorDollarValue();\n  }, [isUserConnected]);\n  const getPantherAddress = async () => {\n    const res = await FarmService.poolInfoo();\n    setPantherAddress(res);\n  }\n  const getAnchorDollarValue = async () => {\n    if (poolInfo.lpToken != undefined) {\n      try {\n\n        if (poolInfo.lpToken.toLowerCase() === TOKEN_LIST[1].address.toLowerCase()) {\n          const reserves = await ExchangeService.getReserves(ANCHOR_BUSD_LP);\n          let val = reserves[1] / reserves[0];\n          val = val || 0;\n          setAnchorDollarValue(val.toFixed(3));\n          return (val.toFixed(3));\n        }\n        else if (poolInfo.lpToken.toLowerCase() != TOKEN_LIST[2].address.toLowerCase()) {\n\n          const pair = await ExchangeService.getPairFromPancakeFactory(poolInfo.lpToken, TOKEN_LIST[2].address);\n          const reserves = await ExchangeService.getReserves(pair);\n          let val = reserves[1] / reserves[0];\n          val = val || 0;\n          setAnchorDollarValue(val.toFixed(3));\n          return (val.toFixed(3));\n        }\n\n      } catch (error) {\n        console.log(error)\n      }\n    }\n\n  }\n\n  const getDollarAPR = async (address) => {\n    if (poolInfo.lpToken != undefined) {\n      try {\n\n        if (address.toLowerCase() === TOKEN_LIST[1].address.toLowerCase()) {\n          const reserves = await ExchangeService.getReserves(ANCHOR_BUSD_LP);\n          let val = reserves[1] / reserves[0];\n          val = val || 0;\n          setAnchorDollarValue(val.toFixed(3));\n          return (val.toFixed(3));\n        }\n        else if (address.toLowerCase() != TOKEN_LIST[2].address.toLowerCase()) {\n\n          const pair = await ExchangeService.getPairFromPancakeFactory(address, TOKEN_LIST[2].address);\n          const reserves = await ExchangeService.getReserves(pair);\n          let val = reserves[1] / reserves[0];\n          val = val || 0;\n          setAnchorDollarValue(val.toFixed(3));\n          return (val.toFixed(3));\n        }\n\n      } catch (error) {\n        console.log(error)\n      }\n    }\n\n  }\n\n  const init = async () => {\n    if (poolInfo) {\n      const { lpToken } = poolInfo;\n      if (lpToken) {\n        const totalSupplyTemp = await ContractServices.getTotalSupply(lpToken);\n        setTotalSupply(totalSupplyTemp);\n        const tokenAmount = await ExchangeService.getTokenStaked(lpToken);\n        setTokenStaked(tokenAmount);\n        let price = 0;\n        if (lpToken.toLowerCase() === TOKEN_LIST[2].address.toLowerCase()) {\n          price = 1\n        } else {\n          const tokenPairUSDT = await ExchangeService.getPair(lpToken, TOKEN_LIST[2].address);\n          price = await calPrice(tokenPairUSDT);\n        }\n        let liq;\n        if (poolInfo.lpToken.toLowerCase() === TOKEN_LIST[2].address.toLowerCase()) {\n          liq = (tokenAmount * 1);\n        } else {\n          const dv = await getAnchorDollarValue();\n          liq = (tokenAmount * dv);\n        }\n        setLiquidity(liq);\n        const lpTokenDetailsTemp = await FarmService.getPoolTokenDetails(lpToken);\n        const a = await calculateAPR(Number(poolInfo.allocPoint), lpToken, liquidity);\n        // console.log('=====', pid, poolInfo.allocPoint, lpToken, liquidity);\n\n\n\n        if (pid == niobId) {\n          const a = await calculateAPR(Number(poolInfo.allocPoint), lpToken, liquidity);\n          setApr(a * 10.5537)\n        } else {\n          setApr(a);\n        }\n\n\n\n        // setApr(a);\n        lpTokenDetailsTemp.apr = a;\n        setLpTokenDetails(lpTokenDetailsTemp);\n        if (isUserConnected) {\n          const allowance = await ContractServices.allowanceToken(lpToken, MAIN_CONTRACT_LIST.farm.address, isUserConnected);\n          let check = true;\n          if (BigNumber(allowance).isGreaterThanOrEqualTo(BigNumber(2 * 255 - 1))) {\n            setShowApproveButton(false);\n            check = false;\n          }\n\n          let balance = await ContractServices.getTokenBalance(lpToken, isUserConnected);\n          if (balance > 0.00001) {\n            balance -= 0.00001;\n          }\n          setBalance(balance);\n\n          const amount = Number((Number(userInfo.amount) / 10 ** Number(lpTokenDetailsTemp.decimals)).toFixed(5));\n          const price = await handleStakeDollarValue(amount, lpToken);\n          const rewards = Number((Number(await FarmService.pendingPanther(pid, isUserConnected) / 10 ** 18).toFixed(5)));\n          if (!check && amount > 0) {\n            setShowIncrease(true);\n          }\n          setStakeAmounts({ amount, rewards });\n\n          setStakedDollarValue(price);\n\n\n          //nextHarvest\n          const nextHarvestUntil = await FarmService.canHarvest(pid, isUserConnected);\n          if (!check && rewards > 0 && Number(userInfo.nextHarvestUntil) > 0 && nextHarvestUntil) {\n            setShowHarvest(true);\n          }\n        }\n      }\n    }\n  };\n\n  const handleTokenApproval = async () => {\n    const acc = await ContractServices.getDefaultAccount();\n    if (acc && acc.toLowerCase() !== isUserConnected.toLowerCase()) {\n      return toast.error('Wallet address doesn`t match!');\n    }\n    if (approvalConfirmation) {\n      return toast.info('Token approval is processing');\n    }\n    // (2*256 - 1);\n    const value = '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff';\n\n    try {\n      dispatch(startLoading());\n      setApprovalConfirmation(true);\n      const r = await ContractServices.approveToken(isUserConnected, value, MAIN_CONTRACT_LIST.farm.address, poolInfo.lpToken);\n      if (r) {\n        let data = {\n          message: `Approve LP Token`,\n          tx: r.transactionHash\n        };\n        dispatch(addTransaction(data));\n        setApprovalConfirmation(false);\n        init();\n      }\n      dispatch(stopLoading());\n    } catch (err) {\n      setApprovalConfirmation(false);\n      dispatch(stopLoading());\n      toast.error('Approval Transaction Reverted!');\n    }\n  }\n\n  const beforeStake = async (type, isLocked) => {\n    if (isUserConnected) {\n      let bal = 0;\n      if (type === 'deposit') {\n        bal = balance;\n      }\n      if (type === 'withdraw') {\n        bal = stakeAmounts.amount;\n      }\n      stakeHandle({ pid, poolInfo, lpTokenDetails, balance: bal, niobId, isLocked }, type);\n    } else {\n      return toast.error('Connect wallet first!');\n    }\n  }\n\n  const calPrice = async (pairAddress) => {\n    let price = 0;\n\n    if (pairAddress == \"0x0000000000000000000000000000000000000000\") {\n      return 0;\n    }\n\n    const tokenZero = await ExchangeService.getTokenZero(pairAddress);\n    const tokenOne = await ExchangeService.getTokenOne(pairAddress);\n    const reserve = await ExchangeService.getReserves(pairAddress);\n    const decimalZero = await ContractServices.getDecimals(tokenZero);\n    const decimalOne = await ContractServices.getDecimals(tokenOne);\n\n    if (tokenZero.toLowerCase() === TOKEN_LIST[2].address.toLowerCase()) {\n      return price = ((reserve[0] * (10 ** decimalOne)) / (reserve[1] * (10 ** decimalZero)));\n    }\n\n    if (tokenOne.toLowerCase() === TOKEN_LIST[2].address.toLowerCase()) {\n      return price = ((reserve[1] * (10 ** decimalZero)) / (reserve[0] * (10 ** decimalOne)));\n    }\n\n    let priceBNBToUSD = await calPrice(BNB_BUSD_LP);\n    if (tokenZero.toLowerCase() === WETH.toLowerCase()) {\n      price = ((reserve[0] * (10 ** decimalOne)) / (reserve[1] * (10 ** decimalZero)));\n      return (price * priceBNBToUSD);\n    }\n\n    if (tokenOne.toLowerCase() === WETH.toLowerCase()) {\n      price = ((reserve[1] * (10 ** decimalZero)) / (reserve[0] * (10 ** decimalOne)));\n      return (price * priceBNBToUSD);\n    }\n  }\n\n  const calculateAPR = async (allocPoint, lpToken, lpWorth) => {\n\n    const anchorPrice = await calPrice(ANCHOR_BUSD_LP);\n    const totalAllcationPoint = Number(await FarmService.totalAllocationPoint());\n    const anchorPerBlock = Number(await FarmService.pantherPerBlock());\n    //need to calculate usd price.\n    const liquidity = await handleLiquidity(lpToken);\n    console.log(\"ANCHOR PRICE:\", anchorPrice);\n    console.log(\"liquidityliquidity:\", liquidity);\n    if (liquidity != 0) {\n      const apr = ((allocPoint / totalAllcationPoint) * ((anchorPerBlock / 10 ** 18) * 28800 * 365 * 100 * anchorPrice)) / liquidity;\n      setROI({ allocPoint, totalAllcationPoint, anchorPerBlock, anchorPrice, liquidity, lpWorth });\n\n      return apr;\n    }\n\n    return 0;\n  }\n  const handleLiquidity = async (tokenAddress) => {\n\n    if (tokenAddress != \"0x0000000000000000000000000000000000000000\") {\n\n      const reserve = await ExchangeService.getTokenStaked(tokenAddress);\n      const tokenPairUSDT = await ExchangeService.getPair(tokenAddress, TOKEN_LIST[2].address);\n      const tokenPairBNB = await ExchangeService.getPair(tokenAddress, WETH);\n\n      let priceA = 0;\n\n      if (tokenAddress.toLowerCase() == TOKEN_LIST[2].address.toLowerCase()) {\n        priceA = 1;\n      } else if (tokenAddress.toLowerCase() == WETH.toLowerCase()) {\n        priceA = await getDollarAPR(tokenAddress);\n      }\n\n      if (priceA == 0) {\n        if (tokenPairUSDT != \"0x0000000000000000000000000000000000000000\") {\n          priceA = await getDollarAPR(tokenAddress);\n        } else if (tokenPairBNB != \"0x0000000000000000000000000000000000000000\") {\n          priceA = await getDollarAPR(tokenAddress);\n          priceA = 0;\n        }\n      }\n\n      const liquidity = (reserve * priceA);\n\n      return Number(liquidity).toFixed(2);\n    }\n    return 0;\n  }\n  const handleIcon = (lpTokenName) => {\n    if (lpTokenName != undefined) {\n      const tokenObj = TOKEN_LIST.find(\n        (d) => d.symbol.toLowerCase() === lpTokenName.toLowerCase()\n      );\n      return tokenObj?.icon;\n    }\n\n  }\n  const earnedDollarValue = (dollarValue, rewards) => {\n\n    let fixedAfterDecimal = Number((dollarValue * rewards)).toFixed(6);\n    let res = addCommas(fixedAfterDecimal);\n    return res;\n  }\n\n  const handleStakeDollarValue = async (stakedAmount, lpToken) => {\n    const pairAddress = await ExchangeService.getPair(lpToken, TOKEN_LIST[2].address);\n    let price;\n    if (lpToken.toLowerCase() === TOKEN_LIST[2].address) {\n      price = 1;\n    } else {\n      price = await calPrice(pairAddress);\n    }\n    const dollarPrice = stakedAmount * price;\n    return dollarPrice;\n  }\n\n  return (\n    <>\n      <Button\n        className={`planet_bar glaxy_bar`}\n        onClick={() => setClassToggle(!classToggle)}\n      >\n        <div className=\"cions\">\n          <span className=\"coin_imgs uppr\">\n            <img src={handleIcon(lpTokenDetails?.lpTokenName) ? handleIcon(lpTokenDetails?.lpTokenName) : null} />\n          </span>\n          <span className=\"coin_title glxy_token\"><span className=\"title_nm\">Token</span>{lpTokenDetails?.lpTokenName} {isLocked ? \"(Lock)\" : \"\"}</span>\n        </div>\n\n        <div className=\"coin_detail\">\n          <div className=\"d-flex align-items-center\">\n            <div className=\"prcentx\">{poolInfo?.displayAllocPoint ? poolInfo?.displayAllocPoint : poolInfo?.allocPoint}X</div>\n            <img className=\"QrIcon\" src={Schdule} onClick={() => handleRoiModal(roi, lpTokenDetails, pid)} />\n            <div className=\"apr\">\n              <span>APR</span>\n              <p>{addCommas(apr.toFixed(2))}%</p>\n            </div>\n          </div>\n          <div className=\"lqdty\">\n            <span>Liquidity</span>\n            <p>${addCommas(liquidity.toFixed(2))}</p>\n          </div>\n          <div className=\"erndniob\">\n            <span>Earned SAITA</span>\n            <p>{stakeAmounts.rewards !== NaN ? addCommas(stakeAmounts.rewards) : \"0.00\"}</p>\n            <p>$ {stakeAmounts.rewards !== NaN ? earnedDollarValue(dollarVal, stakeAmounts.rewards) : \"0.00\"}</p>\n          </div>\n        </div>\n        <div className=\"dtl_btn\">\n          <p>\n            Details{\" \"}\n            <span>\n              <img src={DownArrow} />\n            </span>\n          </p>\n        </div>\n      </Button>\n      <div className={classToggle ? \"planet_strip\" : \"d-none\"}>\n        <div className=\"stakedValue\">\n          <div className=\"d-flex comnDiv\">\n            <div className=\"stkd_title\">\n              <h6>Total Staked:</h6>\n              <h6>Stake:</h6>\n              <h6>Deposit Fee:</h6>\n            </div>\n            <div className=\"boldTxt\">\n              <h6>{addCommas(tokenStaked.toFixed(2))}</h6>\n              <h6>{lpTokenDetails?.lpTokenName}</h6>\n              <h6>{poolInfo.depositFeeBP ? (Number(poolInfo.depositFeeBP) / 10000) * 100 : 0}%</h6>\n            </div>\n          </div>\n          <div className=\"d-flex comnDiv\">\n            <div className=\"stkd_title\">\n              <h6>Staked Dollar Value:</h6>\n              <h6>Earned Value:</h6>\n              <h6>Harvest Interval:</h6>\n            </div>\n            <div className=\"boldTxt\">\n              <h6>${stakedDollarValue ? addCommas(stakedDollarValue.toFixed(9)) : 0}</h6>\n              <h6>$ {stakeAmounts.rewards !== NaN ? earnedDollarValue(dollarVal, stakeAmounts.rewards) : \"0.00\"}</h6>\n              <h6>{poolInfo.harvestInterval ? Number(((poolInfo.harvestInterval) / 3600).toFixed(2)) : 0} Hour(s)</h6>\n            </div>\n          </div>\n          <div className=\"vwdoc_btn\">\n            <div className=\"linksTxt\">\n              <a href=\"#\">View on BscScan</a>\n              <a href=\"#\">View Project Site</a>\n            </div>\n            <div className=\"available_funds\">\n              <div className=\"funds\">\n                {isUserConnected ? (\n                  <>\n                    {showIncrease ? (\n                      <div className=\"cardFarm_increase\">\n                        <button\n                          type=\"button\"\n                          onClick={() => beforeStake(\"withdraw\", isLocked)}\n                        >\n                          <span>-</span>\n                        </button>\n                        <button\n                          type=\"button\"\n                          onClick={() => beforeStake(\"deposit\", isLocked)}\n                        >\n                          <span>+</span>\n                        </button>\n                      </div>\n                    ) : (\n                      <>\n                        {showApproveButton ? (\n                          <Button\n                            className=\"funds_btn\"\n                            onClick={() => handleTokenApproval()}\n                          >\n                            Enable Pool\n                          </Button>\n                        ) : (\n                          <Button\n                            className=\"funds_btn\"\n                            onClick={() => beforeStake(\"deposit\")}\n                          >\n                            Stake\n                          </Button>\n                        )}\n                      </>\n                    )}\n                  </>\n                ) : (\n                  <>\n                    <Button\n                      type=\"button\"\n                      className=\"unlockWallet_Btn\"\n                      onClick={() => handleShow1()}\n                    >\n                      Unlock Wallet\n                    </Button>\n                  </>\n                )}\n                <ButtonPrimary className=\"unlockWallet_Btn\"\n                  onClick={() => {\n                    setShowHarvest(false);\n                    harvestOnClick(pid, lpTokenDetails?.lpTokenName);\n                  }} title=\"Harvest\"\n                  disabled={!showHarvest} />\n\n              </div>\n            </div>\n\n            {/* <ButtonPrimary className=\"unlockWallet_Btn\" onClick={()=> handleShow(true)} title=\"Unlock Wallet\" /> */}\n          </div>\n        </div>\n      </div>\n      <ConnectWallet show={show1} handleShow={handleShow1} handleClose={handleClose1} />\n\n    </>\n  );\n};\n\nexport default GalaxyCard;\n\n\n","/data/nm/SaitaSwap/src/redux/actions/ExchangeActions.js",["652","653"],"/data/nm/SaitaSwap/src/redux/actions/tokenActions.js",["654","655","656","657"],"import { UserService } from \"../../services/UserService\";\nimport { startLoading, stopLoading } from \"./LoadingActions\";\nimport { PersistActions } from \"../actions\"\nimport { ContractServices } from \"../../services/ContractServices\";\n\n\n\nexport function getTokenBalance() {\n  return (dispatch, getState) => new Promise((resolve, reject) => {\n    ContractServices.tokenBalance()\n      .then((res) => {\n        resolve(res);\n      })\n      .catch((ex) => {\n        reject(ex);\n      });\n\n  });\n}\n\n\n","/data/nm/SaitaSwap/src/redux/actions/SecurityActions.js",["658","659","660","661","662","663","664","665","666","667"],"import { SecurityService } from \"../../services/SecurityService\";\nimport { startLoading, stopLoading } from \"./LoadingActions\";\nimport { toast } from \"../../components/Toast/Toast\";\nimport { AUTH_TOKEN_KEY } from \"../../constant\";\nimport { getToken } from \"../../Helpers/storageHelper\"\n\n\n\n/** seting action types */\nexport const actionTypes = {\n  SAVE_GOOGLE_AUTH_DETAIL: \"SAVE_GOOGLE_AUTH_DETAIL\",\n  KYC_FORM_UPDATE: \"KYC_FORM_UPDATE\",\n  KYC_FORM_CLEAR: \"KYC_FORM_CLEAR\"\n\n};\n\n\n\nexport function saveKycFormData(data) {\n\n  return {\n    type: actionTypes.KYC_FORM_UPDATE,\n    payload: data\n  };\n}\n\nexport function clearKycFormData() {\n\n  return {\n    type: actionTypes.KYC_FORM_CLEAR,\n  };\n}\n\n\nexport function saveGoogleAuthDetails(data) {\n  return {\n    type: actionTypes.SAVE_GOOGLE_AUTH_DETAIL,\n    payload: data\n  };\n}\n\n\nexport function get2FaImage(data) {\n  return (dispatch, getState) => new Promise((resolve, reject) => {\n    dispatch(startLoading())\n    SecurityService.get2FaImage(data, {\n      jwt: getToken(AUTH_TOKEN_KEY)\n    })\n      .then((res) => {\n        dispatch(saveGoogleAuthDetails(res.data.data))\n        dispatch(stopLoading());\n        resolve(res);\n      })\n      .catch((ex) => {\n        toast.error(ex.data.message)\n        dispatch(stopLoading());\n\n        reject(ex);\n      });\n\n  });\n}\n\n\nexport function google2faValidate(data) {\n  return (dispatch, getState) => new Promise((resolve, reject) => {\n    dispatch(startLoading())\n    SecurityService.google2faValidate(data, {\n      jwt: getToken(AUTH_TOKEN_KEY)\n    })\n      .then((res) => {\n        toast.success(res.data.message);\n\n        dispatch(stopLoading());\n        resolve(res);\n      })\n      .catch((ex) => {\n        toast.error(ex.data.message)\n        dispatch(stopLoading());\n        reject(ex);\n      });\n\n  });\n}\n\n\nexport function google2faDisable(data) {\n  return (dispatch, getState) => new Promise((resolve, reject) => {\n    dispatch(startLoading())\n    SecurityService.google2faDisable(data, {\n\n      jwt: getToken(AUTH_TOKEN_KEY)\n    })\n      .then((res) => {\n        toast.success(res.data.message);\n\n        dispatch(stopLoading());\n        resolve(res);\n      })\n      .catch((ex) => {\n        toast.error(ex.data.message)\n        dispatch(stopLoading());\n        reject(ex);\n      });\n\n  });\n}\n\n\n\nexport const uploadRawFile = file => {\n  return (dispatch, getState) => {\n    let state = getState();\n\n    // dispatch(startLoading());\n    return new Promise((resolve, reject) => {\n      SecurityService.uploadRawFile(file, {\n        jwt: getToken(AUTH_TOKEN_KEY)\n      })\n        .then((res) => {\n          dispatch(stopLoading());\n          toast.success(res.data.message);\n          resolve(res);\n        })\n        .catch((ex) => {\n          dispatch(stopLoading());\n          reject(ex);\n        });\n    });\n  };\n};\n\n\nexport const removeKycDoc = file => {\n  return (dispatch, getState) => {\n    let state = getState();\n\n    dispatch(startLoading());\n    return new Promise((resolve, reject) => {\n      SecurityService.removeKycDoc(file, {\n        jwt: getToken(AUTH_TOKEN_KEY)\n      })\n        .then((res) => {\n          dispatch(stopLoading());\n          toast.success(res.data.message);\n          resolve(res);\n        })\n        .catch((ex) => {\n          dispatch(stopLoading());\n          reject(ex);\n        });\n    });\n  };\n};\n\n\nexport const getUserKycDetails = data => {\n  return (dispatch, getState) => {\n    let state = getState();\n\n    dispatch(startLoading());\n    return new Promise((resolve, reject) => {\n      SecurityService.getUserKycDetails({\n        jwt: getToken(AUTH_TOKEN_KEY)\n      })\n        .then((res) => {\n          dispatch(stopLoading());\n          resolve(res);\n        })\n        .catch((ex) => {\n          dispatch(stopLoading());\n          reject(ex);\n        });\n    });\n  };\n};\n\n\n\n\nexport const getFileById = data => {\n  return (dispatch, getState) => {\n    let state = getState();\n\n    dispatch(startLoading());\n    return new Promise((resolve, reject) => {\n      SecurityService.getFileById(data, {\n        jwt: getToken(AUTH_TOKEN_KEY)\n      })\n        .then((res) => {\n          dispatch(stopLoading());\n          resolve(res);\n        })\n        .catch((ex) => {\n          dispatch(stopLoading());\n          reject(ex);\n        });\n    });\n  };\n};\n\n//PROFILE\nexport const getUserProfile = () => {\n  return (dispatch, getState) => {\n    let state = getState();\n\n    dispatch(startLoading());\n    return new Promise((resolve, reject) => {\n      SecurityService.getUserProfile({\n        jwt: getToken(AUTH_TOKEN_KEY)\n      })\n        .then((res) => {\n          dispatch(stopLoading());\n          resolve(res);\n        })\n        .catch((ex) => {\n          dispatch(stopLoading());\n          reject(ex);\n        });\n    });\n  };\n};\n\n\nexport const updateUserProfile = data => {\n  return (dispatch, getState) => {\n    let state = getState();\n\n    dispatch(startLoading());\n    return new Promise((resolve, reject) => {\n      SecurityService.updateUserProfile(data, {\n        jwt: getToken(AUTH_TOKEN_KEY)\n      })\n        .then((res) => {\n          toast.success(res.data.message);\n          dispatch(stopLoading());\n          resolve(res);\n        })\n        .catch((ex) => {\n          toast.error(ex.data.message)\n          dispatch(stopLoading());\n          reject(ex);\n        });\n    });\n  };\n};\n\n\nexport const getUserInfo = () => {\n  return (dispatch, getState) => {\n    let state = getState();\n\n    dispatch(startLoading());\n    return new Promise((resolve, reject) => {\n      SecurityService.getUserInfo({\n        jwt: getToken(AUTH_TOKEN_KEY)\n      })\n        .then((res) => {\n          dispatch(stopLoading());\n          resolve(res);\n        })\n        .catch((ex) => {\n          dispatch(stopLoading());\n          reject(ex);\n        });\n    });\n  };\n};\nexport const getUserTrustedDevice = () => {\n  return (dispatch, getState) => {\n    let state = getState();\n\n    dispatch(startLoading());\n    return new Promise((resolve, reject) => {\n      SecurityService.getUserTrustedDevice({\n        jwt: getToken(AUTH_TOKEN_KEY)\n      })\n        .then((res) => {\n          dispatch(stopLoading());\n          resolve(res);\n        })\n        .catch((ex) => {\n          dispatch(stopLoading());\n          reject(ex);\n        });\n    });\n  };\n};\n\n\n\n\n\nexport const resetUserPassword = data => {\n  return (dispatch, getState) => {\n    let state = getState();\n\n    dispatch(startLoading());\n    return new Promise((resolve, reject) => {\n      SecurityService.resetUserPassword(data, {\n        jwt: getToken(AUTH_TOKEN_KEY)\n      })\n        .then((res) => {\n          toast.success(res.data.message);\n          dispatch(stopLoading());\n          resolve(res);\n        })\n        .catch((ex) => {\n          toast.error(ex.data.message)\n          dispatch(stopLoading());\n          reject(ex);\n        });\n    });\n  };\n};\n\n\n\nexport const updateUserKyc = data => {\n  return (dispatch, getState) => {\n    let state = getState();\n\n    dispatch(startLoading());\n    return new Promise((resolve, reject) => {\n      SecurityService.updateUserKyc(data, {\n        jwt: getToken(AUTH_TOKEN_KEY)\n      })\n        .then((res) => {\n          toast.success(res.data.message);\n          dispatch(stopLoading());\n          resolve(res);\n        })\n        .catch((ex) => {\n          toast.error(ex.data.message)\n          dispatch(stopLoading());\n          reject(ex);\n        });\n    });\n  };\n};\n\n\n\n\n\n\n\n\n\n","/data/nm/SaitaSwap/src/redux/actions/FarmAction.js",[],"/data/nm/SaitaSwap/src/redux/actions/RegisterActions.js",[],"/data/nm/SaitaSwap/src/redux/actions/AuthActions.js",[],"/data/nm/SaitaSwap/src/assets/tokens/index.js",["668","669","670","671","672","673","674","675","676","677","678","679","680"],"/data/nm/SaitaSwap/src/services/Fetch.js",[],"/data/nm/SaitaSwap/src/components/Card/Card.js",[],"/data/nm/SaitaSwap/src/components/RecentTransactions/RecentTransactions.js",[],"/data/nm/SaitaSwap/src/components/SupplyModal/SupplyModal.js",[],"/data/nm/SaitaSwap/src/components/buttonBack/ButtonBack.js",["681"],"import React from 'react'\nimport { Link, useHistory } from 'react-router-dom'\nimport goBack from '../../assets/images/icon_goback.png'\nimport './ButtonBackStyle.scss'\n\n\nconst ButtonBack = props => {\n    const history =  useHistory()\n    return (\n        <Link className=\"goBackButtonStyle\" to={{javascript:void(0)}}  onClick={() => {\n            history.goBack();\n        }}><img src={goBack} /></Link>\n    ) \n}\n\nexport default ButtonBack\n","/data/nm/SaitaSwap/src/components/selectCoin/SelectCoin.js",["682","683","684"],"/data/nm/SaitaSwap/src/pages/Trade/ImportPool.js",["685","686","687","688","689","690","691","692","693","694","695","696","697","698","699","700","701","702","703","704","705"],"/data/nm/SaitaSwap/src/components/Modal/SettingModal/SettingModal.js",[],"/data/nm/SaitaSwap/src/pages/Trade/Liquidity.js",["706","707","708","709","710","711","712","713"],"/data/nm/SaitaSwap/src/components/Modal/ModalCurrency/ModalCurrency.js",["714","715","716","717"],"/data/nm/SaitaSwap/src/pages/Trade/Exchange.js",["718","719","720","721","722","723","724","725","726","727","728","729","730","731","732","733","734","735","736","737","738","739","740","741","742","743","744","745","746","747","748","749","750","751","752","753","754","755","756","757","758","759"],"/data/nm/SaitaSwap/src/components/cardCustom/CardCustom.js",[],"/data/nm/SaitaSwap/src/services/SecurityService.js",[],"/data/nm/SaitaSwap/src/components/Timer/Timer.js",[],"/data/nm/SaitaSwap/src/components/FarmCard/FarmCard.js",["760","761"],"import React from 'react'\nimport { Card } from 'react-bootstrap'\nimport ButtonLink from \"../buttonLink/ButtonLink\";\nimport { rootName } from \"../../constant\";\nimport farmicon from \"../../assets/images/farm-button-icon.png\";\nimport './FarmCard.scss'\nimport { useHistory } from 'react-router';\n\nconst FarmCard = props => {\n    const history = useHistory();\n\n    return (\n       <Card className=\"farmcard\">\n           <div className=\"d-flex\">\n                <div className=\"cions\">\n                    <span className=\"coin_imgs uppr\"><img src={props.icon1} alt={\"icon\"}/></span>\n                    <span className=\"coin_imgs dwn\"><img src={props.icon2} alt={\"icon\"}/></span>\n                </div>\n                <div className=\"coin_name\">\n                    <h3 className=\"coin_title\">{props.title}-{props.title1}</h3>\n                    <span>Liquidity {props.liquidity}</span>\n                </div>\n            </div> \n            <div className=\"direction\">\n                <h3>APR {props.apy}</h3>\n                <ButtonLink title=\"Farm\" icon={farmicon} link=\"/farmplanets/active\" />\n            </div>\n       </Card>\n    )\n}\n\nexport default FarmCard;","/data/nm/SaitaSwap/src/Helpers/storageHelper.js",[],"/data/nm/SaitaSwap/src/pages/Trade/TokenBalance.js",["762"],"import React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { ContractServices } from '../../services/ContractServices';\n\nconst TokenBalance = ({ address }) => {\n\n      const [balance, setBalance] = useState('');\n      const isUserConnected = useSelector(state => state.persist.isUserConnected);\n\n      useEffect(() => {\n            init();\n      }, [isUserConnected, address]);\n\n      const init = async () => {\n            try {\n                  let res = 0;\n                  if (address === 'BNB') {\n                        res = await ContractServices.getBNBBalance(isUserConnected);\n                        setBalance(res);\n                  } else {\n                        res = await ContractServices.getTokenBalance(address, isUserConnected);\n                        setBalance(res);\n                  }\n            } catch (error) {\n                  console.log(error);\n            }\n      }\n\n      return <span className=\"tokenName_textStyle\">{balance}</span>\n\n}\n\nexport default TokenBalance;","/data/nm/SaitaSwap/src/components/coinItem/CoinItem.js",["763","764"],"import React from \"react\";\nimport { Col, Row } from \"react-bootstrap\";\nimport \"./CoinItemStyle.scss\";\n\nconst CoinItem = (props) => {\n  \n  return (\n    <>\n    <Col {...props} className={`coinItem_style ${props.className}`}>\n      <img src={props.iconImage} />\n      <p className=\"titleStyle\">{props.title}</p>\n    </Col>\n    </>\n  );\n};\nexport default CoinItem;","/data/nm/SaitaSwap/src/components/SwapModal/SwapModal.js",["765","766","767","768","769"],"import './SwapModal.scss'\nimport { Link } from \"react-router-dom\";\nimport Card from \"../Card/Card\";\nimport closeBtn from \"../../assets/images/ionic-md-close.svg\";\nimport { Col, Row, Modal, Button } from \"react-bootstrap\";\n\nconst SwapModal = ({\n  closeModal,\n  tokenOneCurrency,\n  tokenTwoCurrency,\n  tokenOneValue,\n  tokenTwoValue,\n  tokenOneIcon,\n  tokenTwoIcon,\n  sharePoolValue,\n  handleSwap,\n  priceImpact,\n  liquidityProviderFee,\n  show,\n}) => {\n  return (\n    <>\n      <Modal\n        centered\n        scrollable={true}\n        className=\"connect_wallet supply_mode\"\n        show={show}\n        onHide={closeModal}\n      >\n        <Modal.Header closeButton>\n          <Modal.Title>You are creating a pool</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Row>\n            <ul className=\"swap_confirmation\">\n              <li>\n                <p>\n                  <img src={tokenOneIcon} alt=\"icon\" className='me-2' />\n                  {tokenOneValue}\n                </p>{\" \"}\n                <span> {tokenOneCurrency}</span>\n              </li>\n              <li>\n                <p>\n                  <img src={tokenTwoIcon} alt=\"icon\" className=\"me-2\" />\n                  {tokenTwoValue}\n                </p>{\" \"}\n                <span> {tokenTwoCurrency}</span>\n              </li>\n              <li>\n                Price:{\" \"}\n                <span>\n                  {\" \"}\n                  {sharePoolValue} {tokenOneCurrency}/ {tokenTwoCurrency}\n                </span>\n              </li>\n              <li>\n                Price Impact: <span>{priceImpact}%</span>\n              </li>\n              <li>\n                Liquidity provider fee: <span>{liquidityProviderFee}</span>\n              </li>\n            </ul>\n            <div className=\"col modal_headerStyle__rowC_colRight Confirm_btn\">\n              <button className=\"btn buttonStyle full\" onClick={() => handleSwap()}>\n                Confirm\n              </button>\n            </div>\n          </Row>\n        </Modal.Body>\n      </Modal>\n    </>\n  );\n};\n\nexport default SwapModal;\n","/data/nm/SaitaSwap/src/components/buttonLink/ButtonLink.js",[],"/data/nm/SaitaSwap/src/components/Modal/RemoveLiquidity/RemoveLiquidity.js",["770","771","772","773","774","775","776","777","778","779"],"/data/nm/SaitaSwap/src/pages/Trade/RangeSlider.js",[],"/data/nm/SaitaSwap/src/components/StakeModal/StakeModal.js",["780","781","782","783","784"],{"ruleId":"785","replacedBy":"786"},{"ruleId":"787","replacedBy":"788"},{"ruleId":"789","severity":1,"message":"790","line":1,"column":17,"nodeType":"791","messageId":"792","endLine":1,"endColumn":26},{"ruleId":"789","severity":1,"message":"793","line":6,"column":8,"nodeType":"791","messageId":"792","endLine":6,"endColumn":20},{"ruleId":"789","severity":1,"message":"794","line":7,"column":10,"nodeType":"791","messageId":"792","endLine":7,"endColumn":21},{"ruleId":"789","severity":1,"message":"795","line":53,"column":13,"nodeType":"791","messageId":"792","endLine":53,"endColumn":18},{"ruleId":"789","severity":1,"message":"796","line":66,"column":15,"nodeType":"791","messageId":"792","endLine":66,"endColumn":23},{"ruleId":"797","severity":1,"message":"798","line":102,"column":31,"nodeType":"799","messageId":"800","endLine":102,"endColumn":32},{"ruleId":"797","severity":1,"message":"798","line":102,"column":37,"nodeType":"799","messageId":"800","endLine":102,"endColumn":38},{"ruleId":"789","severity":1,"message":"794","line":2,"column":23,"nodeType":"791","messageId":"792","endLine":2,"endColumn":34},{"ruleId":"789","severity":1,"message":"801","line":2,"column":17,"nodeType":"791","messageId":"792","endLine":2,"endColumn":25},{"ruleId":"789","severity":1,"message":"802","line":7,"column":8,"nodeType":"791","messageId":"792","endLine":7,"endColumn":16},{"ruleId":"789","severity":1,"message":"803","line":8,"column":8,"nodeType":"791","messageId":"792","endLine":8,"endColumn":19},{"ruleId":"789","severity":1,"message":"804","line":11,"column":8,"nodeType":"791","messageId":"792","endLine":11,"endColumn":20},{"ruleId":"789","severity":1,"message":"805","line":12,"column":10,"nodeType":"791","messageId":"792","endLine":12,"endColumn":18},{"ruleId":"789","severity":1,"message":"806","line":13,"column":8,"nodeType":"791","messageId":"792","endLine":13,"endColumn":18},{"ruleId":"807","severity":1,"message":"808","line":73,"column":9,"nodeType":"809","messageId":"810","endLine":73,"endColumn":39},{"ruleId":"789","severity":1,"message":"811","line":1,"column":10,"nodeType":"791","messageId":"792","endLine":1,"endColumn":21},{"ruleId":"812","severity":1,"message":"813","line":29,"column":8,"nodeType":"814","endLine":29,"endColumn":10,"suggestions":"815"},{"ruleId":"816","severity":1,"message":"817","line":69,"column":33,"nodeType":"818","endLine":69,"endColumn":57},{"ruleId":"816","severity":1,"message":"817","line":77,"column":33,"nodeType":"818","endLine":77,"endColumn":57},{"ruleId":"789","severity":1,"message":"819","line":1,"column":17,"nodeType":"791","messageId":"792","endLine":1,"endColumn":26},{"ruleId":"789","severity":1,"message":"820","line":14,"column":8,"nodeType":"791","messageId":"792","endLine":14,"endColumn":12},{"ruleId":"789","severity":1,"message":"821","line":20,"column":8,"nodeType":"791","messageId":"792","endLine":20,"endColumn":14},{"ruleId":"789","severity":1,"message":"822","line":21,"column":8,"nodeType":"791","messageId":"792","endLine":21,"endColumn":14},{"ruleId":"789","severity":1,"message":"823","line":22,"column":8,"nodeType":"791","messageId":"792","endLine":22,"endColumn":13},{"ruleId":"789","severity":1,"message":"824","line":26,"column":3,"nodeType":"791","messageId":"792","endLine":26,"endColumn":17},{"ruleId":"789","severity":1,"message":"825","line":27,"column":3,"nodeType":"791","messageId":"792","endLine":27,"endColumn":8},{"ruleId":"789","severity":1,"message":"826","line":28,"column":3,"nodeType":"791","messageId":"792","endLine":28,"endColumn":7},{"ruleId":"789","severity":1,"message":"827","line":29,"column":3,"nodeType":"791","messageId":"792","endLine":29,"endColumn":17},{"ruleId":"789","severity":1,"message":"828","line":30,"column":3,"nodeType":"791","messageId":"792","endLine":30,"endColumn":10},{"ruleId":"789","severity":1,"message":"829","line":31,"column":3,"nodeType":"791","messageId":"792","endLine":31,"endColumn":15},{"ruleId":"789","severity":1,"message":"830","line":32,"column":3,"nodeType":"791","messageId":"792","endLine":32,"endColumn":22},{"ruleId":"789","severity":1,"message":"831","line":33,"column":3,"nodeType":"791","messageId":"792","endLine":33,"endColumn":23},{"ruleId":"832","severity":1,"message":"833","line":53,"column":24,"nodeType":"799","messageId":"834","endLine":53,"endColumn":26},{"ruleId":"832","severity":1,"message":"833","line":103,"column":32,"nodeType":"799","messageId":"834","endLine":103,"endColumn":34},{"ruleId":"816","severity":1,"message":"817","line":275,"column":13,"nodeType":"818","endLine":275,"endColumn":36},{"ruleId":"835","severity":1,"message":"836","line":291,"column":13,"nodeType":"818","messageId":"837","endLine":291,"endColumn":81,"fix":"838"},{"ruleId":"816","severity":1,"message":"817","line":292,"column":15,"nodeType":"818","endLine":292,"endColumn":38},{"ruleId":"835","severity":1,"message":"836","line":296,"column":13,"nodeType":"818","messageId":"837","endLine":299,"endColumn":14,"fix":"839"},{"ruleId":"816","severity":1,"message":"817","line":300,"column":15,"nodeType":"818","endLine":300,"endColumn":37},{"ruleId":"835","severity":1,"message":"836","line":304,"column":13,"nodeType":"818","messageId":"837","endLine":307,"endColumn":14,"fix":"840"},{"ruleId":"816","severity":1,"message":"817","line":308,"column":15,"nodeType":"818","endLine":308,"endColumn":36},{"ruleId":"835","severity":1,"message":"836","line":312,"column":13,"nodeType":"818","messageId":"837","endLine":312,"endColumn":66,"fix":"841"},{"ruleId":"816","severity":1,"message":"817","line":313,"column":15,"nodeType":"818","endLine":313,"endColumn":36},{"ruleId":"835","severity":1,"message":"836","line":322,"column":13,"nodeType":"818","messageId":"837","endLine":322,"endColumn":72,"fix":"842"},{"ruleId":"816","severity":1,"message":"817","line":323,"column":15,"nodeType":"818","endLine":323,"endColumn":36},{"ruleId":"835","severity":1,"message":"836","line":327,"column":13,"nodeType":"818","messageId":"837","endLine":327,"endColumn":70,"fix":"843"},{"ruleId":"816","severity":1,"message":"817","line":328,"column":15,"nodeType":"818","endLine":328,"endColumn":37},{"ruleId":"789","severity":1,"message":"844","line":1,"column":28,"nodeType":"791","messageId":"792","endLine":1,"endColumn":36},{"ruleId":"789","severity":1,"message":"845","line":6,"column":8,"nodeType":"791","messageId":"792","endLine":6,"endColumn":16},{"ruleId":"789","severity":1,"message":"846","line":9,"column":10,"nodeType":"791","messageId":"792","endLine":9,"endColumn":19},{"ruleId":"789","severity":1,"message":"847","line":12,"column":9,"nodeType":"791","messageId":"792","endLine":12,"endColumn":21},{"ruleId":"789","severity":1,"message":"848","line":2,"column":37,"nodeType":"791","messageId":"792","endLine":2,"endColumn":48},{"ruleId":"812","severity":1,"message":"849","line":30,"column":8,"nodeType":"814","endLine":30,"endColumn":10,"suggestions":"850"},{"ruleId":"816","severity":1,"message":"817","line":60,"column":56,"nodeType":"818","endLine":60,"endColumn":77},{"ruleId":"816","severity":1,"message":"817","line":85,"column":55,"nodeType":"818","endLine":85,"endColumn":76},{"ruleId":"816","severity":1,"message":"817","line":86,"column":55,"nodeType":"818","endLine":86,"endColumn":77},{"ruleId":"789","severity":1,"message":"851","line":10,"column":3,"nodeType":"791","messageId":"792","endLine":10,"endColumn":7},{"ruleId":"789","severity":1,"message":"852","line":14,"column":10,"nodeType":"791","messageId":"792","endLine":14,"endColumn":14},{"ruleId":"789","severity":1,"message":"853","line":15,"column":10,"nodeType":"791","messageId":"792","endLine":15,"endColumn":25},{"ruleId":"789","severity":1,"message":"854","line":16,"column":8,"nodeType":"791","messageId":"792","endLine":16,"endColumn":15},{"ruleId":"789","severity":1,"message":"855","line":17,"column":8,"nodeType":"791","messageId":"792","endLine":17,"endColumn":15},{"ruleId":"789","severity":1,"message":"856","line":18,"column":8,"nodeType":"791","messageId":"792","endLine":18,"endColumn":16},{"ruleId":"789","severity":1,"message":"857","line":24,"column":8,"nodeType":"791","messageId":"792","endLine":24,"endColumn":14},{"ruleId":"789","severity":1,"message":"858","line":25,"column":8,"nodeType":"791","messageId":"792","endLine":25,"endColumn":13},{"ruleId":"789","severity":1,"message":"859","line":28,"column":8,"nodeType":"791","messageId":"792","endLine":28,"endColumn":17},{"ruleId":"789","severity":1,"message":"860","line":41,"column":10,"nodeType":"791","messageId":"792","endLine":41,"endColumn":23},{"ruleId":"789","severity":1,"message":"861","line":45,"column":10,"nodeType":"791","messageId":"792","endLine":45,"endColumn":20},{"ruleId":"789","severity":1,"message":"862","line":46,"column":10,"nodeType":"791","messageId":"792","endLine":46,"endColumn":19},{"ruleId":"789","severity":1,"message":"863","line":46,"column":21,"nodeType":"791","messageId":"792","endLine":46,"endColumn":33},{"ruleId":"789","severity":1,"message":"864","line":47,"column":10,"nodeType":"791","messageId":"792","endLine":47,"endColumn":20},{"ruleId":"789","severity":1,"message":"865","line":47,"column":22,"nodeType":"791","messageId":"792","endLine":47,"endColumn":35},{"ruleId":"789","severity":1,"message":"866","line":48,"column":10,"nodeType":"791","messageId":"792","endLine":48,"endColumn":22},{"ruleId":"789","severity":1,"message":"867","line":48,"column":24,"nodeType":"791","messageId":"792","endLine":48,"endColumn":39},{"ruleId":"868","severity":1,"message":"869","line":95,"column":11,"nodeType":"799","messageId":"870","endLine":95,"endColumn":20},{"ruleId":"812","severity":1,"message":"871","line":114,"column":6,"nodeType":"814","endLine":114,"endColumn":8,"suggestions":"872"},{"ruleId":"832","severity":1,"message":"833","line":122,"column":17,"nodeType":"799","messageId":"834","endLine":122,"endColumn":19},{"ruleId":"832","severity":1,"message":"833","line":127,"column":14,"nodeType":"799","messageId":"834","endLine":127,"endColumn":16},{"ruleId":"789","severity":1,"message":"873","line":143,"column":11,"nodeType":"791","messageId":"792","endLine":143,"endColumn":18},{"ruleId":"832","severity":1,"message":"833","line":186,"column":28,"nodeType":"799","messageId":"834","endLine":186,"endColumn":30},{"ruleId":"789","severity":1,"message":"874","line":188,"column":19,"nodeType":"791","messageId":"792","endLine":188,"endColumn":21},{"ruleId":"789","severity":1,"message":"875","line":255,"column":13,"nodeType":"791","messageId":"792","endLine":255,"endColumn":19},{"ruleId":"789","severity":1,"message":"876","line":10,"column":8,"nodeType":"791","messageId":"792","endLine":10,"endColumn":12},{"ruleId":"789","severity":1,"message":"877","line":11,"column":8,"nodeType":"791","messageId":"792","endLine":11,"endColumn":12},{"ruleId":"789","severity":1,"message":"878","line":12,"column":8,"nodeType":"791","messageId":"792","endLine":12,"endColumn":14},{"ruleId":"789","severity":1,"message":"879","line":13,"column":8,"nodeType":"791","messageId":"792","endLine":13,"endColumn":12},{"ruleId":"789","severity":1,"message":"880","line":18,"column":8,"nodeType":"791","messageId":"792","endLine":18,"endColumn":17},{"ruleId":"789","severity":1,"message":"881","line":21,"column":3,"nodeType":"791","messageId":"792","endLine":21,"endColumn":15},{"ruleId":"789","severity":1,"message":"882","line":29,"column":3,"nodeType":"791","messageId":"792","endLine":29,"endColumn":17},{"ruleId":"789","severity":1,"message":"883","line":49,"column":10,"nodeType":"791","messageId":"792","endLine":49,"endColumn":20},{"ruleId":"789","severity":1,"message":"884","line":49,"column":22,"nodeType":"791","messageId":"792","endLine":49,"endColumn":35},{"ruleId":"789","severity":1,"message":"885","line":57,"column":10,"nodeType":"791","messageId":"792","endLine":57,"endColumn":17},{"ruleId":"789","severity":1,"message":"886","line":57,"column":19,"nodeType":"791","messageId":"792","endLine":57,"endColumn":28},{"ruleId":"789","severity":1,"message":"887","line":59,"column":10,"nodeType":"791","messageId":"792","endLine":59,"endColumn":25},{"ruleId":"789","severity":1,"message":"888","line":59,"column":27,"nodeType":"791","messageId":"792","endLine":59,"endColumn":45},{"ruleId":"789","severity":1,"message":"889","line":61,"column":10,"nodeType":"791","messageId":"792","endLine":61,"endColumn":20},{"ruleId":"789","severity":1,"message":"890","line":61,"column":22,"nodeType":"791","messageId":"792","endLine":61,"endColumn":35},{"ruleId":"789","severity":1,"message":"891","line":62,"column":10,"nodeType":"791","messageId":"792","endLine":62,"endColumn":20},{"ruleId":"789","severity":1,"message":"892","line":63,"column":10,"nodeType":"791","messageId":"792","endLine":63,"endColumn":15},{"ruleId":"789","severity":1,"message":"893","line":63,"column":17,"nodeType":"791","messageId":"792","endLine":63,"endColumn":25},{"ruleId":"789","severity":1,"message":"894","line":64,"column":10,"nodeType":"791","messageId":"792","endLine":64,"endColumn":23},{"ruleId":"789","severity":1,"message":"895","line":64,"column":25,"nodeType":"791","messageId":"792","endLine":64,"endColumn":41},{"ruleId":"789","severity":1,"message":"896","line":65,"column":10,"nodeType":"791","messageId":"792","endLine":65,"endColumn":21},{"ruleId":"789","severity":1,"message":"897","line":65,"column":23,"nodeType":"791","messageId":"792","endLine":65,"endColumn":37},{"ruleId":"789","severity":1,"message":"898","line":66,"column":10,"nodeType":"791","messageId":"792","endLine":66,"endColumn":19},{"ruleId":"789","severity":1,"message":"899","line":66,"column":21,"nodeType":"791","messageId":"792","endLine":66,"endColumn":33},{"ruleId":"789","severity":1,"message":"900","line":67,"column":10,"nodeType":"791","messageId":"792","endLine":67,"endColumn":20},{"ruleId":"789","severity":1,"message":"901","line":67,"column":22,"nodeType":"791","messageId":"792","endLine":67,"endColumn":35},{"ruleId":"789","severity":1,"message":"902","line":68,"column":10,"nodeType":"791","messageId":"792","endLine":68,"endColumn":18},{"ruleId":"789","severity":1,"message":"903","line":71,"column":10,"nodeType":"791","messageId":"792","endLine":71,"endColumn":21},{"ruleId":"789","severity":1,"message":"904","line":72,"column":10,"nodeType":"791","messageId":"792","endLine":72,"endColumn":22},{"ruleId":"789","severity":1,"message":"905","line":78,"column":10,"nodeType":"791","messageId":"792","endLine":78,"endColumn":24},{"ruleId":"789","severity":1,"message":"906","line":78,"column":26,"nodeType":"791","messageId":"792","endLine":78,"endColumn":43},{"ruleId":"789","severity":1,"message":"907","line":79,"column":10,"nodeType":"791","messageId":"792","endLine":79,"endColumn":25},{"ruleId":"789","severity":1,"message":"908","line":79,"column":27,"nodeType":"791","messageId":"792","endLine":79,"endColumn":45},{"ruleId":"789","severity":1,"message":"909","line":80,"column":10,"nodeType":"791","messageId":"792","endLine":80,"endColumn":18},{"ruleId":"789","severity":1,"message":"910","line":80,"column":20,"nodeType":"791","messageId":"792","endLine":80,"endColumn":31},{"ruleId":"789","severity":1,"message":"911","line":81,"column":10,"nodeType":"791","messageId":"792","endLine":81,"endColumn":19},{"ruleId":"789","severity":1,"message":"912","line":81,"column":21,"nodeType":"791","messageId":"792","endLine":81,"endColumn":33},{"ruleId":"789","severity":1,"message":"913","line":82,"column":10,"nodeType":"791","messageId":"792","endLine":82,"endColumn":17},{"ruleId":"789","severity":1,"message":"914","line":82,"column":19,"nodeType":"791","messageId":"792","endLine":82,"endColumn":36},{"ruleId":"789","severity":1,"message":"915","line":83,"column":10,"nodeType":"791","messageId":"792","endLine":83,"endColumn":17},{"ruleId":"789","severity":1,"message":"916","line":83,"column":19,"nodeType":"791","messageId":"792","endLine":83,"endColumn":29},{"ruleId":"789","severity":1,"message":"917","line":84,"column":10,"nodeType":"791","messageId":"792","endLine":84,"endColumn":22},{"ruleId":"789","severity":1,"message":"918","line":84,"column":24,"nodeType":"791","messageId":"792","endLine":84,"endColumn":40},{"ruleId":"789","severity":1,"message":"919","line":85,"column":10,"nodeType":"791","messageId":"792","endLine":85,"endColumn":21},{"ruleId":"789","severity":1,"message":"920","line":85,"column":23,"nodeType":"791","messageId":"792","endLine":85,"endColumn":31},{"ruleId":"789","severity":1,"message":"921","line":86,"column":10,"nodeType":"791","messageId":"792","endLine":86,"endColumn":19},{"ruleId":"789","severity":1,"message":"922","line":86,"column":21,"nodeType":"791","messageId":"792","endLine":86,"endColumn":33},{"ruleId":"789","severity":1,"message":"923","line":87,"column":10,"nodeType":"791","messageId":"792","endLine":87,"endColumn":16},{"ruleId":"789","severity":1,"message":"924","line":87,"column":18,"nodeType":"791","messageId":"792","endLine":87,"endColumn":27},{"ruleId":"789","severity":1,"message":"925","line":88,"column":10,"nodeType":"791","messageId":"792","endLine":88,"endColumn":29},{"ruleId":"789","severity":1,"message":"926","line":88,"column":31,"nodeType":"791","messageId":"792","endLine":88,"endColumn":46},{"ruleId":"789","severity":1,"message":"927","line":89,"column":10,"nodeType":"791","messageId":"792","endLine":89,"endColumn":21},{"ruleId":"789","severity":1,"message":"928","line":90,"column":10,"nodeType":"791","messageId":"792","endLine":90,"endColumn":17},{"ruleId":"789","severity":1,"message":"929","line":91,"column":10,"nodeType":"791","messageId":"792","endLine":91,"endColumn":27},{"ruleId":"789","severity":1,"message":"930","line":91,"column":29,"nodeType":"791","messageId":"792","endLine":91,"endColumn":48},{"ruleId":"789","severity":1,"message":"931","line":92,"column":10,"nodeType":"791","messageId":"792","endLine":92,"endColumn":30},{"ruleId":"789","severity":1,"message":"932","line":92,"column":32,"nodeType":"791","messageId":"792","endLine":92,"endColumn":55},{"ruleId":"789","severity":1,"message":"933","line":93,"column":10,"nodeType":"791","messageId":"792","endLine":93,"endColumn":16},{"ruleId":"789","severity":1,"message":"934","line":93,"column":18,"nodeType":"791","messageId":"792","endLine":93,"endColumn":27},{"ruleId":"789","severity":1,"message":"935","line":96,"column":10,"nodeType":"791","messageId":"792","endLine":96,"endColumn":17},{"ruleId":"812","severity":1,"message":"936","line":101,"column":13,"nodeType":"937","endLine":120,"endColumn":4},{"ruleId":"832","severity":1,"message":"938","line":111,"column":16,"nodeType":"799","messageId":"834","endLine":111,"endColumn":18},{"ruleId":"812","severity":1,"message":"939","line":120,"column":6,"nodeType":"814","endLine":120,"endColumn":23,"suggestions":"940"},{"ruleId":"832","severity":1,"message":"938","line":161,"column":32,"nodeType":"799","messageId":"834","endLine":161,"endColumn":34},{"ruleId":"832","severity":1,"message":"938","line":296,"column":19,"nodeType":"799","messageId":"834","endLine":296,"endColumn":21},{"ruleId":"832","severity":1,"message":"833","line":362,"column":21,"nodeType":"799","messageId":"834","endLine":362,"endColumn":23},{"ruleId":"832","severity":1,"message":"938","line":411,"column":40,"nodeType":"799","messageId":"834","endLine":411,"endColumn":42},{"ruleId":"832","severity":1,"message":"938","line":428,"column":21,"nodeType":"799","messageId":"834","endLine":428,"endColumn":23},{"ruleId":"789","severity":1,"message":"941","line":433,"column":13,"nodeType":"791","messageId":"792","endLine":433,"endColumn":30},{"ruleId":"789","severity":1,"message":"942","line":437,"column":13,"nodeType":"791","messageId":"792","endLine":437,"endColumn":29},{"ruleId":"789","severity":1,"message":"943","line":442,"column":13,"nodeType":"791","messageId":"792","endLine":442,"endColumn":29},{"ruleId":"789","severity":1,"message":"944","line":443,"column":13,"nodeType":"791","messageId":"792","endLine":443,"endColumn":28},{"ruleId":"832","severity":1,"message":"938","line":508,"column":22,"nodeType":"799","messageId":"834","endLine":508,"endColumn":24},{"ruleId":"832","severity":1,"message":"833","line":518,"column":38,"nodeType":"799","messageId":"834","endLine":518,"endColumn":40},{"ruleId":"832","severity":1,"message":"833","line":520,"column":45,"nodeType":"799","messageId":"834","endLine":520,"endColumn":47},{"ruleId":"832","severity":1,"message":"833","line":524,"column":18,"nodeType":"799","messageId":"834","endLine":524,"endColumn":20},{"ruleId":"832","severity":1,"message":"938","line":525,"column":27,"nodeType":"799","messageId":"834","endLine":525,"endColumn":29},{"ruleId":"832","severity":1,"message":"938","line":528,"column":24,"nodeType":"799","messageId":"834","endLine":528,"endColumn":26},{"ruleId":"832","severity":1,"message":"938","line":542,"column":16,"nodeType":"799","messageId":"834","endLine":542,"endColumn":18},{"ruleId":"832","severity":1,"message":"938","line":546,"column":23,"nodeType":"799","messageId":"834","endLine":546,"endColumn":25},{"ruleId":"835","severity":1,"message":"836","line":558,"column":11,"nodeType":"818","messageId":"837","endLine":564,"endColumn":12,"fix":"945"},{"ruleId":"835","severity":1,"message":"836","line":583,"column":15,"nodeType":"818","messageId":"837","endLine":587,"endColumn":16,"fix":"946"},{"ruleId":"835","severity":1,"message":"836","line":614,"column":15,"nodeType":"818","messageId":"837","endLine":618,"endColumn":16,"fix":"947"},{"ruleId":"832","severity":1,"message":"938","line":824,"column":42,"nodeType":"799","messageId":"834","endLine":824,"endColumn":44},{"ruleId":"789","severity":1,"message":"948","line":19,"column":10,"nodeType":"791","messageId":"792","endLine":19,"endColumn":22},{"ruleId":"789","severity":1,"message":"949","line":33,"column":9,"nodeType":"791","messageId":"792","endLine":33,"endColumn":24},{"ruleId":"789","severity":1,"message":"950","line":52,"column":10,"nodeType":"791","messageId":"792","endLine":52,"endColumn":13},{"ruleId":"789","severity":1,"message":"951","line":52,"column":15,"nodeType":"791","messageId":"792","endLine":52,"endColumn":21},{"ruleId":"789","severity":1,"message":"952","line":29,"column":10,"nodeType":"791","messageId":"792","endLine":29,"endColumn":21},{"ruleId":"789","severity":1,"message":"931","line":94,"column":10,"nodeType":"791","messageId":"792","endLine":94,"endColumn":30},{"ruleId":"789","severity":1,"message":"933","line":95,"column":10,"nodeType":"791","messageId":"792","endLine":95,"endColumn":16},{"ruleId":"812","severity":1,"message":"849","line":104,"column":6,"nodeType":"814","endLine":104,"endColumn":25,"suggestions":"953"},{"ruleId":"789","severity":1,"message":"954","line":156,"column":9,"nodeType":"791","messageId":"792","endLine":156,"endColumn":30},{"ruleId":"789","severity":1,"message":"955","line":205,"column":15,"nodeType":"791","messageId":"792","endLine":205,"endColumn":16},{"ruleId":"789","severity":1,"message":"955","line":228,"column":15,"nodeType":"791","messageId":"792","endLine":228,"endColumn":16},{"ruleId":"789","severity":1,"message":"955","line":374,"column":21,"nodeType":"791","messageId":"792","endLine":374,"endColumn":22},{"ruleId":"789","severity":1,"message":"955","line":419,"column":21,"nodeType":"791","messageId":"792","endLine":419,"endColumn":22},{"ruleId":"789","severity":1,"message":"956","line":465,"column":11,"nodeType":"791","messageId":"792","endLine":465,"endColumn":14},{"ruleId":"832","severity":1,"message":"833","line":492,"column":18,"nodeType":"799","messageId":"834","endLine":492,"endColumn":20},{"ruleId":"789","severity":1,"message":"957","line":609,"column":5,"nodeType":"791","messageId":"792","endLine":609,"endColumn":14},{"ruleId":"816","severity":1,"message":"817","line":881,"column":15,"nodeType":"818","endLine":885,"endColumn":17},{"ruleId":"816","severity":1,"message":"817","line":886,"column":15,"nodeType":"818","endLine":886,"endColumn":80},{"ruleId":"816","severity":1,"message":"817","line":915,"column":15,"nodeType":"818","endLine":915,"endColumn":59},{"ruleId":"789","severity":1,"message":"958","line":31,"column":10,"nodeType":"791","messageId":"792","endLine":31,"endColumn":20},{"ruleId":"789","severity":1,"message":"959","line":36,"column":5,"nodeType":"791","messageId":"792","endLine":36,"endColumn":12},{"ruleId":"789","severity":1,"message":"960","line":51,"column":10,"nodeType":"791","messageId":"792","endLine":51,"endColumn":16},{"ruleId":"789","severity":1,"message":"961","line":51,"column":18,"nodeType":"791","messageId":"792","endLine":51,"endColumn":27},{"ruleId":"789","severity":1,"message":"891","line":58,"column":10,"nodeType":"791","messageId":"792","endLine":58,"endColumn":20},{"ruleId":"832","severity":1,"message":"938","line":106,"column":17,"nodeType":"799","messageId":"834","endLine":106,"endColumn":19},{"ruleId":"789","severity":1,"message":"962","line":122,"column":9,"nodeType":"791","messageId":"792","endLine":122,"endColumn":23},{"ruleId":"832","severity":1,"message":"938","line":128,"column":26,"nodeType":"799","messageId":"834","endLine":128,"endColumn":28},{"ruleId":"812","severity":1,"message":"849","line":141,"column":6,"nodeType":"814","endLine":141,"endColumn":23,"suggestions":"963"},{"ruleId":"789","severity":1,"message":"964","line":158,"column":11,"nodeType":"791","messageId":"792","endLine":158,"endColumn":28},{"ruleId":"789","severity":1,"message":"965","line":159,"column":11,"nodeType":"791","messageId":"792","endLine":159,"endColumn":33},{"ruleId":"832","severity":1,"message":"833","line":168,"column":113,"nodeType":"799","messageId":"834","endLine":168,"endColumn":115},{"ruleId":"789","severity":1,"message":"966","line":223,"column":9,"nodeType":"791","messageId":"792","endLine":223,"endColumn":23},{"ruleId":"816","severity":1,"message":"817","line":397,"column":19,"nodeType":"818","endLine":397,"endColumn":41},{"ruleId":"816","severity":1,"message":"817","line":420,"column":21,"nodeType":"818","endLine":420,"endColumn":45},{"ruleId":"789","severity":1,"message":"967","line":14,"column":3,"nodeType":"791","messageId":"792","endLine":14,"endColumn":29},{"ruleId":"789","severity":1,"message":"878","line":33,"column":8,"nodeType":"791","messageId":"792","endLine":33,"endColumn":14},{"ruleId":"789","severity":1,"message":"968","line":38,"column":8,"nodeType":"791","messageId":"792","endLine":38,"endColumn":24},{"ruleId":"789","severity":1,"message":"960","line":64,"column":10,"nodeType":"791","messageId":"792","endLine":64,"endColumn":16},{"ruleId":"789","severity":1,"message":"961","line":64,"column":18,"nodeType":"791","messageId":"792","endLine":64,"endColumn":27},{"ruleId":"789","severity":1,"message":"969","line":68,"column":10,"nodeType":"791","messageId":"792","endLine":68,"endColumn":17},{"ruleId":"789","severity":1,"message":"970","line":69,"column":10,"nodeType":"791","messageId":"792","endLine":69,"endColumn":22},{"ruleId":"789","severity":1,"message":"891","line":71,"column":10,"nodeType":"791","messageId":"792","endLine":71,"endColumn":20},{"ruleId":"789","severity":1,"message":"971","line":84,"column":10,"nodeType":"791","messageId":"792","endLine":84,"endColumn":19},{"ruleId":"789","severity":1,"message":"972","line":85,"column":10,"nodeType":"791","messageId":"792","endLine":85,"endColumn":24},{"ruleId":"789","severity":1,"message":"973","line":99,"column":9,"nodeType":"791","messageId":"792","endLine":99,"endColumn":23},{"ruleId":"812","severity":1,"message":"849","line":122,"column":6,"nodeType":"814","endLine":122,"endColumn":23,"suggestions":"974"},{"ruleId":"816","severity":1,"message":"817","line":380,"column":21,"nodeType":"818","endLine":380,"endColumn":43},{"ruleId":"816","severity":1,"message":"817","line":406,"column":21,"nodeType":"818","endLine":406,"endColumn":45},{"ruleId":"789","severity":1,"message":"975","line":129,"column":9,"nodeType":"791","messageId":"792","endLine":129,"endColumn":15},{"ruleId":"789","severity":1,"message":"976","line":21,"column":5,"nodeType":"791","messageId":"792","endLine":21,"endColumn":26},{"ruleId":"789","severity":1,"message":"795","line":145,"column":17,"nodeType":"791","messageId":"792","endLine":145,"endColumn":22},{"ruleId":"789","severity":1,"message":"796","line":153,"column":21,"nodeType":"791","messageId":"792","endLine":153,"endColumn":29},{"ruleId":"789","severity":1,"message":"795","line":179,"column":19,"nodeType":"791","messageId":"792","endLine":179,"endColumn":24},{"ruleId":"789","severity":1,"message":"796","line":187,"column":23,"nodeType":"791","messageId":"792","endLine":187,"endColumn":31},{"ruleId":"789","severity":1,"message":"795","line":216,"column":19,"nodeType":"791","messageId":"792","endLine":216,"endColumn":24},{"ruleId":"789","severity":1,"message":"958","line":7,"column":3,"nodeType":"791","messageId":"792","endLine":7,"endColumn":13},{"ruleId":"977","severity":1,"message":"978","line":121,"column":5,"nodeType":"979","messageId":"980","endLine":129,"endColumn":22},{"ruleId":"789","severity":1,"message":"981","line":1296,"column":7,"nodeType":"791","messageId":"792","endLine":1296,"endColumn":12},{"ruleId":"789","severity":1,"message":"981","line":1330,"column":7,"nodeType":"791","messageId":"792","endLine":1330,"endColumn":12},{"ruleId":"832","severity":1,"message":"833","line":1333,"column":44,"nodeType":"799","messageId":"834","endLine":1333,"endColumn":46},{"ruleId":"816","severity":1,"message":"817","line":38,"column":19,"nodeType":"818","endLine":38,"endColumn":46},{"ruleId":"816","severity":1,"message":"817","line":11,"column":35,"nodeType":"818","endLine":11,"endColumn":59},{"ruleId":"789","severity":1,"message":"982","line":8,"column":8,"nodeType":"791","messageId":"792","endLine":8,"endColumn":29},{"ruleId":"789","severity":1,"message":"983","line":11,"column":8,"nodeType":"791","messageId":"792","endLine":11,"endColumn":20},{"ruleId":"789","severity":1,"message":"984","line":13,"column":8,"nodeType":"791","messageId":"792","endLine":13,"endColumn":19},{"ruleId":"789","severity":1,"message":"985","line":14,"column":8,"nodeType":"791","messageId":"792","endLine":14,"endColumn":19},{"ruleId":"789","severity":1,"message":"986","line":15,"column":8,"nodeType":"791","messageId":"792","endLine":15,"endColumn":15},{"ruleId":"789","severity":1,"message":"987","line":16,"column":8,"nodeType":"791","messageId":"792","endLine":16,"endColumn":18},{"ruleId":"812","severity":1,"message":"988","line":74,"column":6,"nodeType":"814","endLine":74,"endColumn":8,"suggestions":"989"},{"ruleId":"816","severity":1,"message":"817","line":95,"column":21,"nodeType":"818","endLine":95,"endColumn":47},{"ruleId":"816","severity":1,"message":"817","line":113,"column":21,"nodeType":"818","endLine":113,"endColumn":45},{"ruleId":"789","severity":1,"message":"990","line":39,"column":13,"nodeType":"791","messageId":"792","endLine":39,"endColumn":23},{"ruleId":"789","severity":1,"message":"902","line":154,"column":26,"nodeType":"791","messageId":"792","endLine":154,"endColumn":34},{"ruleId":"789","severity":1,"message":"991","line":218,"column":13,"nodeType":"791","messageId":"792","endLine":218,"endColumn":16},{"ruleId":"789","severity":1,"message":"992","line":2,"column":27,"nodeType":"791","messageId":"792","endLine":2,"endColumn":33},{"ruleId":"789","severity":1,"message":"993","line":9,"column":9,"nodeType":"791","messageId":"792","endLine":9,"endColumn":27},{"ruleId":"789","severity":1,"message":"994","line":5,"column":10,"nodeType":"791","messageId":"792","endLine":5,"endColumn":15},{"ruleId":"789","severity":1,"message":"995","line":10,"column":12,"nodeType":"791","messageId":"792","endLine":10,"endColumn":28},{"ruleId":"812","severity":1,"message":"996","line":14,"column":8,"nodeType":"814","endLine":14,"endColumn":10,"suggestions":"997"},{"ruleId":"789","severity":1,"message":"998","line":2,"column":18,"nodeType":"791","messageId":"792","endLine":2,"endColumn":23},{"ruleId":"789","severity":1,"message":"999","line":13,"column":3,"nodeType":"791","messageId":"792","endLine":13,"endColumn":14},{"ruleId":"789","severity":1,"message":"1000","line":21,"column":8,"nodeType":"791","messageId":"792","endLine":21,"endColumn":18},{"ruleId":"789","severity":1,"message":"1001","line":30,"column":5,"nodeType":"791","messageId":"792","endLine":30,"endColumn":10},{"ruleId":"789","severity":1,"message":"1002","line":31,"column":5,"nodeType":"791","messageId":"792","endLine":31,"endColumn":17},{"ruleId":"789","severity":1,"message":"1003","line":32,"column":5,"nodeType":"791","messageId":"792","endLine":32,"endColumn":17},{"ruleId":"789","severity":1,"message":"1004","line":35,"column":5,"nodeType":"791","messageId":"792","endLine":35,"endColumn":19},{"ruleId":"789","severity":1,"message":"1005","line":42,"column":10,"nodeType":"791","messageId":"792","endLine":42,"endColumn":21},{"ruleId":"789","severity":1,"message":"1006","line":51,"column":10,"nodeType":"791","messageId":"792","endLine":51,"endColumn":13},{"ruleId":"832","severity":1,"message":"938","line":62,"column":26,"nodeType":"799","messageId":"834","endLine":62,"endColumn":28},{"ruleId":"832","severity":1,"message":"833","line":97,"column":37,"nodeType":"799","messageId":"834","endLine":97,"endColumn":39},{"ruleId":"832","severity":1,"message":"938","line":111,"column":40,"nodeType":"799","messageId":"834","endLine":111,"endColumn":42},{"ruleId":"832","severity":1,"message":"833","line":123,"column":37,"nodeType":"799","messageId":"834","endLine":123,"endColumn":39},{"ruleId":"832","severity":1,"message":"833","line":298,"column":21,"nodeType":"799","messageId":"834","endLine":298,"endColumn":23},{"ruleId":"832","severity":1,"message":"938","line":354,"column":19,"nodeType":"799","messageId":"834","endLine":354,"endColumn":21},{"ruleId":"832","severity":1,"message":"938","line":374,"column":21,"nodeType":"799","messageId":"834","endLine":374,"endColumn":23},{"ruleId":"832","severity":1,"message":"938","line":455,"column":16,"nodeType":"799","messageId":"834","endLine":455,"endColumn":18},{"ruleId":"832","severity":1,"message":"938","line":459,"column":23,"nodeType":"799","messageId":"834","endLine":459,"endColumn":25},{"ruleId":"789","severity":1,"message":"1007","line":463,"column":9,"nodeType":"791","messageId":"792","endLine":463,"endColumn":26},{"ruleId":"832","severity":1,"message":"938","line":464,"column":16,"nodeType":"799","messageId":"834","endLine":464,"endColumn":18},{"ruleId":"832","severity":1,"message":"938","line":468,"column":28,"nodeType":"799","messageId":"834","endLine":468,"endColumn":30},{"ruleId":"832","severity":1,"message":"938","line":469,"column":31,"nodeType":"799","messageId":"834","endLine":469,"endColumn":33},{"ruleId":"832","severity":1,"message":"833","line":470,"column":23,"nodeType":"799","messageId":"834","endLine":470,"endColumn":25},{"ruleId":"812","severity":1,"message":"936","line":484,"column":13,"nodeType":"937","endLine":487,"endColumn":4},{"ruleId":"812","severity":1,"message":"1008","line":487,"column":6,"nodeType":"814","endLine":487,"endColumn":23,"suggestions":"1009"},{"ruleId":"816","severity":1,"message":"817","line":494,"column":15,"nodeType":"818","endLine":500,"endColumn":17},{"ruleId":"816","severity":1,"message":"817","line":503,"column":15,"nodeType":"818","endLine":509,"endColumn":17},{"ruleId":"816","severity":1,"message":"817","line":558,"column":17,"nodeType":"818","endLine":558,"endColumn":40},{"ruleId":"789","severity":1,"message":"844","line":1,"column":17,"nodeType":"791","messageId":"792","endLine":1,"endColumn":25},{"ruleId":"789","severity":1,"message":"992","line":3,"column":27,"nodeType":"791","messageId":"792","endLine":3,"endColumn":33},{"ruleId":"832","severity":1,"message":"833","line":9,"column":20,"nodeType":"799","messageId":"834","endLine":9,"endColumn":22},{"ruleId":"832","severity":1,"message":"833","line":21,"column":20,"nodeType":"799","messageId":"834","endLine":21,"endColumn":22},{"ruleId":"789","severity":1,"message":"1010","line":24,"column":10,"nodeType":"791","messageId":"792","endLine":24,"endColumn":14},{"ruleId":"789","severity":1,"message":"1011","line":25,"column":9,"nodeType":"791","messageId":"792","endLine":25,"endColumn":20},{"ruleId":"789","severity":1,"message":"1012","line":26,"column":9,"nodeType":"791","messageId":"792","endLine":26,"endColumn":19},{"ruleId":"789","severity":1,"message":"1001","line":33,"column":75,"nodeType":"791","messageId":"792","endLine":33,"endColumn":80},{"ruleId":"789","severity":1,"message":"1002","line":33,"column":82,"nodeType":"791","messageId":"792","endLine":33,"endColumn":94},{"ruleId":"789","severity":1,"message":"1003","line":33,"column":96,"nodeType":"791","messageId":"792","endLine":33,"endColumn":108},{"ruleId":"789","severity":1,"message":"1013","line":34,"column":50,"nodeType":"791","messageId":"792","endLine":34,"endColumn":56},{"ruleId":"789","severity":1,"message":"1005","line":38,"column":10,"nodeType":"791","messageId":"792","endLine":38,"endColumn":21},{"ruleId":"789","severity":1,"message":"1014","line":46,"column":10,"nodeType":"791","messageId":"792","endLine":46,"endColumn":24},{"ruleId":"789","severity":1,"message":"1015","line":49,"column":10,"nodeType":"791","messageId":"792","endLine":49,"endColumn":21},{"ruleId":"812","severity":1,"message":"1016","line":56,"column":6,"nodeType":"814","endLine":56,"endColumn":23,"suggestions":"1017"},{"ruleId":"832","severity":1,"message":"938","line":62,"column":26,"nodeType":"799","messageId":"834","endLine":62,"endColumn":28},{"ruleId":"832","severity":1,"message":"938","line":72,"column":49,"nodeType":"799","messageId":"834","endLine":72,"endColumn":51},{"ruleId":"832","severity":1,"message":"938","line":90,"column":26,"nodeType":"799","messageId":"834","endLine":90,"endColumn":28},{"ruleId":"832","severity":1,"message":"938","line":100,"column":40,"nodeType":"799","messageId":"834","endLine":100,"endColumn":42},{"ruleId":"789","severity":1,"message":"1018","line":130,"column":11,"nodeType":"791","messageId":"792","endLine":130,"endColumn":16},{"ruleId":"832","severity":1,"message":"833","line":146,"column":17,"nodeType":"799","messageId":"834","endLine":146,"endColumn":19},{"ruleId":"832","severity":1,"message":"833","line":243,"column":21,"nodeType":"799","messageId":"834","endLine":243,"endColumn":23},{"ruleId":"832","severity":1,"message":"938","line":282,"column":19,"nodeType":"799","messageId":"834","endLine":282,"endColumn":21},{"ruleId":"832","severity":1,"message":"938","line":293,"column":22,"nodeType":"799","messageId":"834","endLine":293,"endColumn":24},{"ruleId":"832","severity":1,"message":"833","line":301,"column":38,"nodeType":"799","messageId":"834","endLine":301,"endColumn":40},{"ruleId":"832","severity":1,"message":"833","line":303,"column":45,"nodeType":"799","messageId":"834","endLine":303,"endColumn":47},{"ruleId":"832","severity":1,"message":"833","line":307,"column":18,"nodeType":"799","messageId":"834","endLine":307,"endColumn":20},{"ruleId":"832","severity":1,"message":"938","line":308,"column":27,"nodeType":"799","messageId":"834","endLine":308,"endColumn":29},{"ruleId":"832","severity":1,"message":"938","line":310,"column":33,"nodeType":"799","messageId":"834","endLine":310,"endColumn":35},{"ruleId":"832","severity":1,"message":"938","line":323,"column":21,"nodeType":"799","messageId":"834","endLine":323,"endColumn":23},{"ruleId":"816","severity":1,"message":"817","line":358,"column":13,"nodeType":"818","endLine":358,"endColumn":115},{"ruleId":"816","severity":1,"message":"817","line":366,"column":13,"nodeType":"818","endLine":366,"endColumn":110},{"ruleId":"868","severity":1,"message":"869","line":378,"column":17,"nodeType":"799","messageId":"870","endLine":378,"endColumn":45},{"ruleId":"868","severity":1,"message":"869","line":379,"column":19,"nodeType":"799","messageId":"870","endLine":379,"endColumn":47},{"ruleId":"816","severity":1,"message":"817","line":386,"column":15,"nodeType":"818","endLine":386,"endColumn":38},{"ruleId":"868","severity":1,"message":"869","line":413,"column":22,"nodeType":"799","messageId":"870","endLine":413,"endColumn":50},{"ruleId":"1019","severity":1,"message":"1020","line":419,"column":15,"nodeType":"818","endLine":419,"endColumn":27},{"ruleId":"1019","severity":1,"message":"1020","line":420,"column":15,"nodeType":"818","endLine":420,"endColumn":27},{"ruleId":"789","severity":1,"message":"1021","line":25,"column":15,"nodeType":"791","messageId":"792","endLine":25,"endColumn":27},{"ruleId":"789","severity":1,"message":"1022","line":293,"column":17,"nodeType":"791","messageId":"792","endLine":293,"endColumn":21},{"ruleId":"789","severity":1,"message":"811","line":1,"column":10,"nodeType":"791","messageId":"792","endLine":1,"endColumn":21},{"ruleId":"789","severity":1,"message":"1023","line":2,"column":10,"nodeType":"791","messageId":"792","endLine":2,"endColumn":22},{"ruleId":"789","severity":1,"message":"1024","line":2,"column":24,"nodeType":"791","messageId":"792","endLine":2,"endColumn":35},{"ruleId":"789","severity":1,"message":"1025","line":3,"column":10,"nodeType":"791","messageId":"792","endLine":3,"endColumn":24},{"ruleId":"789","severity":1,"message":"1026","line":113,"column":9,"nodeType":"791","messageId":"792","endLine":113,"endColumn":14},{"ruleId":"789","severity":1,"message":"1026","line":136,"column":9,"nodeType":"791","messageId":"792","endLine":136,"endColumn":14},{"ruleId":"789","severity":1,"message":"1026","line":159,"column":9,"nodeType":"791","messageId":"792","endLine":159,"endColumn":14},{"ruleId":"789","severity":1,"message":"1026","line":183,"column":9,"nodeType":"791","messageId":"792","endLine":183,"endColumn":14},{"ruleId":"789","severity":1,"message":"1026","line":205,"column":9,"nodeType":"791","messageId":"792","endLine":205,"endColumn":14},{"ruleId":"789","severity":1,"message":"1026","line":227,"column":9,"nodeType":"791","messageId":"792","endLine":227,"endColumn":14},{"ruleId":"789","severity":1,"message":"1026","line":251,"column":9,"nodeType":"791","messageId":"792","endLine":251,"endColumn":14},{"ruleId":"789","severity":1,"message":"1026","line":271,"column":9,"nodeType":"791","messageId":"792","endLine":271,"endColumn":14},{"ruleId":"789","severity":1,"message":"1026","line":296,"column":9,"nodeType":"791","messageId":"792","endLine":296,"endColumn":14},{"ruleId":"789","severity":1,"message":"1026","line":321,"column":9,"nodeType":"791","messageId":"792","endLine":321,"endColumn":14},{"ruleId":"789","severity":1,"message":"878","line":1,"column":8,"nodeType":"791","messageId":"792","endLine":1,"endColumn":14},{"ruleId":"789","severity":1,"message":"1027","line":2,"column":8,"nodeType":"791","messageId":"792","endLine":2,"endColumn":11},{"ruleId":"789","severity":1,"message":"1028","line":3,"column":8,"nodeType":"791","messageId":"792","endLine":3,"endColumn":11},{"ruleId":"789","severity":1,"message":"877","line":5,"column":8,"nodeType":"791","messageId":"792","endLine":5,"endColumn":12},{"ruleId":"789","severity":1,"message":"1029","line":6,"column":8,"nodeType":"791","messageId":"792","endLine":6,"endColumn":11},{"ruleId":"789","severity":1,"message":"1000","line":7,"column":8,"nodeType":"791","messageId":"792","endLine":7,"endColumn":18},{"ruleId":"789","severity":1,"message":"1030","line":9,"column":8,"nodeType":"791","messageId":"792","endLine":9,"endColumn":16},{"ruleId":"789","severity":1,"message":"1031","line":10,"column":8,"nodeType":"791","messageId":"792","endLine":10,"endColumn":12},{"ruleId":"789","severity":1,"message":"1032","line":11,"column":8,"nodeType":"791","messageId":"792","endLine":11,"endColumn":12},{"ruleId":"789","severity":1,"message":"876","line":12,"column":8,"nodeType":"791","messageId":"792","endLine":12,"endColumn":12},{"ruleId":"789","severity":1,"message":"1033","line":19,"column":8,"nodeType":"791","messageId":"792","endLine":19,"endColumn":14},{"ruleId":"789","severity":1,"message":"1034","line":20,"column":8,"nodeType":"791","messageId":"792","endLine":20,"endColumn":10},{"ruleId":"789","severity":1,"message":"1035","line":21,"column":8,"nodeType":"791","messageId":"792","endLine":21,"endColumn":12},{"ruleId":"816","severity":1,"message":"817","line":12,"column":12,"nodeType":"818","endLine":12,"endColumn":32},{"ruleId":"789","severity":1,"message":"852","line":3,"column":10,"nodeType":"791","messageId":"792","endLine":3,"endColumn":14},{"ruleId":"816","severity":1,"message":"817","line":42,"column":19,"nodeType":"818","endLine":42,"endColumn":69},{"ruleId":"816","severity":1,"message":"817","line":48,"column":15,"nodeType":"818","endLine":48,"endColumn":73},{"ruleId":"789","severity":1,"message":"1036","line":2,"column":21,"nodeType":"791","messageId":"792","endLine":2,"endColumn":24},{"ruleId":"789","severity":1,"message":"1037","line":3,"column":8,"nodeType":"791","messageId":"792","endLine":3,"endColumn":21},{"ruleId":"789","severity":1,"message":"1038","line":5,"column":8,"nodeType":"791","messageId":"792","endLine":5,"endColumn":21},{"ruleId":"789","severity":1,"message":"1039","line":6,"column":8,"nodeType":"791","messageId":"792","endLine":6,"endColumn":18},{"ruleId":"789","severity":1,"message":"1040","line":7,"column":8,"nodeType":"791","messageId":"792","endLine":7,"endColumn":16},{"ruleId":"789","severity":1,"message":"1041","line":8,"column":8,"nodeType":"791","messageId":"792","endLine":8,"endColumn":16},{"ruleId":"789","severity":1,"message":"1042","line":9,"column":8,"nodeType":"791","messageId":"792","endLine":9,"endColumn":15},{"ruleId":"789","severity":1,"message":"1043","line":14,"column":10,"nodeType":"791","messageId":"792","endLine":14,"endColumn":28},{"ruleId":"789","severity":1,"message":"958","line":14,"column":30,"nodeType":"791","messageId":"792","endLine":14,"endColumn":40},{"ruleId":"789","severity":1,"message":"1044","line":15,"column":10,"nodeType":"791","messageId":"792","endLine":15,"endColumn":26},{"ruleId":"789","severity":1,"message":"882","line":20,"column":3,"nodeType":"791","messageId":"792","endLine":20,"endColumn":17},{"ruleId":"789","severity":1,"message":"1045","line":21,"column":3,"nodeType":"791","messageId":"792","endLine":21,"endColumn":20},{"ruleId":"789","severity":1,"message":"992","line":26,"column":8,"nodeType":"791","messageId":"792","endLine":26,"endColumn":14},{"ruleId":"789","severity":1,"message":"1046","line":27,"column":10,"nodeType":"791","messageId":"792","endLine":27,"endColumn":19},{"ruleId":"789","severity":1,"message":"1047","line":28,"column":8,"nodeType":"791","messageId":"792","endLine":28,"endColumn":19},{"ruleId":"789","severity":1,"message":"1048","line":29,"column":8,"nodeType":"791","messageId":"792","endLine":29,"endColumn":26},{"ruleId":"789","severity":1,"message":"1049","line":31,"column":8,"nodeType":"791","messageId":"792","endLine":31,"endColumn":20},{"ruleId":"789","severity":1,"message":"852","line":32,"column":10,"nodeType":"791","messageId":"792","endLine":32,"endColumn":14},{"ruleId":"789","severity":1,"message":"1050","line":37,"column":10,"nodeType":"791","messageId":"792","endLine":37,"endColumn":15},{"ruleId":"789","severity":1,"message":"1051","line":38,"column":9,"nodeType":"791","messageId":"792","endLine":38,"endColumn":21},{"ruleId":"789","severity":1,"message":"1052","line":39,"column":9,"nodeType":"791","messageId":"792","endLine":39,"endColumn":20},{"ruleId":"789","severity":1,"message":"1049","line":17,"column":8,"nodeType":"791","messageId":"792","endLine":17,"endColumn":20},{"ruleId":"789","severity":1,"message":"1053","line":32,"column":10,"nodeType":"791","messageId":"792","endLine":32,"endColumn":22},{"ruleId":"789","severity":1,"message":"1054","line":39,"column":9,"nodeType":"791","messageId":"792","endLine":39,"endColumn":28},{"ruleId":"789","severity":1,"message":"1055","line":40,"column":9,"nodeType":"791","messageId":"792","endLine":40,"endColumn":26},{"ruleId":"812","severity":1,"message":"849","line":50,"column":6,"nodeType":"814","endLine":50,"endColumn":23,"suggestions":"1056"},{"ruleId":"789","severity":1,"message":"1057","line":52,"column":9,"nodeType":"791","messageId":"792","endLine":52,"endColumn":23},{"ruleId":"816","severity":1,"message":"817","line":70,"column":15,"nodeType":"818","endLine":74,"endColumn":17},{"ruleId":"816","severity":1,"message":"817","line":75,"column":15,"nodeType":"818","endLine":75,"endColumn":80},{"ruleId":"789","severity":1,"message":"1003","line":22,"column":9,"nodeType":"791","messageId":"792","endLine":22,"endColumn":21},{"ruleId":"789","severity":1,"message":"1058","line":27,"column":10,"nodeType":"791","messageId":"792","endLine":27,"endColumn":17},{"ruleId":"789","severity":1,"message":"1059","line":28,"column":9,"nodeType":"791","messageId":"792","endLine":28,"endColumn":24},{"ruleId":"789","severity":1,"message":"1060","line":34,"column":9,"nodeType":"791","messageId":"792","endLine":34,"endColumn":30},{"ruleId":"789","severity":1,"message":"1061","line":3,"column":26,"nodeType":"791","messageId":"792","endLine":3,"endColumn":30},{"ruleId":"789","severity":1,"message":"1062","line":3,"column":32,"nodeType":"791","messageId":"792","endLine":3,"endColumn":35},{"ruleId":"789","severity":1,"message":"1041","line":11,"column":8,"nodeType":"791","messageId":"792","endLine":11,"endColumn":16},{"ruleId":"789","severity":1,"message":"1042","line":12,"column":8,"nodeType":"791","messageId":"792","endLine":12,"endColumn":15},{"ruleId":"789","severity":1,"message":"1063","line":13,"column":8,"nodeType":"791","messageId":"792","endLine":13,"endColumn":18},{"ruleId":"789","severity":1,"message":"992","line":36,"column":8,"nodeType":"791","messageId":"792","endLine":36,"endColumn":14},{"ruleId":"789","severity":1,"message":"1010","line":43,"column":10,"nodeType":"791","messageId":"792","endLine":43,"endColumn":14},{"ruleId":"789","severity":1,"message":"1011","line":44,"column":9,"nodeType":"791","messageId":"792","endLine":44,"endColumn":20},{"ruleId":"789","severity":1,"message":"1012","line":45,"column":9,"nodeType":"791","messageId":"792","endLine":45,"endColumn":19},{"ruleId":"789","severity":1,"message":"1050","line":46,"column":10,"nodeType":"791","messageId":"792","endLine":46,"endColumn":15},{"ruleId":"789","severity":1,"message":"1064","line":52,"column":10,"nodeType":"791","messageId":"792","endLine":52,"endColumn":21},{"ruleId":"789","severity":1,"message":"1065","line":52,"column":23,"nodeType":"791","messageId":"792","endLine":52,"endColumn":37},{"ruleId":"789","severity":1,"message":"1066","line":53,"column":9,"nodeType":"791","messageId":"792","endLine":53,"endColumn":13},{"ruleId":"789","severity":1,"message":"1067","line":81,"column":10,"nodeType":"791","messageId":"792","endLine":81,"endColumn":26},{"ruleId":"789","severity":1,"message":"1068","line":82,"column":10,"nodeType":"791","messageId":"792","endLine":82,"endColumn":26},{"ruleId":"789","severity":1,"message":"1069","line":84,"column":10,"nodeType":"791","messageId":"792","endLine":84,"endColumn":24},{"ruleId":"789","severity":1,"message":"1070","line":86,"column":10,"nodeType":"791","messageId":"792","endLine":86,"endColumn":25},{"ruleId":"789","severity":1,"message":"1071","line":90,"column":10,"nodeType":"791","messageId":"792","endLine":90,"endColumn":31},{"ruleId":"789","severity":1,"message":"1072","line":94,"column":10,"nodeType":"791","messageId":"792","endLine":94,"endColumn":28},{"ruleId":"789","severity":1,"message":"1073","line":95,"column":10,"nodeType":"791","messageId":"792","endLine":95,"endColumn":23},{"ruleId":"789","severity":1,"message":"1074","line":96,"column":10,"nodeType":"791","messageId":"792","endLine":96,"endColumn":23},{"ruleId":"789","severity":1,"message":"1053","line":101,"column":10,"nodeType":"791","messageId":"792","endLine":101,"endColumn":22},{"ruleId":"789","severity":1,"message":"1075","line":103,"column":10,"nodeType":"791","messageId":"792","endLine":103,"endColumn":27},{"ruleId":"789","severity":1,"message":"1076","line":103,"column":29,"nodeType":"791","messageId":"792","endLine":103,"endColumn":49},{"ruleId":"789","severity":1,"message":"1077","line":111,"column":10,"nodeType":"791","messageId":"792","endLine":111,"endColumn":22},{"ruleId":"789","severity":1,"message":"1078","line":111,"column":24,"nodeType":"791","messageId":"792","endLine":111,"endColumn":38},{"ruleId":"812","severity":1,"message":"849","line":123,"column":6,"nodeType":"814","endLine":123,"endColumn":25,"suggestions":"1079"},{"ruleId":"812","severity":1,"message":"1080","line":129,"column":6,"nodeType":"814","endLine":129,"endColumn":65,"suggestions":"1081"},{"ruleId":"789","severity":1,"message":"955","line":190,"column":15,"nodeType":"791","messageId":"792","endLine":190,"endColumn":16},{"ruleId":"789","severity":1,"message":"955","line":215,"column":15,"nodeType":"791","messageId":"792","endLine":215,"endColumn":16},{"ruleId":"789","severity":1,"message":"1082","line":345,"column":11,"nodeType":"791","messageId":"792","endLine":345,"endColumn":18},{"ruleId":"789","severity":1,"message":"1083","line":346,"column":11,"nodeType":"791","messageId":"792","endLine":346,"endColumn":18},{"ruleId":"789","severity":1,"message":"956","line":384,"column":13,"nodeType":"791","messageId":"792","endLine":384,"endColumn":16},{"ruleId":"789","severity":1,"message":"1054","line":644,"column":9,"nodeType":"791","messageId":"792","endLine":644,"endColumn":28},{"ruleId":"832","severity":1,"message":"833","line":809,"column":18,"nodeType":"799","messageId":"834","endLine":809,"endColumn":20},{"ruleId":"832","severity":1,"message":"833","line":819,"column":18,"nodeType":"799","messageId":"834","endLine":819,"endColumn":20},{"ruleId":"832","severity":1,"message":"833","line":926,"column":14,"nodeType":"799","messageId":"834","endLine":926,"endColumn":16},{"ruleId":"812","severity":1,"message":"936","line":1014,"column":13,"nodeType":"937","endLine":1016,"endColumn":4},{"ruleId":"812","severity":1,"message":"1084","line":1016,"column":6,"nodeType":"814","endLine":1016,"endColumn":8,"suggestions":"1085"},{"ruleId":"816","severity":1,"message":"817","line":1040,"column":15,"nodeType":"818","endLine":1044,"endColumn":17},{"ruleId":"816","severity":1,"message":"817","line":1045,"column":15,"nodeType":"818","endLine":1045,"endColumn":80},{"ruleId":"816","severity":1,"message":"817","line":1062,"column":13,"nodeType":"818","endLine":1062,"endColumn":36},{"ruleId":"789","severity":1,"message":"805","line":4,"column":10,"nodeType":"791","messageId":"792","endLine":4,"endColumn":18},{"ruleId":"789","severity":1,"message":"959","line":10,"column":11,"nodeType":"791","messageId":"792","endLine":10,"endColumn":18},{"ruleId":"812","severity":1,"message":"849","line":12,"column":10,"nodeType":"814","endLine":12,"endColumn":36,"suggestions":"1086"},{"ruleId":"789","severity":1,"message":"1087","line":2,"column":15,"nodeType":"791","messageId":"792","endLine":2,"endColumn":18},{"ruleId":"816","severity":1,"message":"817","line":10,"column":7,"nodeType":"818","endLine":10,"endColumn":36},{"ruleId":"789","severity":1,"message":"852","line":2,"column":10,"nodeType":"791","messageId":"792","endLine":2,"endColumn":14},{"ruleId":"789","severity":1,"message":"1088","line":3,"column":8,"nodeType":"791","messageId":"792","endLine":3,"endColumn":12},{"ruleId":"789","severity":1,"message":"1089","line":4,"column":8,"nodeType":"791","messageId":"792","endLine":4,"endColumn":16},{"ruleId":"789","severity":1,"message":"1036","line":5,"column":10,"nodeType":"791","messageId":"792","endLine":5,"endColumn":13},{"ruleId":"789","severity":1,"message":"992","line":5,"column":27,"nodeType":"791","messageId":"792","endLine":5,"endColumn":33},{"ruleId":"789","severity":1,"message":"1090","line":5,"column":8,"nodeType":"791","messageId":"792","endLine":5,"endColumn":16},{"ruleId":"789","severity":1,"message":"1091","line":6,"column":8,"nodeType":"791","messageId":"792","endLine":6,"endColumn":15},{"ruleId":"789","severity":1,"message":"1092","line":26,"column":8,"nodeType":"791","messageId":"792","endLine":26,"endColumn":20},{"ruleId":"789","severity":1,"message":"1093","line":45,"column":10,"nodeType":"791","messageId":"792","endLine":45,"endColumn":24},{"ruleId":"789","severity":1,"message":"1094","line":77,"column":22,"nodeType":"791","messageId":"792","endLine":77,"endColumn":35},{"ruleId":"812","severity":1,"message":"849","line":92,"column":6,"nodeType":"814","endLine":92,"endColumn":37,"suggestions":"1095"},{"ruleId":"832","severity":1,"message":"833","line":410,"column":29,"nodeType":"799","messageId":"834","endLine":410,"endColumn":31},{"ruleId":"816","severity":1,"message":"817","line":829,"column":29,"nodeType":"818","endLine":829,"endColumn":79},{"ruleId":"816","severity":1,"message":"817","line":839,"column":25,"nodeType":"818","endLine":842,"endColumn":27},{"ruleId":"816","severity":1,"message":"817","line":843,"column":25,"nodeType":"818","endLine":846,"endColumn":27},{"ruleId":"789","severity":1,"message":"852","line":2,"column":10,"nodeType":"791","messageId":"792","endLine":2,"endColumn":14},{"ruleId":"789","severity":1,"message":"1088","line":3,"column":8,"nodeType":"791","messageId":"792","endLine":3,"endColumn":12},{"ruleId":"789","severity":1,"message":"1089","line":4,"column":8,"nodeType":"791","messageId":"792","endLine":4,"endColumn":16},{"ruleId":"789","severity":1,"message":"1036","line":5,"column":10,"nodeType":"791","messageId":"792","endLine":5,"endColumn":13},{"ruleId":"789","severity":1,"message":"992","line":5,"column":27,"nodeType":"791","messageId":"792","endLine":5,"endColumn":33},"no-native-reassign",["1096"],"no-negated-in-lhs",["1097"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'Confirmation' is defined but never used.","'useSelector' is defined but never used.","'chain' is assigned a value but never used.","'addChain' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'Redirect' is defined but never used.","'Referral' is defined but never used.","'FarmPlanets' is defined but never used.","'AddLiquidity' is defined but never used.","'rootName' is defined but never used.","'PoolGalaxy' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","'UserService' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'addListeners', 'dispatch', and 'walletType'. Either include them or remove the dependency array.","ArrayExpression",["1098"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useEffect' is defined but never used.","'Docs' is defined but never used.","'Medium' is defined but never used.","'Github' is defined but never used.","'Globe' is defined but never used.","'ANCHOR_BUSD_LP' is defined but never used.","'AUDIT' is defined but never used.","'DOCS' is defined but never used.","'INSURANCE_FUND' is defined but never used.","'LOTTERY' is defined but never used.","'NIOB_SHARING' is defined but never used.","'PREDICTION_TRAINING' is defined but never used.","'TRADING_FEE_CASHBACK' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","unexpected","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","noTargetBlankWithoutNoreferrer",{"range":"1099","text":"1100"},{"range":"1101","text":"1100"},{"range":"1102","text":"1100"},{"range":"1103","text":"1100"},{"range":"1104","text":"1100"},{"range":"1105","text":"1100"},"'useState' is defined but never used.","'MetaMask' is defined but never used.","'addCommas' is defined but never used.","'footerValues' is assigned a value but never used.","'FormControl' is defined but never used.","React Hook useEffect has a missing dependency: 'init'. Either include it or remove the dependency array.",["1106"],"'Form' is defined but never used.","'Link' is defined but never used.","'CopyToClipboard' is defined but never used.","'Reflink' is defined but never used.","'Twitter' is defined but never used.","'Telegram' is defined but never used.","'Loader' is defined but never used.","'Timer' is defined but never used.","'SwapModal' is defined but never used.","'transactionNo' is assigned a value but never used.","'isDisabled' is assigned a value but never used.","'timerDays' is assigned a value but never used.","'setTimerDays' is assigned a value but never used.","'timerHours' is assigned a value but never used.","'setTimerHours' is assigned a value but never used.","'timerMinutes' is assigned a value but never used.","'setTimerMinutes' is assigned a value but never used.","use-isnan","Use the isNaN function to compare with NaN.","comparisonWithNaN","React Hook useEffect has a missing dependency: 'someF'. Either include it or remove the dependency array.",["1107"],"'seconds' is assigned a value but never used.","'tx' is assigned a value but never used.","'result' is assigned a value but never used.","'NIOB' is defined but never used.","'BUSD' is defined but never used.","'ANCHOR' is defined but never used.","'BTCB' is defined but never used.","'Statement' is defined but never used.","'BURN_ADDRESS' is defined but never used.","'addTransaction' is defined but never used.","'potDetails' is assigned a value but never used.","'setPotDetails' is assigned a value but never used.","'rewards' is assigned a value but never used.","'seRewards' is assigned a value but never used.","'transferTaxRate' is assigned a value but never used.","'setTransferTaxRate' is assigned a value but never used.","'walletShow' is assigned a value but never used.","'setWalletShow' is assigned a value but never used.","'poolLength' is assigned a value but never used.","'farms' is assigned a value but never used.","'setFarms' is assigned a value but never used.","'inactiveFarms' is assigned a value but never used.","'setInactiveFarms' is assigned a value but never used.","'stakingOnly' is assigned a value but never used.","'setStakingOnly' is assigned a value but never used.","'stakeData' is assigned a value but never used.","'setStakeData' is assigned a value but never used.","'stakeValue' is assigned a value but never used.","'setStakeValue' is assigned a value but never used.","'referrer' is assigned a value but never used.","'totalAmount' is assigned a value but never used.","'totalRewards' is assigned a value but never used.","'anchorBnbWorth' is assigned a value but never used.","'setAnchorBnbWorth' is assigned a value but never used.","'anchorBusdWorth' is assigned a value but never used.","'setAnchorBusdWorth' is assigned a value but never used.","'tokenIds' is assigned a value but never used.","'setTokenIds' is assigned a value but never used.","'allowance' is assigned a value but never used.","'setAllowance' is assigned a value but never used.","'disable' is assigned a value but never used.","'setDisabledBUtton' is assigned a value but never used.","'IButton' is assigned a value but never used.","'setIButton' is assigned a value but never used.","'ticketWindow' is assigned a value but never used.","'openTicketWindow' is assigned a value but never used.","'ticketValue' is assigned a value but never used.","'setvalue' is assigned a value but never used.","'buyButton' is assigned a value but never used.","'setBuyButton' is assigned a value but never used.","'loader' is assigned a value but never used.","'setLoader' is assigned a value but never used.","'currentTicketsArray' is assigned a value but never used.","'setCurrentArray' is assigned a value but never used.","'showHarvest' is assigned a value but never used.","'harvest' is assigned a value but never used.","'stakeConfirmation' is assigned a value but never used.","'setStakeConfimation' is assigned a value but never used.","'showTransactionModal' is assigned a value but never used.","'setShowTransactionModal' is assigned a value but never used.","'txHash' is assigned a value but never used.","'setTxHash' is assigned a value but never used.","'niobApr' is assigned a value but never used.","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","Expected '!==' and instead saw '!='.","React Hook useEffect has missing dependencies: 'dispatch', 'init', and 'ref'. Either include them or remove the dependency array.",["1108"],"'tokenZeroPairUSDT' is assigned a value but never used.","'tokenOnePairUSDT' is assigned a value but never used.","'tokenZeroPairBNB' is assigned a value but never used.","'tokenOnePairBNB' is assigned a value but never used.",{"range":"1109","text":"1110"},{"range":"1111","text":"1100"},{"range":"1112","text":"1100"},"'colLiquidity' is assigned a value but never used.","'handleComponent' is assigned a value but never used.","'key' is assigned a value but never used.","'setKey' is assigned a value but never used.","'ConsoleView' is defined but never used.",["1113"],"'closeTransactionModal' is assigned a value but never used.","'r' is assigned a value but never used.","'acc' is assigned a value but never used.","'liquidity' is assigned a value but never used.","'TOKEN_LIST' is defined but never used.","'history' is assigned a value but never used.","'active' is assigned a value but never used.","'setActive' is assigned a value but never used.","'getSortedPools' is assigned a value but never used.",["1114"],"'activePoolsToSort' is assigned a value but never used.","'stakingOnlyArrayToSort' is assigned a value but never used.","'handleROIModal' is assigned a value but never used.","'searchTokenByNameOrAddress' is defined but never used.","'TransactionModal' is defined but never used.","'showAPY' is assigned a value but never used.","'roiModalData' is assigned a value but never used.","'lpDetails' is assigned a value but never used.","'selectedPairId' is assigned a value but never used.","'cloaseRoiModal' is assigned a value but never used.",["1115"],"'tkList' is assigned a value but never used.","'walletConnectProvider' is defined but never used.","no-unreachable","Unreachable code.","ExpressionStatement","unreachableCode","'value' is assigned a value but never used.","'WalletConnectProvider' is defined but never used.","'iconCoinbase' is defined but never used.","'TokenPocket' is defined but never used.","'TrustWallet' is defined but never used.","'Binance' is defined but never used.","'MathWallet' is defined but never used.","React Hook useEffect has a missing dependency: 'loginCall'. Either include it or remove the dependency array.",["1116"],"'is_visible' is assigned a value but never used.","'pid' is assigned a value but never used.","'Button' is defined but never used.","'recentTransactions' is assigned a value but never used.","'toast' is defined but never used.","'niobWithdrawable' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'init', 'props.isNiobWithdrawabe', and 'props?.stakeData?.isLocked'. Either include them or remove the dependency array.",["1117"],"'Table' is defined but never used.","'BNB_BUSD_LP' is defined but never used.","'defaultImg' is defined but never used.","'index' is assigned a value but never used.","'currentIndex' is assigned a value but never used.","'handleChange' is assigned a value but never used.","'handleRoiModal' is assigned a value but never used.","'totalSupply' is assigned a value but never used.","'roi' is assigned a value but never used.","'handleDefaultIcon' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getSaitaDollarValue' and 'init'. Either include them or remove the dependency array.",["1118"],"'show' is assigned a value but never used.","'handleClose' is assigned a value but never used.","'handleShow' is assigned a value but never used.","'status' is assigned a value but never used.","'pantherAddress' is assigned a value but never used.","'dollarValue' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getAnchorDollarValue' and 'init'. Either include them or remove the dependency array.",["1119"],"'price' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'tokenBalance' is assigned a value but never used.","'data' is assigned a value but never used.","'startLoading' is defined but never used.","'stopLoading' is defined but never used.","'PersistActions' is defined but never used.","'state' is assigned a value but never used.","'BTC' is defined but never used.","'BNB' is defined but never used.","'ADA' is defined but never used.","'POLKADOT' is defined but never used.","'TRON' is defined but never used.","'CAKE' is defined but never used.","'SHAMAN' is defined but never used.","'LP' is defined but never used.","'ETH1' is defined but never used.","'Col' is defined but never used.","'ConnectWallet' is defined but never used.","'ButtonPrimary' is defined but never used.","'SelectCoin' is defined but never used.","'Plusicon' is defined but never used.","'NIOBIcon' is defined but never used.","'BNBIcon' is defined but never used.","'MAIN_CONTRACT_LIST' is defined but never used.","'ContractServices' is defined but never used.","'checkUserLpTokens' is defined but never used.","'BigNumber' is defined but never used.","'SupplyModal' is defined but never used.","'RecentTransactions' is defined but never used.","'TokenBalance' is defined but never used.","'show1' is assigned a value but never used.","'handleClose1' is assigned a value but never used.","'handleShow1' is assigned a value but never used.","'showSettings' is assigned a value but never used.","'handleCloseSettings' is assigned a value but never used.","'handleCloseRecent' is assigned a value but never used.",["1120"],"'toggleDropdwon' is assigned a value but never used.","'isAdded' is assigned a value but never used.","'handleTokenList' is assigned a value but never used.","'handleRemoveTokenList' is assigned a value but never used.","'Tabs' is defined but never used.","'Tab' is defined but never used.","'SwitchIcon' is defined but never used.","'classToggle' is assigned a value but never used.","'setClassToggle' is assigned a value but never used.","'lock' is assigned a value but never used.","'tokenOneApproved' is assigned a value but never used.","'tokenTwoApproved' is assigned a value but never used.","'lpTokenBalance' is assigned a value but never used.","'showSupplyModal' is assigned a value but never used.","'liquidityConfirmation' is assigned a value but never used.","'currentPairAddress' is assigned a value but never used.","'firstProvider' is assigned a value but never used.","'showPoolShare' is assigned a value but never used.","'slippageTolerance' is assigned a value but never used.","'setSlippageTolerance' is assigned a value but never used.","'existingPair' is assigned a value but never used.","'setPairAddress' is assigned a value but never used.",["1121"],"React Hook useEffect has missing dependencies: 'handleTokenValue' and 'tokenOneValue'. Either include them or remove the dependency array.",["1122"],"'pairOne' is assigned a value but never used.","'pairTwo' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'checkTokenORCurrencyBalance'. Either include it or remove the dependency array.",["1123"],["1124"],"'Row' is defined but never used.","'Card' is defined but never used.","'closeBtn' is defined but never used.","'NiobIcon' is defined but never used.","'BnbIcon' is defined but never used.","'iconDropDown' is defined but never used.","'sharePoolValue' is assigned a value but never used.","'setReceiveBNB' is assigned a value but never used.",["1125"],"no-global-assign","no-unsafe-negation",{"desc":"1126","fix":"1127"},[9416,9416]," rel=\"noreferrer\"",[9619,9619],[9841,9841],[10004,10004],[10273,10273],[10427,10427],{"desc":"1128","fix":"1129"},{"desc":"1130","fix":"1131"},{"desc":"1132","fix":"1133"},[20277,20289],"\"stylesheet noreferrer\"",[21406,21406],[22564,22564],{"desc":"1134","fix":"1135"},{"desc":"1136","fix":"1137"},{"desc":"1136","fix":"1138"},{"desc":"1139","fix":"1140"},{"desc":"1141","fix":"1142"},{"desc":"1143","fix":"1144"},{"desc":"1145","fix":"1146"},{"desc":"1136","fix":"1147"},{"desc":"1134","fix":"1148"},{"desc":"1149","fix":"1150"},{"desc":"1151","fix":"1152"},{"desc":"1153","fix":"1154"},{"desc":"1155","fix":"1156"},"Update the dependencies array to be: [addListeners, dispatch, walletType]",{"range":"1157","text":"1158"},"Update the dependencies array to be: [init]",{"range":"1159","text":"1160"},"Update the dependencies array to be: [someF]",{"range":"1161","text":"1162"},"Update the dependencies array to be: [dispatch, init, isUserConnected, ref]",{"range":"1163","text":"1164"},"Update the dependencies array to be: [init, search, tokenList]",{"range":"1165","text":"1166"},"Update the dependencies array to be: [init, isUserConnected]",{"range":"1167","text":"1168"},{"range":"1169","text":"1168"},"Update the dependencies array to be: [loginCall]",{"range":"1170","text":"1171"},"Update the dependencies array to be: [init, props.isNiobWithdrawabe, props?.stakeData?.isLocked]",{"range":"1172","text":"1173"},"Update the dependencies array to be: [getSaitaDollarValue, init, isUserConnected]",{"range":"1174","text":"1175"},"Update the dependencies array to be: [getAnchorDollarValue, init, isUserConnected]",{"range":"1176","text":"1177"},{"range":"1178","text":"1168"},{"range":"1179","text":"1166"},"Update the dependencies array to be: [tokenTwo, tokenTwoCurrency, tokenTwoBalance, tokenTwoIcon, tokenOneValue, handleTokenValue]",{"range":"1180","text":"1181"},"Update the dependencies array to be: [checkTokenORCurrencyBalance]",{"range":"1182","text":"1183"},"Update the dependencies array to be: [isUserConnected, address, init]",{"range":"1184","text":"1185"},"Update the dependencies array to be: [search, tokenList, props.show, init]",{"range":"1186","text":"1187"},[1173,1175],"[addListeners, dispatch, walletType]",[1140,1142],"[init]",[3943,3945],"[someF]",[5000,5017],"[dispatch, init, isUserConnected, ref]",[4682,4701],"[init, search, tokenList]",[4535,4552],"[init, isUserConnected]",[3915,3932],[2764,2766],"[loginCall]",[523,525],"[init, props.isNiobWithdrawabe, props?.stakeData?.isLocked]",[16708,16725],"[getSaitaDollarValue, init, isUserConnected]",[2707,2724],"[getAnchorDollarValue, init, isUserConnected]",[2107,2124],[5528,5547],[5653,5712],"[tokenTwo, tokenTwoCurrency, tokenTwoBalance, tokenTwoIcon, tokenOneValue, handleTokenValue]",[33970,33972],"[checkTokenORCurrencyBalance]",[392,418],"[isUserConnected, address, init]",[3964,3995],"[search, tokenList, props.show, init]"]