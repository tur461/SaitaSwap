[{"/data/nm/SaitaSwap/src/index.js":"1","/data/nm/SaitaSwap/src/reportWebVitals.js":"2","/data/nm/SaitaSwap/src/App.js":"3","/data/nm/SaitaSwap/src/Application.js":"4","/data/nm/SaitaSwap/src/redux/store.js":"5","/data/nm/SaitaSwap/src/redux/reducers/history.js":"6","/data/nm/SaitaSwap/src/constant.js":"7","/data/nm/SaitaSwap/src/Confirmation.js":"8","/data/nm/SaitaSwap/src/redux/reducers/index.js":"9","/data/nm/SaitaSwap/src/routes/PublicRoutes/PublicRoutes.js":"10","/data/nm/SaitaSwap/src/components/LoaderComponent/LoaderComponent.js":"11","/data/nm/SaitaSwap/src/redux/reducers/security.js":"12","/data/nm/SaitaSwap/src/redux/reducers/loading.js":"13","/data/nm/SaitaSwap/src/redux/reducers/register.js":"14","/data/nm/SaitaSwap/src/redux/reducers/persist.js":"15","/data/nm/SaitaSwap/src/redux/reducers/farm.js":"16","/data/nm/SaitaSwap/src/components/Header/Header.js":"17","/data/nm/SaitaSwap/src/components/Sidebar/Sidebar.js":"18","/data/nm/SaitaSwap/src/components/Footer/Footer.js":"19","/data/nm/SaitaSwap/src/pages/Referral/Referral.js":"20","/data/nm/SaitaSwap/src/pages/Trade/Staking.js":"21","/data/nm/SaitaSwap/src/pages/Home/Home.js":"22","/data/nm/SaitaSwap/src/pages/Trade/Trade.js":"23","/data/nm/SaitaSwap/src/pages/Trade/AddLiquidity.js":"24","/data/nm/SaitaSwap/src/pages/PoolGalaxy/PoolGalaxy.js":"25","/data/nm/SaitaSwap/src/pages/FarmPlanets/FarmPlanets.js":"26","/data/nm/SaitaSwap/src/redux/actions/index.js":"27","/data/nm/SaitaSwap/src/redux/actions/LoadingActions.js":"28","/data/nm/SaitaSwap/src/redux/actions/PersistActions.js":"29","/data/nm/SaitaSwap/src/services/UserService.js":"30","/data/nm/SaitaSwap/src/services/ContractServices.js":"31","/data/nm/SaitaSwap/src/services/ExchangeService.js":"32","/data/nm/SaitaSwap/src/components/ProfileModal/ProfileModal.js":"33","/data/nm/SaitaSwap/src/components/Button/Button.js":"34","/data/nm/SaitaSwap/src/components/ConnectWallet/ConnectWallet.js":"35","/data/nm/SaitaSwap/src/services/ReferralsServices.js":"36","/data/nm/SaitaSwap/src/hooks/getWindowDimensions.js":"37","/data/nm/SaitaSwap/src/components/ScrollTop/ScrollTop.js":"38","/data/nm/SaitaSwap/src/services/FarmService.js":"39","/data/nm/SaitaSwap/src/components/Toast/Toast.js":"40","/data/nm/SaitaSwap/src/components/TransactionalModal/TransactionalModal.js":"41","/data/nm/SaitaSwap/src/components/TransactionModal/TransactionModal.js":"42","/data/nm/SaitaSwap/src/components/GetLPToken/WithDrawLPToken.js":"43","/data/nm/SaitaSwap/src/components/GetLPToken/GetLPToken.js":"44","/data/nm/SaitaSwap/src/components/PlanetCard/PlanetCard.js":"45","/data/nm/SaitaSwap/src/components/ReturnInvest/ReturnInvest.js":"46","/data/nm/SaitaSwap/src/components/GalaxyCard/GalaxyCard.js":"47","/data/nm/SaitaSwap/src/redux/actions/ExchangeActions.js":"48","/data/nm/SaitaSwap/src/redux/actions/tokenActions.js":"49","/data/nm/SaitaSwap/src/redux/actions/SecurityActions.js":"50","/data/nm/SaitaSwap/src/redux/actions/FarmAction.js":"51","/data/nm/SaitaSwap/src/redux/actions/RegisterActions.js":"52","/data/nm/SaitaSwap/src/redux/actions/AuthActions.js":"53","/data/nm/SaitaSwap/src/assets/tokens/index.js":"54","/data/nm/SaitaSwap/src/services/Fetch.js":"55","/data/nm/SaitaSwap/src/components/Card/Card.js":"56","/data/nm/SaitaSwap/src/components/RecentTransactions/RecentTransactions.js":"57","/data/nm/SaitaSwap/src/components/SupplyModal/SupplyModal.js":"58","/data/nm/SaitaSwap/src/components/buttonBack/ButtonBack.js":"59","/data/nm/SaitaSwap/src/components/selectCoin/SelectCoin.js":"60","/data/nm/SaitaSwap/src/pages/Trade/ImportPool.js":"61","/data/nm/SaitaSwap/src/components/Modal/SettingModal/SettingModal.js":"62","/data/nm/SaitaSwap/src/pages/Trade/Liquidity.js":"63","/data/nm/SaitaSwap/src/components/Modal/ModalCurrency/ModalCurrency.js":"64","/data/nm/SaitaSwap/src/pages/Trade/Exchange.js":"65","/data/nm/SaitaSwap/src/components/cardCustom/CardCustom.js":"66","/data/nm/SaitaSwap/src/services/SecurityService.js":"67","/data/nm/SaitaSwap/src/components/Timer/Timer.js":"68","/data/nm/SaitaSwap/src/components/FarmCard/FarmCard.js":"69","/data/nm/SaitaSwap/src/Helpers/storageHelper.js":"70","/data/nm/SaitaSwap/src/pages/Trade/TokenBalance.js":"71","/data/nm/SaitaSwap/src/components/coinItem/CoinItem.js":"72","/data/nm/SaitaSwap/src/components/SwapModal/SwapModal.js":"73","/data/nm/SaitaSwap/src/components/buttonLink/ButtonLink.js":"74","/data/nm/SaitaSwap/src/components/Modal/RemoveLiquidity/RemoveLiquidity.js":"75","/data/nm/SaitaSwap/src/pages/Trade/RangeSlider.js":"76"},{"size":573,"mtime":1655813874000,"results":"77","hashOfConfig":"78"},{"size":362,"mtime":1655813606000,"results":"79","hashOfConfig":"78"},{"size":705,"mtime":1655813874000,"results":"80","hashOfConfig":"78"},{"size":1088,"mtime":1655813874000,"results":"81","hashOfConfig":"78"},{"size":1099,"mtime":1655813874000,"results":"82","hashOfConfig":"78"},{"size":94,"mtime":1655813874000,"results":"83","hashOfConfig":"78"},{"size":3301,"mtime":1656400007230,"results":"84","hashOfConfig":"78"},{"size":1067,"mtime":1656063010553,"results":"85","hashOfConfig":"78"},{"size":782,"mtime":1655813874000,"results":"86","hashOfConfig":"78"},{"size":3391,"mtime":1658227245764,"results":"87","hashOfConfig":"78"},{"size":708,"mtime":1655813874000,"results":"88","hashOfConfig":"78"},{"size":1336,"mtime":1655813874000,"results":"89","hashOfConfig":"78"},{"size":377,"mtime":1655813874000,"results":"90","hashOfConfig":"78"},{"size":431,"mtime":1655813874000,"results":"91","hashOfConfig":"78"},{"size":2563,"mtime":1655816405483,"results":"92","hashOfConfig":"78"},{"size":400,"mtime":1655813874000,"results":"93","hashOfConfig":"78"},{"size":3669,"mtime":1655813874000,"results":"94","hashOfConfig":"78"},{"size":9779,"mtime":1658227118863,"results":"95","hashOfConfig":"78"},{"size":2440,"mtime":1656936796685,"results":"96","hashOfConfig":"78"},{"size":6514,"mtime":1656063010557,"results":"97","hashOfConfig":"78"},{"size":16256,"mtime":1658211767238,"results":"98","hashOfConfig":"78"},{"size":30160,"mtime":1656496797147,"results":"99","hashOfConfig":"78"},{"size":6074,"mtime":1656420403594,"results":"100","hashOfConfig":"78"},{"size":34754,"mtime":1658210413540,"results":"101","hashOfConfig":"78"},{"size":20429,"mtime":1656420403594,"results":"102","hashOfConfig":"78"},{"size":18911,"mtime":1657019163827,"results":"103","hashOfConfig":"78"},{"size":264,"mtime":1655813874000,"results":"104","hashOfConfig":"78"},{"size":377,"mtime":1655813874000,"results":"105","hashOfConfig":"78"},{"size":3567,"mtime":1657791468076,"results":"106","hashOfConfig":"78"},{"size":706,"mtime":1655813874000,"results":"107","hashOfConfig":"78"},{"size":13432,"mtime":1657627419466,"results":"108","hashOfConfig":"78"},{"size":39548,"mtime":1658320835985,"results":"109","hashOfConfig":"78"},{"size":2082,"mtime":1656070660757,"results":"110","hashOfConfig":"78"},{"size":338,"mtime":1655813874000,"results":"111","hashOfConfig":"78"},{"size":4968,"mtime":1657796660931,"results":"112","hashOfConfig":"78"},{"size":1296,"mtime":1655813874000,"results":"113","hashOfConfig":"78"},{"size":581,"mtime":1655813874000,"results":"114","hashOfConfig":"78"},{"size":950,"mtime":1655813606000,"results":"115","hashOfConfig":"78"},{"size":8672,"mtime":1658310170253,"results":"116","hashOfConfig":"78"},{"size":511,"mtime":1655813874000,"results":"117","hashOfConfig":"78"},{"size":1400,"mtime":1656073090431,"results":"118","hashOfConfig":"78"},{"size":1645,"mtime":1656073098199,"results":"119","hashOfConfig":"78"},{"size":3746,"mtime":1655813874000,"results":"120","hashOfConfig":"78"},{"size":2475,"mtime":1655813874000,"results":"121","hashOfConfig":"78"},{"size":25833,"mtime":1658317066770,"results":"122","hashOfConfig":"78"},{"size":4118,"mtime":1655813874000,"results":"123","hashOfConfig":"78"},{"size":18408,"mtime":1656063010557,"results":"124","hashOfConfig":"78"},{"size":9865,"mtime":1657538415095,"results":"125","hashOfConfig":"78"},{"size":493,"mtime":1655813874000,"results":"126","hashOfConfig":"78"},{"size":7423,"mtime":1655813874000,"results":"127","hashOfConfig":"78"},{"size":1,"mtime":1655813874000,"results":"128","hashOfConfig":"78"},{"size":1660,"mtime":1655813874000,"results":"129","hashOfConfig":"78"},{"size":733,"mtime":1655813874000,"results":"130","hashOfConfig":"78"},{"size":12514,"mtime":1658310364830,"results":"131","hashOfConfig":"78"},{"size":1538,"mtime":1656420403594,"results":"132","hashOfConfig":"78"},{"size":192,"mtime":1655813874000,"results":"133","hashOfConfig":"78"},{"size":3562,"mtime":1656265360209,"results":"134","hashOfConfig":"78"},{"size":2842,"mtime":1656509092733,"results":"135","hashOfConfig":"78"},{"size":439,"mtime":1655813606000,"results":"136","hashOfConfig":"78"},{"size":1591,"mtime":1656509092733,"results":"137","hashOfConfig":"78"},{"size":8947,"mtime":1657876689091,"results":"138","hashOfConfig":"78"},{"size":4978,"mtime":1655813874000,"results":"139","hashOfConfig":"78"},{"size":6990,"mtime":1658228921840,"results":"140","hashOfConfig":"78"},{"size":2962,"mtime":1656062911590,"results":"141","hashOfConfig":"78"},{"size":39737,"mtime":1658121208180,"results":"142","hashOfConfig":"78"},{"size":270,"mtime":1655813606000,"results":"143","hashOfConfig":"78"},{"size":2181,"mtime":1655813874000,"results":"144","hashOfConfig":"78"},{"size":285,"mtime":1656654840723,"results":"145","hashOfConfig":"78"},{"size":1162,"mtime":1655813874000,"results":"146","hashOfConfig":"78"},{"size":637,"mtime":1655813874000,"results":"147","hashOfConfig":"78"},{"size":1048,"mtime":1655813874000,"results":"148","hashOfConfig":"78"},{"size":360,"mtime":1655813874000,"results":"149","hashOfConfig":"78"},{"size":2084,"mtime":1655813874000,"results":"150","hashOfConfig":"78"},{"size":309,"mtime":1655813606000,"results":"151","hashOfConfig":"78"},{"size":33441,"mtime":1657889674121,"results":"152","hashOfConfig":"78"},{"size":729,"mtime":1655813874000,"results":"153","hashOfConfig":"78"},{"filePath":"154","messages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},"f7cgan",{"filePath":"157","messages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"159","messages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"161","messages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"156"},{"filePath":"164","messages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"166","messages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"168","messages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"156"},{"filePath":"171","messages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"156"},{"filePath":"174","messages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"176","messages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"156"},{"filePath":"179","messages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"181","messages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"183","messages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"185","messages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"156"},{"filePath":"188","messages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"190","messages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"192","messages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"156"},{"filePath":"195","messages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":3,"source":"197","usedDeprecatedRules":"156"},{"filePath":"198","messages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"156"},{"filePath":"201","messages":"202","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"156"},{"filePath":"204","messages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"156"},{"filePath":"207","messages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":84,"fixableErrorCount":0,"fixableWarningCount":3,"source":"209","usedDeprecatedRules":"156"},{"filePath":"210","messages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"156"},{"filePath":"213","messages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"156"},{"filePath":"216","messages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"156"},{"filePath":"219","messages":"220","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"156"},{"filePath":"222","messages":"223","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"224","messages":"225","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"226","messages":"227","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"156"},{"filePath":"229","messages":"230","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"231","messages":"232","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233","usedDeprecatedRules":"156"},{"filePath":"234","messages":"235","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"236","messages":"237","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"156"},{"filePath":"239","messages":"240","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"156"},{"filePath":"242","messages":"243","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244","usedDeprecatedRules":"156"},{"filePath":"245","messages":"246","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"247","messages":"248","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"249","messages":"250","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251","usedDeprecatedRules":"156"},{"filePath":"252","messages":"253","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"254","messages":"255","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"256","messages":"257","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"258","usedDeprecatedRules":"156"},{"filePath":"259","messages":"260","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"261","messages":"262","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"263","usedDeprecatedRules":"156"},{"filePath":"264","messages":"265","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"266","messages":"267","errorCount":0,"fatalErrorCount":0,"warningCount":29,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"268","messages":"269","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270","usedDeprecatedRules":"156"},{"filePath":"271","messages":"272","errorCount":0,"fatalErrorCount":0,"warningCount":34,"fixableErrorCount":0,"fixableWarningCount":0,"source":"273","usedDeprecatedRules":"156"},{"filePath":"274","messages":"275","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"276","usedDeprecatedRules":"156"},{"filePath":"277","messages":"278","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"279","usedDeprecatedRules":"156"},{"filePath":"280","messages":"281","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"282","usedDeprecatedRules":"156"},{"filePath":"283","messages":"284","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"285","messages":"286","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"287","messages":"288","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"289","messages":"290","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"291","messages":"292","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"293","messages":"294","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"295","messages":"296","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"297","messages":"298","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"299","messages":"300","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"301","usedDeprecatedRules":"156"},{"filePath":"302","messages":"303","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"304","usedDeprecatedRules":"156"},{"filePath":"305","messages":"306","errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"307","usedDeprecatedRules":"156"},{"filePath":"308","messages":"309","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"310","messages":"311","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"312","usedDeprecatedRules":"156"},{"filePath":"313","messages":"314","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"315","usedDeprecatedRules":"156"},{"filePath":"316","messages":"317","errorCount":0,"fatalErrorCount":0,"warningCount":38,"fixableErrorCount":0,"fixableWarningCount":0,"source":"318","usedDeprecatedRules":"156"},{"filePath":"319","messages":"320","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"321","messages":"322","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"323","messages":"324","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"325","messages":"326","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"327","usedDeprecatedRules":"156"},{"filePath":"328","messages":"329","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"330","messages":"331","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"332","usedDeprecatedRules":"156"},{"filePath":"333","messages":"334","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"335","usedDeprecatedRules":"156"},{"filePath":"336","messages":"337","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"338","usedDeprecatedRules":"156"},{"filePath":"339","messages":"340","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"341","messages":"342","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"343","usedDeprecatedRules":"156"},{"filePath":"344","messages":"345","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},"/data/nm/SaitaSwap/src/index.js",[],["346","347"],"/data/nm/SaitaSwap/src/reportWebVitals.js",[],"/data/nm/SaitaSwap/src/App.js",[],"/data/nm/SaitaSwap/src/Application.js",["348","349","350"],"import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport PublicRoutes from \"./routes/PublicRoutes/PublicRoutes\";\nimport { rootName } from \"./constant\";\nimport LoaderComponent from \"./components/LoaderComponent/LoaderComponent\";\nimport Confirmation from \"./Confirmation\";\nimport { useSelector } from \"react-redux\";\n\nconst Application = () => {\n    // const hasAccess = useSelector(state => state.persist.hasAccess);\n\n    return (\n        // <>\n            // {hasAccess === false ?\n                // <> <Confirmation /> </>\n                // :\n                <>\n                    <LoaderComponent></LoaderComponent>\n                    <Router>\n                        <Switch>\n                            {/* <AuthGuard path={`${rootName}/auth`} component={PrivateRoutes} /> */}\n                            <Route path={`${rootName}/`} component={PublicRoutes} />\n                        </Switch>\n                    </Router>\n                </>\n            // }\n        // </>\n    )\n}\n\nexport default Application\n","/data/nm/SaitaSwap/src/redux/store.js",[],"/data/nm/SaitaSwap/src/redux/reducers/history.js",[],"/data/nm/SaitaSwap/src/constant.js",["351","352","353","354"],"export const rootName = \"\";\nexport const HOME_ROUTE = process.env.REACT_APP_HOME_ROUTE;\nexport const API_HOST = process.env.REACT_APP_API_URL;\nexport const CAPTCHA_KEY = process.env.REACT_APP_GOOGLE_CAPTCHA_KEY;\nexport const BSC_SCAN = \"https://rinkeby.etherscan.io\";\nexport const NETWORK_CHAIN_NAME = process.env.REACT_APP_NETWORK_CHAIN_NAME;\nexport const NETWORK_RPC_URL = process.env.REACT_APP_NETWORK_RPC_URL;\nexport const NETWORK_LINK = process.env.REACT_APP_NETWORK_LINK;\nexport const NETWORK_VERSION = process.env.REACT_APP_NETWORK_VERSION;\nexport const NETWORK_CHAIN_ID = process.env.REACT_APP_NETWORK_CHAIN_ID;\nexport const NETWORK_NATIVE_CURRENCY_NAME =\n  process.env.REACT_APP_NETWORK_NATIVE_CURRENCY_NAME;\nexport const NETWORK_NATIVE_CURRENCY_SYMBOL =\n  process.env.REACT_APP_NETWORK_NATIVE_CURRENCY_SYMBOL;\nexport const NETWORK_NATIVE_CURRENCY_DECIMALS =\n  process.env.REACT_APP_NETWORK_NATIVE_CURRENCY_DECIMALS;\nexport const globalResErrMsg = \"Woops something went wrong, Please try again.\";\nexport const SUCCESS_200 = 200;\nexport const BAD_REQUEST = 400;\nexport const UNAUTHORISED = 401;\nexport const AUTH_TOKEN_KEY = \"api-access-token\";\nexport const PASSPORT_FRONT = 0;\nexport const PASSPORT_BACK = 4;\nexport const LICENSE_FRONT = 2;\nexport const LICENSE_BACK = 3;\nexport const NATIONAL_ID = 1;\nexport const KYC_SUBMITTED = 0;\nexport const KYC_APPROVED = 1;\nexport const KYC_DECLINED = 2;\nexport const KYC_RE_SUBMITTED = 3;\nexport const LIQUIDITY_PROVIDER_FEE = 0.2;\nexport const DOCS_LINK = \"https://docs.anchorswap.finance\";\nexport const TWITTER_LINK = \"https://twitter.com/AnchorSwap\";\nexport const TELEGRAM_LINK = \"https://t.me/joinchat/KP-_HKro73ViZTZk\";\nexport const AUDIT_LINK = \"https://docs.anchorswap.finance/audit/\";\n\nexport const isMetamakConnected = async () => {\n  const { ethereum } = window;\n  const result = Boolean(ethereum && ethereum.isMetaMask);\n  try {\n    if (result) {\n      const chain = await ethereum.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{ chainId: NETWORK_CHAIN_ID }],\n      });\n      return true;\n    } else {\n      window.alert(`Install Metamask extension first!`);\n      window.open(\"https://metamask.io/\", \"_blank\");\n      return false;\n    }\n  } catch (error) {\n    if (error?.code === 4902) {\n      try {\n        const addChain = await ethereum.request({\n          method: \"wallet_addEthereumChain\",\n          params: [\n            {\n              chainId: await window.ethereum.chainId,\n              chainName: NETWORK_CHAIN_NAME,\n              nativeCurrency: {\n                name: NETWORK_NATIVE_CURRENCY_NAME,\n                symbol: NETWORK_NATIVE_CURRENCY_SYMBOL,\n                decimals: Number(NETWORK_NATIVE_CURRENCY_DECIMALS),\n              },\n              rpcUrls: [NETWORK_RPC_URL],\n              blockExplorerUrls: [NETWORK_LINK],\n            },\n          ],\n        });\n\n        return true;\n      } catch (error) {\n        return false;\n      }\n    }\n    if (error?.code === 4001) {\n      return false;\n    }\n    throw error;\n  }\n};\n\nexport const addCommas = (nStr) => {\n  nStr += \"\";\n  let x = nStr.split(\".\");\n  let x1 = x[0];\n  let x2 = x.length > 1 ? \".\" + x[1] : \"\";\n  let rgx = /(\\d+)(\\d{3})/;\n  while (rgx.test(x1)) {\n    x1 = x1.replace(rgx, \"$1\" + \",\" + \"$2\");\n  }\n  return x1 + x2;\n};\n","/data/nm/SaitaSwap/src/Confirmation.js",["355"],"import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { loginConfirmationScreen } from \"./redux/actions\";\n\nconst Confirmation = () => {\n    const dispatch = useDispatch();\n\n    let m = \"hN5r&HCPMs\";\n    const [inputValue, setInputValue] = useState(\"\");\n\n    const onChange = (e) => {\n        setInputValue(e.target.value);\n    }\n\n    const handleEnter = (e) => {\n        e.preventDefault();\n        if(inputValue === m) {\n            dispatch(loginConfirmationScreen())\n        }\n    }\n\n    return (\n          <div className=\"d-center\">\n              <div className=\"information-box\">\n                <h3>Welcome To SaitaSwap</h3>  \n                <h3>Please Enter Code To Access Site</h3>\n                <form action=\"\">\n                    <input type=\"text\" value={inputValue} onChange={onChange} className=\"form-control mb-3\" />\n                    <h6><button onClick={handleEnter}>Enter</button></h6>\n                </form>\n              </div>\n          </div>\n        \n    )\n}\n\nexport default Confirmation\n","/data/nm/SaitaSwap/src/redux/reducers/index.js",[],"/data/nm/SaitaSwap/src/routes/PublicRoutes/PublicRoutes.js",["356","357","358","359","360","361"],"import React, { useEffect, useState } from \"react\";\nimport { Route, Redirect, Switch } from \"react-router-dom\";\nimport { useLocation, withRouter } from \"react-router\";\nimport Header from \"../../components/Header/Header\";\nimport Sidebar from \"../../components/Sidebar/Sidebar\";\nimport Home from \"../../pages/Home/Home\";\nimport Referral from \"../../pages/Referral/Referral\";\nimport FarmPlanets from \"../../pages/FarmPlanets/FarmPlanets\";\nimport Footer from \"../../components/Footer/Footer\";\nimport Trade from \"../../pages/Trade/Trade\";\nimport AddLiquidity from \"../../pages/Trade/AddLiquidity\";\nimport { rootName } from \"../../constant\";\nimport PoolGalaxy from \"../../pages/PoolGalaxy/PoolGalaxy\";\nimport ReactGA from \"react-ga\";\nimport Staking from \"../../pages/Trade/Staking\";\nconst PublicRoutes = () => {\n  const location = useLocation();\n\n  useEffect(() => {\n    ReactGA.initialize(\"UA-216327768-1\");\n    ReactGA.pageview(location.pathname + location.search);\n  }, [location]);\n\n  const [small, setSmall] = useState(false);\n  const [navCollapse, setNavCollapse] = useState(false);\n  const [tradeDropdown, openCloseTradeDropdown] = useState(false);\n\n  useEffect(() => {\n    if (typeof window !== \"undefined\") {\n      window.addEventListener(\"scroll\", () =>\n        setSmall(window.pageYOffset > 200)\n      );\n    }\n  }, []);\n\n  const handleNavCollapse = () => {\n    setNavCollapse((prevNavCollapse) => !prevNavCollapse);\n    if (navCollapse === false) {\n      document.body.className = \"expande_container\";\n      // return () => { document.body.className = ''; }\n    } else {\n      document.body.className = \"\";\n    }\n  };\n\n  const handleSubNav = () => {\n    setNavCollapse((prevNavCollapse) => prevNavCollapse);\n  };\n\n  return (\n    <>\n      <Header\n        className={`fixed ${small ? \"isFixed\" : \"\"}`}\n        small_nav={() => handleNavCollapse()}\n        mobileIcon={navCollapse}\n      />\n      <Sidebar\n        small_nav={() => handleNavCollapse()}\n        className={`fixed ${small ? \"isFixed\" : \"\"} ${\n          navCollapse ? \"small_nav\" : \"\"\n        }`}\n        showSocial={navCollapse}\n        onClickOpenSidebar={() => handleSubNav()}\n        closeSidebar={() => {\n          handleNavCollapse();\n        }}\n        tradeDropdown={() => {\n          if (navCollapse === true) {\n            alert(\"collapsed\");\n            handleNavCollapse();\n          }\n        }}\n        tradeDropdown={!tradeDropdown}\n        onOpenChange={(open) => {\n          alert(\"fd\");\n          openCloseTradeDropdown(!open);\n        }}\n      />\n      <Switch>\n        <Route path={\"/\"} component={Trade} exact={true} />\n        <Route path={\"/home\"} component={Trade} exact={true} />\n        <Route path={\"/r/:ref\"} component={Home} />\n        {/* <Route path={\"/referral\"} component={Referral} exact={true} /> */}\n        <Route path={\"/staking\"} component={Staking} exact={true} />\n        <Route\n          path={\"/farmplanets/:tab\"}\n          component={FarmPlanets}\n          exact={true}\n        />\n        <Route path={\"/trade/:tab/:fillter?\"} component={Trade} exact={true} />\n        {/* <Route\n              path={'/trade/addLiquidity'}\n              component={AddLiquidity}\n              exact={true} \n          /> */}\n        {/* <Route path={\"/poolgalaxy\"} component={PoolGalaxy} exact={true} /> */}\n      </Switch>\n      <Footer />\n    </>\n  );\n};\n\nexport default withRouter(PublicRoutes);\n","/data/nm/SaitaSwap/src/components/LoaderComponent/LoaderComponent.js",[],"/data/nm/SaitaSwap/src/redux/reducers/security.js",[],"/data/nm/SaitaSwap/src/redux/reducers/loading.js",[],"/data/nm/SaitaSwap/src/redux/reducers/register.js",["362"],"import { UserService } from \"../../services/UserService\";\nimport { actionTypes } from \"../actions\";\n\nconst initialState = {\n  email: \"\",\n  captcha: \"\"\n};\n\nconst register = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.REGISTER_FORM_UPDATE:\n      return {\n\n        ...state, [action.payload.prop]: action.payload.value\n\n      };\n\n\n\n    default:\n      return state;\n  }\n}\nexport default register;\n","/data/nm/SaitaSwap/src/redux/reducers/persist.js",[],"/data/nm/SaitaSwap/src/redux/reducers/farm.js",[],"/data/nm/SaitaSwap/src/components/Header/Header.js",["363","364","365"],"import React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\"\nimport './Header.scss'\nimport { Link } from 'react-router-dom'\nimport IconToggle from '../../assets/images/menu_toggle_icon.png'\nimport Iconmenu from '../../assets/images/wrap-menu.png'\nimport Button from \"../Button/Button\";\nimport ConnectWallet from \"../ConnectWallet/ConnectWallet\";\nimport ProfileModal from \"../ProfileModal/ProfileModal\";\nimport { login, logout, versionManager } from \"../../redux/actions\"\nimport { ContractServices } from \"../../services/ContractServices\";\n\nconst Header = props => {\n    const dispatch = useDispatch();\n    const isUserConnected = useSelector(state => state.persist.isUserConnected);\n    const walletType = useSelector(state => state.persist.walletType);\n    const [show, setShow] = useState(false);\n    useEffect(() => {\n        const init = async () => {\n            await dispatch(versionManager());\n            if (walletType) {\n                await ContractServices.setWalletType(walletType);\n            } else {\n                dispatch(logout());\n            }\n        };\n        init();\n        addListeners();\n    }, []);\n    const handleClose = () => setShow(false);\n\n    const handleShow = () => setShow(true);\n\n    const connectCall = () => {\n        isUserConnected ? setShow(!show) : setShow(true);\n    }\n    const addListeners = async () => {\n        let address;\n        if (walletType === 'Metamask') {\n            address = await ContractServices.isMetamaskInstalled('');\n        }\n        if (walletType === 'BinanceChain') {\n            address = await ContractServices.isBinanceChainInstalled();\n        }\n\n        ContractServices.walletWindowListener();\n        if (address) {\n            window.ethereum.on('accountsChanged', function (accounts) {\n                const account = accounts[0];\n                dispatch(login({ account, walletType }));\n                window.location.reload();\n            });\n        }\n    };\n    const logoutCall = () => {\n        dispatch(logout());\n        setShow(false);\n    }\n\n    return (\n        <div className={`header_style ${props.className}`}>\n            <div className=\"header_left_style\">\n                <div className=\"for_desktop\">\n                    <div className=\"hamburg\" onClick={props.small_nav}>\n                        {\n                            props.mobileIcon ?\n                                <img src={Iconmenu} alt=\"\" />\n                                :\n                                <img src={IconToggle} />\n                        }\n                    </div>\n                </div>\n                <div className=\"for_mobile\">\n                    <div className=\"hamburg\" onClick={props.small_nav}>\n                        {\n                            props.mobileIcon ?\n                                <img src={IconToggle} />\n                                :\n                                <img src={Iconmenu} alt=\"\" />\n                        }\n                    </div>\n                </div>\n                <Link to=\"/home\" className=\"header_logo\"></Link>\n            </div>\n            <div className=\"header_right_style\">\n                <Button onClick={() => connectCall()} title={isUserConnected ? `${isUserConnected.substring(1, 6)}...${isUserConnected.substr(isUserConnected.length - 4)}` : 'Connect'} />\n            </div>\n            {isUserConnected === \"\" && <ConnectWallet show={show} handleShow={handleShow} handleClose={handleClose} />}\n            {isUserConnected !== \"\" && <ProfileModal show={show} handleClose={handleClose} logout={logoutCall} />}\n        </div>\n\n    )\n}\n\nexport default Header;","/data/nm/SaitaSwap/src/components/Sidebar/Sidebar.js",["366","367","368","369","370","371","372","373","374","375","376","377","378","379","380","381","382","383","384","385","386","387"],"import React, { useEffect, useState } from \"react\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport {\n  ProSidebar,\n  Menu,\n  MenuItem,\n  SubMenu,\n  SidebarFooter,\n} from \"react-pro-sidebar\";\nimport { isMobile } from \"react-device-detect\";\nimport Twitter from \"../../assets/images/twitter-icon.svg\";\nimport NIOBtoken from \"../../assets/images/saitaswap.png\";\nimport Telegram from \"../../assets/images/telegram-icon.svg\";\nimport Docs from \"../../assets/images/docs-icon.svg\";\nimport Youtube from \"../../assets/images/token_icons/saitamaIcons/youtube.svg\";\nimport Medium from \"../../assets/images/medium-icon.svg\";\nimport Github from \"../../assets/images/git.svg\";\nimport Globe from \"../../assets/images/language-switcher-icon.svg\";\nimport \"./Sidebar.scss\";\nimport useWindowDimensions from \"../../hooks/getWindowDimensions\";\nimport {\n  ANCHOR_BUSD_LP,\n  AUDIT,\n  DOCS,\n  INSURANCE_FUND,\n  LOTTERY,\n  NIOB_SHARING,\n  PREDICTION_TRAINING,\n  TRADING_FEE_CASHBACK,\n} from \"../../assets/tokens\";\nimport { ExchangeService } from \"../../services/ExchangeService\";\n\nconst Sidebar = (props) => {\n  const { width } = useWindowDimensions();\n\n  const [selectedOption, setSelectedOption] = useState(\"\");\n  const [NiobBusdValue, setNiobBusdValue] = useState(\"\");\n  const location = useLocation();\n  const { pathname } = location;\n  const splitLocation = pathname.split(\"/\");\n\n  const closeSidebar = () => {\n    if (width < 991) {\n      props.small_nav();\n    }\n  };\n\n  const setSideBarOption = (option) => {\n    if (selectedOption == option) {\n      setSelectedOption(\"\");\n    } else {\n      if (props.showSocial) {\n        if (!isMobile) {\n          // props.closeSidebar();\n        }\n      }\n      setSelectedOption(option);\n    }\n  };\n\n  const getNiobDollarValue = async () => {\n    const res = await ExchangeService.getAmountsOutForDValue(1000000000, [\n      \"0x0eD81CAe766d5B1a4B3ed4DFbED036be13c6C09C\",\n      \"0xc778417E063141139Fce010982780140Aa0cD5Ab\",\n      \"0xe185DB528FAfCBceb3bF00687E5aaFDC6DB17089\",\n    ]);\n    setNiobBusdValue(res[2] / 10 ** 18);\n  };\n\n  React.useEffect(() => {\n    getNiobDollarValue();\n    if (props.showSocial) {\n      setSelectedOption(\"\");\n    }\n  }, [props.showSocial]);\n  return (\n    <ProSidebar className={`sidebar_style ${props.className}`}>\n      <Menu iconShape=\"square\">\n        {/* <MenuItem\n          onClick={() => { closeSidebar(); setSideBarOption(\"\") }}\n          className={splitLocation[1] === \"home\" ? \"active\" : \"\"}\n          icon={<i className=\"home_nav_icon\"></i>}\n        >\n          <Link to=\"/home\">Homebase</Link>\n        </MenuItem>\n        <MenuItem\n          onClick={() => { closeSidebar(); setSideBarOption(\"\") }}\n          className={splitLocation[1] === \"home\" ? \"active\" : \"\"}\n          icon={<i className=\"pred_nav_icon\"></i>}\n        >\n          <Link to=\"/home\">Prediction Trading</Link>\n          <a href={\"https://prdt.niob.app\"} target=\"_blank\">Prediction Trading</a>\n        </MenuItem> */}\n        <SubMenu\n          title=\"Trade\"\n          open={selectedOption == \"Trade\"}\n          onOpenChange={() => setSideBarOption(\"Trade\")}\n          icon={<i className=\"trade_nav\"></i>}\n        >\n          <MenuItem\n            onClick={() => closeSidebar()}\n            className={splitLocation[2] === \"exchange\" ? \"active\" : \"\"}\n            icon={<i className=\"exchange_nav_icon\"></i>}\n          >\n            <Link to=\"/trade/exchange\">Exchange</Link>\n          </MenuItem>\n          <MenuItem\n            onClick={() => closeSidebar()}\n            className={splitLocation[2] === \"liquidity\" ? \"active\" : \"\"}\n            icon={<i className=\"liquidity_nav_icon\"></i>}\n          >\n            <Link to=\"/trade/liquidity\">Liquidity</Link>\n          </MenuItem>\n        </SubMenu>\n        <MenuItem\n          onClick={() => {\n            closeSidebar();\n            setSideBarOption(\"\");\n          }}\n          className={splitLocation[1] === \"liquidity\" ? \"active\" : \"\"}\n          icon={<i className=\"stake_nav_icon\"></i>}\n        >\n          <Link to=\"/staking\">Stake</Link>\n        </MenuItem>\n        <MenuItem\n          onClick={() => {\n            closeSidebar();\n            setSideBarOption(\"\");\n          }}\n          className={splitLocation[1] === \"farmplanets\" ? \"active\" : \"\"}\n          icon={<i className=\"farm_nav_icon\"></i>}\n        >\n          <Link to=\"/farmplanets/active\">Farm Planets</Link>\n        </MenuItem>\n        {/* <MenuItem\n          onClick={() => {\n            closeSidebar();\n            setSideBarOption(\"\");\n          }}\n          className={splitLocation[1] === \"poolgalaxy\" ? \"active\" : \"\"}\n          icon={<i className=\"pools_nav_icon\"></i>}\n        >\n          <Link to=\"/poolgalaxy\">Pool Galaxy</Link>\n        </MenuItem> */}\n        {/* <MenuItem onClick={()=>setSideBarOption(\"\")} icon={<i className=\"lottery_nav_icon\"></i>}><Link to=\"/lottery\">Lottery</Link></MenuItem> */}\n        {/* <MenuItem\n          onClick={() => {\n            closeSidebar();\n            setSideBarOption(\"\");\n          }}\n          className={splitLocation[1] === \"referral\" ? \"active\" : \"\"}\n          icon={<i className=\"referrals_nav_icon\"></i>}\n        >\n          <Link to=\"/referral\">Referral</Link>\n        </MenuItem> */}\n        {/* <MenuItem\n          onClick={() => {\n            setSideBarOption(\"\");\n            closeSidebar();\n          }}\n          icon={<i className=\"audits_nav_icon\"></i>}\n        >\n          <a href={AUDIT} target=\"_blank\">\n            Audits\n          </a>\n        </MenuItem> */}\n        {/* <SubMenu\n          title=\"Features\"\n          open={selectedOption == \"Features\"}\n          onOpenChange={() => setSideBarOption(\"Features\")}\n          icon={<i className=\"features_nav_icon\"></i>}\n        > */}\n        {/* <MenuItem\n            onClick={() => { closeSidebar() }}\n          >\n            <a href={LOTTERY} target=\"_blank\">Lottery</a>\n          </MenuItem>  */}\n        {/* <MenuItem\n            onClick={() => { closeSidebar() }}\n          >\n            <a href={NIOB_SHARING} target=\"_blank\">Niob-Sharing</a>\n          </MenuItem>\n          <MenuItem\n            onClick={() => { closeSidebar() }}\n          >\n            <a href={PREDICTION_TRAINING} target=\"_blank\">Prediction Trading</a>\n          </MenuItem>\n          <MenuItem\n            onClick={() => { closeSidebar() }}\n          >\n            <a href={INSURANCE_FUND} target=\"_blank\">Insurance Fund</a>\n          </MenuItem> */}\n        {/* <MenuItem\n            onClick={() => { closeSidebar() }}\n          >\n            <a href={TRADING_FEE_CASHBACK} target=\"_blank\">Trading-Fee Cashback</a>\n          </MenuItem> */}\n        {/* </SubMenu> */}\n\n        {/* <SubMenu\n          title=\"Listings\"\n          open={selectedOption == \"Listings\"}\n          onOpenChange={() => setSideBarOption(\"Listings\")}\n          icon={<i className=\"listings_nav_icon\"></i>}\n        >\n          <MenuItem\n            onClick={() => {closeSidebar()}}\n          >\n            <Link to=\"/\">Listing A</Link>\n          </MenuItem>\n          <MenuItem\n            onClick={() => {closeSidebar()}}\n          >\n            <Link to=\"/\">Listing B</Link>\n          </MenuItem>\n        </SubMenu> */}\n\n        {/* <SubMenu\n          title=\"Analytics\"\n          open={selectedOption == \"Analytics\"}\n          onOpenChange={() => setSideBarOption(\"Analytics\")}\n          icon={<i className=\"analytics_nav_icon\"></i>}\n        >\n          <MenuItem\n            onClick={() => {\n              closeSidebar();\n            }}\n          >\n            <Link to=\"/\">Analytic A</Link>\n          </MenuItem>\n          <MenuItem\n            onClick={() => {\n              closeSidebar();\n            }}\n          >\n            <Link to=\"/\">Analytic B</Link>\n          </MenuItem>\n        </SubMenu> */}\n\n        {/* <SubMenu\n          title=\"More\"\n          open={selectedOption == \"More\"}\n          onOpenChange={() => setSideBarOption(\"More\")}\n          icon={<i className=\"more_nav_icon\"></i>}\n        > */}\n        {/* <MenuItem\n            onClick={() => {\n              closeSidebar();\n            }}\n          >\n            <a href={DOCS} target=\"_blank\">\n              Docs\n            </a>\n          </MenuItem> */}\n        {/* <MenuItem\n            onClick={() => {closeSidebar()}}\n          >\n            <Link to=\"/\">Blog</Link>\n          </MenuItem> */}\n        {/* </SubMenu> */}\n      </Menu>\n      {/* {props.showSocial ? (\n        <></>\n      ) : ( */}\n      <SidebarFooter className=\"sidebar_footer\">\n        <ul className=\"token-language\">\n          <li className=\"token_list\">\n            <img src={NIOBtoken} />{\" \"}\n            <span style={{ color: \"white\" }}>\n              ${NiobBusdValue ? NiobBusdValue.toFixed(4) : \"0\"}\n            </span>\n          </li>\n          {/* <li className=\"lang_list\">\n            <img src={Globe} /> <span className=\"lang_text\">EN</span>\n          </li> */}\n        </ul>\n        <ul className=\"social_links\">\n          {/* <li>\n            <Link>\n              <img src={Github} />\n            </Link>\n          </li> */}\n          <li>\n            <a\n              href=\"https://www.youtube.com/channel/UCcgXSwHloSMeXygKx8bTGBA\"\n              target=\"_blank\"\n            >\n              <img src={Youtube} />\n            </a>\n          </li>\n          {/* <li>\n            <Link>\n              <img src={Medium} />\n            </Link>\n          </li> */}\n          <li>\n            <a href=\"https://twitter.com/wearesaitama\" target=\"_blank\">\n              <img src={Twitter} />\n            </a>\n          </li>\n          <li>\n            <a href=\"https://t.me/+PjupkZhaJSc1Mjhh\" target=\"_blank\">\n              <img src={Telegram} />\n            </a>\n          </li>\n        </ul>\n      </SidebarFooter>\n      {/* )} */}\n    </ProSidebar>\n  );\n};\nexport default Sidebar;\n","/data/nm/SaitaSwap/src/components/Footer/Footer.js",["388","389","390","391"],"import React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport \"./Footer.scss\";\nimport { Link } from \"react-router-dom\";\nimport NIOB from \"../../assets/images/saitaswap.png\";\nimport MetaMask from \"../../assets/images/MetaMask-Icon.svg\";\nimport ScrollTop from \"../ScrollTop/ScrollTop\";\nimport { Button } from \"react-bootstrap\";\nimport { addCommas } from \"../../constant\";\n\nconst Footer = (props) => {\n  const footerValues = useSelector((state) => state.persist.footerValues);\n  useEffect(() => {}, []);\n  const handelToken = async () => {\n    const { ethereum } = window;\n    const tokenAddress = \"0x0eD81CAe766d5B1a4B3ed4DFbED036be13c6C09C\";\n    const tokenSymbol = \"SAITAMA\";\n    const tokenDecimals = 18;\n    //const tokenImage = 'http://placekitten.com/200/300';\n    try {\n      // wasAdded is a boolean. Like any RPC method, an error may be thrown.\n      const wasAdded = await ethereum.request({\n        method: \"wallet_watchAsset\",\n        params: {\n          type: \"ERC20\", // Initially only supports ERC20, but eventually more!\n          options: {\n            address: tokenAddress, // The address that the token is at.\n            symbol: tokenSymbol, // A ticker symbol or shorthand, up to 5 chars.\n            decimals: tokenDecimals, // The number of decimals in the token\n            //image: tokenImage, // A string url of the token logo\n          },\n        },\n      });\n\n      if (wasAdded) {\n        console.log(\"Thanks for your interest!\");\n      } else {\n        console.log(\"Your loss!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  return (\n    <div className={`footer_style ${props.className}`}>\n      <div className=\"footer_align\">\n        <div className=\"niob_price\">\n          {/* <img src={NIOB} alt={\"img\"} /> */}\n          {/* <div className=\"flex\"> */}\n          {/* <span>SAITAMA</span> */}\n          {/* <span className=\"vlue\">${footerValues?.niobValue?.toFixed(2)}</span> */}\n          {/* </div> */}\n        </div>\n        <div className=\"buy_niob\">\n          <img src={NIOB} alt={\"icon\"} onClick={() => handelToken()} />\n          <Link to=\"/trade/exchange\">\n            <Button className=\"cm_btn\" onClick={() => handelToken()}>\n              Buy SAITAMA\n            </Button>\n          </Link>\n        </div>\n\n        <div className=\"scrollUp\">\n          <ScrollTop />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Footer;\n","/data/nm/SaitaSwap/src/pages/Referral/Referral.js",["392","393","394","395","396"],"import React, { useEffect, useState } from \"react\";\nimport { Container, Col, Row, Form, FormControl } from 'react-bootstrap'\nimport { Link } from 'react-router-dom'\nimport { ReferralsServices } from \"../../services/ReferralsServices\";\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport Reflink from \"../../assets/images/reflink-icon.svg\";\nimport Twitter from \"../../assets/images/twitter-icon.svg\";\nimport Telegram from \"../../assets/images/telegram-icon.svg\";\nimport './Referral.scss'\nimport { useSelector } from \"react-redux\";\nimport Button from \"../../components/Button/Button\";\nimport ConnectWallet from \"../../components/ConnectWallet/ConnectWallet\";\nimport { toast } from \"../../components/Toast/Toast\";\n\nconst Referral = () => {\n    const isUserConnected = useSelector((state) => state.persist.isUserConnected);\n    const [show, setShow] = useState(false);\n\n    const handleClose = () => setShow(false);\n\n    const handleShow = () => setShow(true);\n\n    const connectCall = () => {\n        isUserConnected ? setShow(!show) : setShow(true);\n    }\n\n    useEffect(() => {\n        init();\n        return () => { };\n    }, []);\n\n    const [referralCount, setReferralCount] = useState(\"\");\n    const [referralIncome, setReferralIncome] = useState(\"\");\n\n    const init = async () => {\n        const count = await ReferralsServices.getReferralCount(isUserConnected);\n        // console.log('dddd', count);\n        const income = await ReferralsServices.getReferralCommissions(\n            isUserConnected\n        );\n        // console.log('inc',income);\n        setReferralCount(count);\n        setReferralIncome(income);\n    };\n\n    return (\n        <div className=\"container_wrap referral_page\">\n            <div className=\"timeto_connect\">\n                <Container className=\"custom_container\">\n                    <Row>\n                        <Col xxl={6} xl={6}>\n                            <div className=\"invite_othr\">\n                                <h1 className=\"title_hd\">Time to connect</h1>\n                                <h3>Invite your friends to earn rewards from their SAITA staking rewards. </h3>\n                                <p>Every direct referral provides 1% income on Saita farms and pools staking rewards claims. Every indirect referral provides an additional 1% referral reward. Users can receive these rewards on their indirect referrals for up to the 3-rd level. Referral rewards are paid in SAITA tokens. </p>\n                            </div>\n                        </Col>\n                        <Col xxl={5} xl={6}>\n                            <div className=\"invite_othr refflink\">\n                                {isUserConnected ? <>  <img src={Reflink} />\n                                    <h2>My Referral Link</h2>\n                                    <div className=\"referalcodeDiv d-block\">\n                                        <Form.Group>\n                                            <div className=\"referalCopyBox\">\n                                                <input class=\"form-control\" value={`https://niob.app/r/${isUserConnected}`} readOnly />\n                                                <CopyToClipboard text={`${window.location.origin}/r/${isUserConnected}`} onCopy={() => toast.success('Copied!')}>\n                                                    <button></button>\n                                                </CopyToClipboard>\n                                            </div>\n                                        </Form.Group>\n                                    </div>\n                                    {/* <ul className=\"how_get\">\n                                        <li>\n                                            <p>You will get</p>\n                                            <span>100%</span>\n                                        </li>\n                                        <li>\n                                            <p>Friends will get</p>\n                                            <span>0%</span>\n                                        </li>\n                                    </ul> */}\n                                    <div className=\"share_anyone\">\n                                        <p>Share</p>\n                                        <ul class=\"shareable\">\n                                            <li><Link><img src={Twitter} /></Link></li>\n                                            <li><Link><img src={Telegram} /></Link></li>\n                                        </ul>\n                                    </div> </>\n                                    :\n                                    <>\n                                        <Button onClick={() => connectCall()} title=\"Unlock Wallet\" />\n                                        <h2>Unlock wallet to get your unique referral link</h2>\n                                        {isUserConnected === \"\" && <ConnectWallet show={show} handleShow={handleShow} handleClose={handleClose} />}\n                                    </>\n                                }\n                            </div>\n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n            <div className=\"referrl_comm\">\n                <Container className=\"custom_container\">\n                    <Row>\n                        <Col lg={4} md={6} xs={12}>\n                            {isUserConnected && <div className=\"totl_reff\">\n                                <div className=\"reff_title\">\n                                    <h3>Total Referrals</h3>\n                                </div>\n                                <div className=\"reff_cont\">\n                                    <span>{referralCount}</span>\n                                </div>\n                            </div>}\n                        </Col>\n                        <Col lg={4} md={6} xs={12}>\n                            {isUserConnected && <div className=\"totl_reff\">\n                                <div className=\"reff_title\">\n                                    <h3>Total Referral Commission</h3>\n                                </div>\n                                <div className=\"reff_cont\">\n                                    <span>{referralIncome}</span>\n                                </div>\n                            </div>}\n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n\n        </div>\n\n    )\n\n}\n\nexport default Referral;","/data/nm/SaitaSwap/src/pages/Trade/Staking.js",["397","398","399","400","401","402","403","404","405","406","407","408","409","410","411","412","413","414","415","416","417"],"import React, { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { BigNumber } from \"bignumber.js\";\nimport {\n  Container,\n  Col,\n  Row,\n  Button,\n  Form,\n  FormControl,\n  Table,\n} from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport Reflink from \"../../assets/images/reflink-icon.svg\";\nimport Twitter from \"../../assets/images/twitter-icon.svg\";\nimport Telegram from \"../../assets/images/telegram-icon.svg\";\nimport \"./Staking.scss\";\nimport { ContractServices } from \"../../services/ContractServices\";\nimport ABISTAKING from \"../../assets/ABI/SaitaABI.json\";\nimport TOKENABI from \"../../assets/ABI/abi.saitama.json\";\nimport { toast } from \"../../components/Toast/Toast\";\nimport Loader from \"react-loader-spinner\";\nimport Timer from \"../../components/Timer/Timer\";\nimport { startLoading, stopLoading } from \"../../redux/actions\";\nconst Staking = () => {\n  const stakingProxy = \"0xaC0D7aF6B796B9c46f10483C6F7d859265834Fa8\";\n  const stakingContract = \"0xE6A55671c1b863b73cCd8ECAcf4fa8Db3D6FF1b7\";\n  const tokenAddress = \"0x0eD81CAe766d5B1a4B3ed4DFbED036be13c6C09C\";\n  const MAX_AMT = \"0xffffffffffffffffffffffffffffffffffffffff\";\n  const [inputAmount, setInputAmount] = useState();\n  const [days, setDays] = useState(0);\n  const [reward, setReward] = useState(0);\n  const [tokenBalance, setTokenBalance] = useState();\n  // const [finaldays, setfinaldays] = useState();\n  const [transactionNo, setTransNo] = useState({});\n  const [dataArray, setDataArray] = useState([]);\n  const [contract, setContract] = useState();\n  const [userAddress, setUserAddress] = useState(\"\");\n  const [isDisabled, setIsDisabled] = useState(false);\n  const [timerDays, setTimerDays] = useState();\n  const [timerHours, setTimerHours] = useState();\n  const [timerMinutes, setTimerMinutes] = useState();\n  // const [, setDaysLeft] = useState(true);\n  let daysLeft;\n  let daataarray = [];\n  const dispatch = useDispatch();\n  // const [dataObj, setDataObj] = useState({\n  //   amount: \"\",\n  //   lockInUntil: \"\",\n  //   isUnstaked: \"\",\n  //   stakeInTime: \"\",\n  // })\n\n  let totalSeconds = 86400;\n  let finalRewards =\n    inputAmount && reward ? (inputAmount * ((reward * days) / 365)) / 100 : 0;\n  const isTheUserConnected = useSelector(\n    (state) => state.persist.isUserConnected\n  );\n  useEffect(async () => {\n    let contract = await ContractServices.callContract(\n      stakingProxy,\n      ABISTAKING\n    );\n    setContract(contract);\n\n    let rewardPercent = await contract.methods\n      .rewardPercent(days * totalSeconds)\n      .call();\n    setReward(rewardPercent / 100);\n\n    let userAddress = isTheUserConnected;\n    setUserAddress(userAddress);\n    const TokenBalance = await ContractServices.getTokenBalanceFull(\n      tokenAddress,\n      userAddress\n    );\n\n    setTokenBalance(TokenBalance);\n  }, [days]);\n  const handleChange = (e) => {\n    setInputAmount(e.target.value);\n    if (inputAmount) {\n      setIsDisabled(false);\n    }\n  };\n\n  const startTimer = (timer) => {\n    const countDownDate = new Date(timer * 1000);\n    const now = new Date().getTime();\n    const difference = countDownDate - now;\n    const days = Math.floor(difference / (24 * 60 * 60 * 1000));\n    const hours = Math.floor(\n      (difference % (24 * 60 * 60 * 1000)) / (1000 * 60 * 60)\n    );\n    const minutes = Math.floor((difference % (60 * 60 * 1000)) / (1000 * 60));\n    const seconds = Math.floor((difference % (60 * 1000)) / 1000);\n    console.log(\"the difference\", difference);\n    if (difference < 0) {\n      daysLeft = false;\n\n      return <>{\"Lockin period is over\"}</>;\n    } else {\n      return <>{days + \":\" + hours + \":\" + minutes}</>;\n    }\n  };\n  console.log(\"the days left\", daysLeft);\n  const destructure = async (array, i, stakingRewards) => {\n    console.log(\"stakingRewards\", stakingRewards);\n    daataarray.push({\n      amount: array[0],\n      lockInPeriod: array[1],\n      lockInUntil: array[3],\n      isClaimed: array[4],\n      transactionNo: i,\n      stakingRewards: stakingRewards,\n    });\n  };\n\n  const letsCallContract = async () => {\n    debugger;\n    if (isTheUserConnected) {\n      if (inputAmount) {\n        try {\n          dispatch(startLoading());\n          // let userAddress = await ContractServices.isMetamaskInstalled();\n          // let gasPrice = await Contractservices.calculateGasPrice();\n          let tokenInstance = await ContractServices.callContract(\n            tokenAddress,\n            TOKENABI\n          );\n\n          let estimateGas = await tokenInstance.methods\n            .approve(stakingProxy, MAX_AMT)\n            .estimateGas({ from: userAddress });\n          setIsDisabled(true);\n          let approveToken = await tokenInstance.methods\n            .allowance(userAddress, stakingProxy)\n            .call();\n          if (approveToken == 0) {\n            await tokenInstance.methods\n              .approve(stakingProxy, MAX_AMT)\n              .send({ from: userAddress, gas: estimateGas });\n          }\n          let contract = await ContractServices.callContract(\n            stakingProxy,\n            ABISTAKING\n          );\n\n          let gas = await contract.methods\n            .stake(days * totalSeconds, BigNumber(inputAmount) * 10 ** 9)\n            .estimateGas({ from: userAddress });\n\n          let result = await contract.methods\n            .stake(days * totalSeconds, BigNumber(inputAmount) * 10 ** 9)\n            .send({ from: userAddress, gas: gas });\n          console.log(\"uuuu result\", result);\n          // let data = await contract.methods.stakingTx(userAddress);\n          // setfinaldays(days * totalSeconds);\n          const transactionNo = await contract.methods\n            .stakingTx(userAddress)\n            .call();\n\n          // setTransNo(transactionNo);\n          let totalTransactions = transactionNo.txNo;\n\n          let transactionDetails;\n          let stakingRewards;\n          for (let i = 1; i <= totalTransactions; i++) {\n            transactionDetails = await contract.methods\n              .userTransactions(userAddress, i)\n              .call();\n            stakingRewards = await contract.methods\n              .rewards(userAddress, i)\n              .call();\n            console.log(\"transactionDetails\", transactionDetails);\n            await destructure(transactionDetails, i, stakingRewards);\n          }\n\n          setDataArray(daataarray);\n          setIsDisabled(false);\n          dispatch(stopLoading());\n        } catch (error) {\n          console.log(error);\n        }\n      } else {\n        toast.error(\"Please enter the staking amount\");\n      }\n    } else {\n      toast.error(\"Please Connect your wallet first\");\n    }\n  };\n  console.log(\"99999\", contract?.methods);\n  const letsUnstake = async (trans) => {\n    if (isTheUserConnected) {\n      try {\n        let contract = await ContractServices.callContract(\n          stakingProxy,\n          ABISTAKING\n        );\n        let userAddress = await ContractServices.isMetamaskInstalled();\n        let gas = await contract.methods\n          .claim(trans)\n          .estimateGas({ from: userAddress });\n        let result = contract.methods\n          .claim(trans)\n          .send({ from: userAddress, gas: gas });\n\n        const transactionNo = await contract.methods\n          .stakingTx(userAddress)\n          .call();\n\n        setTransNo(transactionNo);\n        let totalTransactions = transactionNo.txNo;\n\n        let transactionDetails;\n        for (let i = 1; i <= totalTransactions; i++) {\n          transactionDetails = await contract.methods\n            .userTransactions(userAddress, i)\n            .call();\n          // console.log(\"transactionDetails\", transactionDetails);\n          await destructure(transactionDetails, i);\n        }\n      } catch (error) {\n        toast.error(error);\n      }\n    } else {\n      toast.error(\"Please Connect your wallet first\");\n    }\n  };\n  const getTheStake = async () => {\n    // alert(\"in gettheStake\");\n    if (isTheUserConnected) {\n      try {\n        setIsDisabled(true);\n        dispatch(startLoading());\n        const transactionNo = await contract.methods\n          .stakingTx(userAddress)\n          .call();\n        console.log(\"transactionNo\", transactionNo);\n        setTransNo(transactionNo);\n        let totalTransactions = transactionNo.txNo;\n        console.log(\"totalTransactions\", totalTransactions);\n        let transactionDetails;\n        let stakingRewards;\n        for (let i = 1; i <= totalTransactions; i++) {\n          transactionDetails = await contract.methods\n            .userTransactions(userAddress, i)\n            .call();\n          stakingRewards = await contract.methods\n            .rewards(userAddress, i)\n            .call();\n          console.log(\"transactionDetails\", transactionDetails);\n          await destructure(transactionDetails, i, stakingRewards);\n        }\n        setDataArray(daataarray);\n        setIsDisabled(false);\n        dispatch(stopLoading());\n      } catch (error) {\n        alert(error);\n      }\n    } else {\n      toast.error(\"Please connect your wallet first\");\n    }\n  };\n  console.log(\"daysLeft\", daysLeft);\n  return (\n    // referral_page\n    <div className=\"container_wrap stakePage py-40\">\n      <div className=\"timeto_connect\">\n        <Container className=\"custom_container\">\n          <Row>\n            <Col>\n              <div className=\"staking_block\">\n                <div className=\"staking_head\">\n                  <p>Stake</p>\n                </div>\n                <p className=\"para\">\n                  Saitama Balance:{\" \"}\n                  <span className=\"ms-2\">{tokenBalance?.toFixed(4)}</span>\n                </p>\n                <div className=\"staking_content\">\n                  <form onSubmit={() => alert(\"ff\")}>\n                    <FormControl\n                      placeholder=\"Input\"\n                      value={inputAmount}\n                      onChange={(e) => handleChange(e)}\n                      required\n                    />\n                    <div className=\"duration_sec\">\n                      <Button\n                        className=\"time_duration\"\n                        onClick={() => setDays(30)}\n                      >\n                        30 days\n                      </Button>\n                      <Button\n                        className=\"time_duration\"\n                        onClick={() => setDays(60)}\n                      >\n                        60 days\n                      </Button>\n                      <Button\n                        className=\"time_duration\"\n                        onClick={() => setDays(90)}\n                      >\n                        90 days\n                      </Button>\n                    </div>\n                    <div className=\"text_area text-white\">\n                      <div className=\"d-flex flex-column\">\n                        <p className=\"d-flex\">\n                          <span>APY:</span>\n                          <span className=\"ms-2\">{reward}%</span>\n                        </p>\n                        <p className=\"d-flex\">\n                          <span>Lock-In Period:</span>{\" \"}\n                          <span className=\"ms-2\">{days} Days</span>\n                        </p>\n                        <p className=\"d-flex\">\n                          <span>Final Rewards:</span>{\" \"}\n                          <span className=\"ms-2\">{finalRewards} Saitama</span>\n                        </p>\n                      </div>\n                    </div>\n                    <Button\n                      className=\"stake_btn\"\n                      id=\"myBtn\"\n                      disabled={isDisabled}\n                      onClick={letsCallContract}\n                    >\n                      Stake\n                    </Button>\n                  </form>\n\n                  <Button className=\"stake_btn\" onClick={getTheStake}>\n                    Get your stakings\n                  </Button>\n                </div>\n                {console.log(\"in the jsx\", dataArray)}\n                <div className=\"stakeAmountbox\">\n                  <Table responsive className=\"duration_bits\">\n                    <thead>\n                      <tr>\n                        <th>Stake Amount</th>\n                        {/* <th>Rewards</th> */}\n                        <th>Rewards</th>\n                        <th>\n                          Locked in Until<br></br> (DD:HH:MM)\n                        </th>\n                        <th>Lock In Period</th>\n                        <th>Action</th>\n                      </tr>\n                    </thead>\n                    {dataArray.length > 0\n                      ? dataArray?.map((item) => (\n                          <tbody>\n                            <tr>\n                              <td>{item.amount / 10 ** 9} Saitama</td>\n                              <td>{item.stakingRewards / 10 ** 9} Saitama</td>\n                              {/* <td>{finalRewards} Saitama</td> */}\n                              <td>\n                                {/* {item.lockInUntil} */}\n                                {startTimer(item.lockInUntil)}\n                                <div className=\"timerBox\"></div>\n                              </td>\n                              <td>\n                                {item.lockInPeriod / totalSeconds + \" Days\"}\n                              </td>\n                              <td>\n                                {item.isClaimed === true ? (\n                                  <Button className=\"unstake_btn\">\n                                    Claimed\n                                  </Button>\n                                ) : daysLeft === false ? (\n                                  <Button\n                                    className=\"unstake_btn\"\n                                    onClick={() => {\n                                      try {\n                                        letsUnstake(item.transactionNo);\n                                      } catch (err) {\n                                        alert(\"nnn\");\n                                      }\n                                    }}\n                                  >\n                                    Unstake\n                                  </Button>\n                                ) : (\n                                  <Button\n                                    className=\"unstake_btn\"\n                                    disabled={true}\n                                  >\n                                    Unstake\n                                  </Button>\n                                )}\n                              </td>\n                            </tr>\n                          </tbody>\n                          // <div className=\"duration_bits value_sec\">\n                          //   <h3>{item.time}</h3>\n\n                          //   <div className=\"value_sec px-3\">\n                          //     <div className=\"value_amount_sec d-block\">\n                          //       <div className=\"value_amount d-flex\">\n                          //         <p></p>\n                          //         <p></p>\n                          //       </div>\n                          //       <div className=\"value_amount d-flex\">\n                          //         <p></p>\n                          //         <p></p>\n                          //       </div>\n                          //       <div className=\"value_amount d-flex\">\n                          //         <p>:</p>\n                          //         <p></p>\n                          //       </div>\n                          //     </div>\n                          //   </div>\n                          // </div>\n                        ))\n                      : null}\n                  </Table>\n                </div>\n              </div>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n      {/* <div className=\"referrl_comm\">\n                <Container className=\"custom_container\">\n                    <Row>\n                       \n                    </Row>\n                </Container>\n            </div> */}\n    </div>\n  );\n};\n\nexport default Staking;\n","/data/nm/SaitaSwap/src/pages/Home/Home.js",["418","419","420","421","422","423","424","425","426","427","428","429","430","431","432","433","434","435","436","437","438","439","440","441","442","443","444","445","446","447","448","449","450","451","452","453","454","455","456","457","458","459","460","461","462","463","464","465","466","467","468","469","470","471","472","473","474","475","476","477","478","479","480","481","482","483","484","485","486","487","488","489","490","491","492","493","494","495","496","497","498","499","500","501"],"import React, { useEffect, useState } from \"react\";\nimport { Carousel, Row, Col, Image } from \"react-bootstrap\";\nimport { useHistory, useParams } from \"react-router\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Web3 from \"web3\";\nimport { Link } from \"react-router-dom\";\nimport { rootName } from \"../../constant\";\nimport Button from \"../../components/Button/Button\";\nimport FarmCard from \"../../components/FarmCard/FarmCard\";\nimport NIOB from \"../../assets/images/saitaswap.png\";\nimport BUSD from \"../../assets/images/token_icons/BUSD-Token.svg\";\nimport ANCHOR from \"../../assets/images/token_icons/ANCHOR-Token.svg\";\nimport BTCB from \"../../assets/images/token_icons/BTCB-Token.svg\";\nimport { ContractServices } from \"../../services/ContractServices\";\nimport { ExchangeService } from \"../../services/ExchangeService\";\nimport { FarmService } from \"../../services/FarmService\";\nimport { ReferralsServices } from \"../../services/ReferralsServices\";\nimport Statement from \"../../assets/Pdfs/Statement.pdf\";\nimport {\n  MAIN_CONTRACT_LIST,\n  BURN_ADDRESS,\n  ANCHOR_BUSD_LP,\n  WETH,\n  TOKEN_LIST,\n  BNB_BUSD_LP,\n} from \"../../assets/tokens\";\nimport { addCommas } from \"../../constant\";\nimport {\n  addTransaction,\n  startLoading,\n  stopLoading,\n  saveFotterValues,\n} from \"../../redux/actions\";\nimport { BigNumber } from \"bignumber.js\";\nimport Loader from \"react-loader-spinner\";\nimport { TwitterTimelineEmbed } from \"react-twitter-embed\";\nimport Default from \"../../assets/images/token_icons/default.svg\";\nimport { savereffralAddress } from \"../../redux/actions\";\n\nimport \"./Home.scss\";\nimport { toast } from \"../../components/Toast/Toast\";\n\nimport UpdateDsk from \"../../assets/images/PRDT-Trading-Banner.jpg\";\n// import UpdateMob from \"../../assets/images/update_Mob.jpg\";\n\nconst Home = () => {\n  const dispatch = useDispatch();\n  const isUserConnected = useSelector((state) => state.persist.isUserConnected);\n  const [potDetails, setPotDetails] = useState({\n    prizeArray: [0, 0, 0],\n    miniPrice: 0,\n    pot: 0,\n    decimals: 0,\n  });\n  const { ref } = useParams();\n  const referralAddress = useSelector((state) => state.persist.referralAddress);\n  const [rewards, seRewards] = useState(0);\n  const [niobPerBlock, setNiobPerBlock] = useState(0);\n  const [transferTaxRate, setTransferTaxRate] = useState(0);\n  const [burnedToken, setBurnedToken] = useState(0);\n  const [walletShow, setWalletShow] = useState(false);\n  const [poolLength, setPoolLength] = useState(0);\n  const [farms, setFarms] = useState([]);\n  const [inactiveFarms, setInactiveFarms] = useState([]);\n  const [stakingOnly, setStakingOnly] = useState([]);\n  const [stakeData, setStakeData] = useState(null);\n  const [stakeValue, setStakeValue] = useState(0);\n  const [referrer, setReferrer] = useState(\n    \"0x0000000000000000000000000000000000000000\"\n  );\n  const [totalAmount, setAmount] = useState(0);\n  const [totalRewards, setRewards] = useState(0);\n  const [marketCap, setMarketCap] = useState(0.0);\n  const [anchorTotalSupply, setAnchorTotalSupply] = useState(0);\n  const [niobBusdValue, setNiobBusdValue] = useState(0);\n  const [totalMinted, setTotalMinted] = useState(0);\n  const [totalLockedRewards, setTotalLockedRewards] = useState(0);\n  const [anchorBnbWorth, setAnchorBnbWorth] = useState(0);\n  const [anchorBusdWorth, setAnchorBusdWorth] = useState(0);\n  const [tokenIds, setTokenIds] = useState();\n  const [allowance, setAllowance] = useState(false);\n  const [disable, setDisabledBUtton] = useState(false);\n  const [IButton, setIButton] = useState(false);\n  const [ticketWindow, openTicketWindow] = useState(false);\n  const [ticketValue, setvalue] = useState(1);\n  const [buyButton, setBuyButton] = useState(false);\n  const [loader, setLoader] = useState(false);\n  const [currentTicketsArray, setCurrentArray] = useState([]);\n  const [showHarvest, setShowHarvest] = useState(false);\n  const [harvest, setHarvestAll] = useState([]);\n  const [stakeConfirmation, setStakeConfimation] = useState(0);\n  const [showTransactionModal, setShowTransactionModal] = useState(false);\n  const [txHash, setTxHash] = useState(\"\");\n  const [farmAndStakeLoader, setFarmAndStakeLoader] = useState(false);\n  const [liquidity, setLiquidity] = useState(0);\n  const [niobApr, setNiobApr] = useState(0);\n\n  const [topFarms, setTopFarms] = useState([]);\n  const [topFarmApy, setTopFarmApy] = useState(\"\");\n\n  useEffect(async () => {\n    init();\n    if (ref) {\n      const checkAddress = await Web3.utils.isAddress(ref.toLowerCase());\n      if (!checkAddress) {\n        toast.error(\"Address does not exist!\");\n        return;\n      }\n      if (isUserConnected) {\n        let re = await ReferralsServices.getReferrer(isUserConnected);\n        if (re != \"0x0000000000000000000000000000000000000000\") {\n          toast.error(`This user has already referral`);\n          return;\n        }\n        dispatch(savereffralAddress(ref.toLowerCase()));\n        return;\n      }\n      toast.success(`Please connect with wallet!`);\n    }\n  }, [isUserConnected]);\n\n  const init = async () => {\n    const res = await ContractServices.isMetamaskInstalled();\n\n    if (isUserConnected && res) {\n      getMarketCap();\n      getBurnedToken();\n      getNiobPerBlock();\n      try {\n        dispatch(startLoading());\n        let ref = await ReferralsServices.getReferrer(isUserConnected);\n        if (ref === \"0x0000000000000000000000000000000000000000\") {\n          if (\n            referralAddress &&\n            referralAddress !== \"0x0000000000000000000000000000000000000000\"\n          ) {\n            ref = referralAddress;\n          }\n          setReferrer(ref);\n        }\n        dispatch(stopLoading());\n        const pL = Number(await FarmService.poolLength());\n        setPoolLength(pL);\n        // let farmsTemp = [];\n        let totalRewards = 0;\n        let totalLockedRewards = 0;\n        let totalLiquidity = 0;\n        let options = [];\n        const res = await ContractServices.getTokenBalance(\n          TOKEN_LIST[1].address,\n          isUserConnected\n        );\n        setAmount(res);\n        // setFarmAndStakeLoader(true);\n        let allAPRs = [];\n        for (let i = 0; i < pL; i++) {\n          const res = await FarmService.totalPoolInfo(i);\n          const userInfo = await FarmService.userInfo(i, isUserConnected);\n          const { poolInfo, latest } = res;\n\n          if (poolInfo.lpToken != undefined) {\n            const allowance = await ContractServices.allowanceToken(\n              poolInfo.lpToken,\n              MAIN_CONTRACT_LIST.farm.address,\n              isUserConnected\n            );\n            let check = true;\n            if (\n              BigNumber(allowance).isGreaterThanOrEqualTo(\n                BigNumber(2 * 255 - 1)\n              )\n            ) {\n              // setShowApproveButton(false);\n              check = false;\n            }\n            const reserve = await ExchangeService.getReserves(ANCHOR_BUSD_LP);\n            const tokenZero = await ExchangeService.getTokenZero(\n              ANCHOR_BUSD_LP\n            );\n            const tokenOne = await ExchangeService.getTokenOne(ANCHOR_BUSD_LP);\n            const anchorPerBlock = Number(await FarmService.pantherPerBlock());\n            const price = await getPriceInUsd(tokenZero, tokenOne, reserve);\n\n            totalLockedRewards +=\n              (latest - poolInfo.lastRewardBlock) *\n              price *\n              (anchorPerBlock / 10 ** 18);\n            setTotalLockedRewards(totalLockedRewards);\n\n            const farmPoolInfo = await FarmService.farmAndPoolInfo(i);\n            const { farm, pool } = farmPoolInfo;\n            if (farm) {\n              let res = await handleTotalLiquidity(farm.lpToken);\n\n              const lpTokenDetailsTemp = await FarmService.getLpTokenDetails(\n                poolInfo.lpToken\n              );\n              let apr = await calculateAPR(farm.allocPoint, res);\n              setTopFarms((topFarms) => [\n                ...topFarms,\n                {\n                  symbol0: lpTokenDetailsTemp.symbol0,\n                  symbol1: lpTokenDetailsTemp.symbol1,\n                  newLiquidity: res,\n                  newApr: apr,\n                },\n              ]);\n              allAPRs.push(apr);\n              totalLiquidity += Number(res);\n            }\n            if (pool) {\n              const poolInfoForNiob = await FarmService.poolInfo(i, \"2\");\n              // console.log(\"poolInfoForNiob\", poolInfoForNiob);\n              let res = await handleTotalLiquidityForPool(pool.lpToken);\n              const tokenAmount = await ExchangeService.getTokenStaked(\n                pool.lpToken\n              );\n              let price = 0;\n              if (\n                pool.lpToken.toLowerCase() ===\n                TOKEN_LIST[2].address.toLowerCase()\n              ) {\n                price = 1;\n              } else {\n                const tokenPairUSDT = await ExchangeService.getPair(\n                  pool.lpToken,\n                  TOKEN_LIST[2].address\n                );\n                price = await calPrice(tokenPairUSDT);\n              }\n              //const niobId = await FarmService.niobId();\n              //console.log('this is apr',poolInfo,  niobId);\n              if (poolInfoForNiob.allocPoint === \"30\") {\n                let apr = await calculateAPR(poolInfoForNiob.allocPoint, res);\n                setNiobApr(apr);\n              }\n              const liq = tokenAmount * price;\n              totalLiquidity += Number(liq);\n              setLiquidity(totalLiquidity);\n            }\n\n            if (i === pL - 1) {\n              const totalSupply = await getTotalSupply();\n              const niobValue = await getNiobDollarValue();\n              const obj = {\n                tvl: totalLiquidity,\n                totalSupply: totalSupply,\n                niobValue: niobValue,\n              };\n              dispatch(saveFotterValues(obj));\n            }\n            const rewards = Number(\n              Number(\n                (await FarmService.pendingPanther(i, isUserConnected)) /\n                  10 ** 18\n              ).toFixed(3)\n            );\n            totalRewards += rewards;\n            setRewards(totalRewards);\n\n            const nextHarvestUntil = await FarmService.canHarvest(\n              i,\n              isUserConnected\n            );\n            if (\n              !check &&\n              rewards > 0 &&\n              Number(userInfo.nextHarvestUntil) > 0 &&\n              nextHarvestUntil\n            ) {\n              setShowHarvest(true);\n              options.push({ pid: i, lpToken: poolInfo.lpToken });\n            }\n          }\n          // if (i + 1 == pL) {\n          //     setFarmAndStakeLoader(false);\n          // }\n        }\n        setTopFarmApy(Math.max.apply(Math, allAPRs));\n        setHarvestAll(options);\n      } catch (err) {\n        console.log(err);\n        setFarmAndStakeLoader(false);\n        dispatch(stopLoading());\n      }\n    }\n  };\n  const calculateAPR = async (allocPoint, liquidity) => {\n    const anchorPrice = await calPrice(ANCHOR_BUSD_LP);\n    const totalAllcationPoint = Number(\n      await FarmService.totalAllocationPoint()\n    );\n    const anchorPerBlock = Number(await FarmService.pantherPerBlock());\n    //need to calculate usd price.\n    // console.log(\"liquidity: \", liquidity);\n    if (liquidity != 0) {\n      const apr =\n        ((allocPoint / totalAllcationPoint) *\n          ((anchorPerBlock / 10 ** 18) * 28800 * 365 * 100 * anchorPrice)) /\n        liquidity;\n\n      return apr.toFixed(2);\n    }\n\n    return 0;\n  };\n  const getMarketCap = async () => {\n    const dollarValue = await getNiobDollarValue();\n    const totalSupply = await getTotalSupply();\n    setMarketCap(dollarValue * totalSupply);\n  };\n  const getNiobDollarValue = async () => {\n    const reserves = await ExchangeService.getReserves(ANCHOR_BUSD_LP);\n    setNiobBusdValue(reserves[1] / reserves[0]);\n    return reserves[1] / reserves[0];\n  };\n  const getTotalSupply = async () => {\n    const res = await ExchangeService.getTotalSupply(\n      MAIN_CONTRACT_LIST.anchorNew.address\n    );\n    const anchorTotalSupply = res;\n    const txAmount = (0.05 * anchorTotalSupply) / 100;\n    setTotalMinted(anchorTotalSupply);\n    setAnchorTotalSupply(txAmount);\n    return res;\n  };\n  const getBurnedToken = async () => {\n    try {\n      const response = await ExchangeService.getBurnedToken();\n      setBurnedToken(response);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  const getNiobPerBlock = async () => {\n    try {\n      const niobPerBlock = Number(await FarmService.pantherPerBlock());\n      setNiobPerBlock(niobPerBlock / 10 ** 18);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  const getPriceInUsd = async (tokenZero, tokenOne, reserve) => {\n    let price;\n\n    const decimalZero = await ContractServices.getDecimals(tokenZero);\n    const decimalOne = await ContractServices.getDecimals(tokenOne);\n\n    if (tokenZero.toLowerCase() === TOKEN_LIST[2].address.toLowerCase()) {\n      price = (reserve[0] * decimalOne) / (reserve[1] * decimalZero);\n    }\n\n    if (tokenOne.toLowerCase() === TOKEN_LIST[2].address.toLowerCase()) {\n      price = (reserve[1] * decimalZero) / (reserve[0] * decimalOne);\n    }\n\n    return price;\n  };\n  const calPrice = async (pairAddress) => {\n    let price = 0;\n\n    if (pairAddress == \"0x0000000000000000000000000000000000000000\") {\n      return 0;\n    }\n\n    // console.log(\"pairAddresspairAddress\", pairAddress);\n    const tokenZero = await ExchangeService.getTokenZero(pairAddress);\n    const tokenOne = await ExchangeService.getTokenOne(pairAddress);\n    const reserve = await ExchangeService.getReserves(pairAddress);\n\n    const decimalZero = await ContractServices.getDecimals(tokenZero);\n    const decimalOne = await ContractServices.getDecimals(tokenOne);\n\n    if (tokenZero.toLowerCase() === TOKEN_LIST[2].address.toLowerCase()) {\n      return (price =\n        (reserve[0] * 10 ** decimalOne) / (reserve[1] * 10 ** decimalZero));\n    }\n\n    if (tokenOne.toLowerCase() === TOKEN_LIST[2].address.toLowerCase()) {\n      return (price =\n        (reserve[1] * 10 ** decimalZero) / (reserve[0] * 10 ** decimalOne));\n    }\n\n    let priceBNBToUSD = await calPrice(BNB_BUSD_LP); //replace with BNB-USD pair\n\n    if (tokenZero.toLowerCase() === WETH.toLowerCase()) {\n      price =\n        (reserve[0] * 10 ** decimalOne) / (reserve[1] * 10 ** decimalZero);\n      return price * priceBNBToUSD;\n    }\n\n    if (tokenOne.toLowerCase() === WETH.toLowerCase()) {\n      price =\n        (reserve[1] * 10 ** decimalZero) / (reserve[0] * 10 ** decimalOne);\n      return price * priceBNBToUSD;\n    }\n  };\n\n  const getDollarAPR = async (address) => {\n    try {\n      if (address.toLowerCase() === TOKEN_LIST[1].address.toLowerCase()) {\n        const reserves = await ExchangeService.getReserves(ANCHOR_BUSD_LP);\n        let val = reserves[1] / reserves[0];\n        val = val || 0;\n        //setAnchorDollarValue(val.toFixed(3));\n        return val.toFixed(3);\n      } else if (\n        address.toLowerCase() === TOKEN_LIST[2].address.toLowerCase()\n      ) {\n        return 1;\n      } else if (address.toLowerCase() != TOKEN_LIST[2].address.toLowerCase()) {\n        const pair = await ExchangeService.getPairFromPancakeFactory(\n          address,\n          TOKEN_LIST[2].address\n        );\n        const reserves = await ExchangeService.getReserves(pair);\n        let val = reserves[1] / reserves[0];\n        val = val || 0;\n        // setAnchorDollarValue(val.toFixed(3));\n        return val.toFixed(3);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const handleTotalLiquidity = async (pairAddress) => {\n    if (pairAddress != \"0x0000000000000000000000000000000000000000\") {\n      // console.log(pairAddress);\n      const tokenZero = await ExchangeService.getTokenZero(pairAddress);\n      const tokenOne = await ExchangeService.getTokenOne(pairAddress);\n      const reserve = await ExchangeService.getReserves(pairAddress);\n      const tokenZeroPairUSDT = await ExchangeService.getPair(\n        tokenZero,\n        TOKEN_LIST[2].address\n      );\n      const tokenOnePairUSDT = await ExchangeService.getPair(\n        tokenOne,\n        TOKEN_LIST[2].address\n      );\n\n      const tokenZeroPairBNB = await ExchangeService.getPair(tokenZero, WETH);\n      const tokenOnePairBNB = await ExchangeService.getPair(tokenOne, WETH);\n\n      const decimalZero = await ContractServices.getDecimals(tokenZero);\n      const decimalOne = await ContractServices.getDecimals(tokenOne);\n      // const decimalPair = await ContractServices.getDecimals(pairAddress);\n\n      let priceA = await getDollarAPR(tokenZero);\n      let priceB = await getDollarAPR(tokenOne);\n\n      // let priceA = 0;\n      // let priceB = 0;\n\n      // if (tokenZero.toLowerCase() == TOKEN_LIST[2].address.toLowerCase()) {\n      //   priceA = 1;\n      // } else if (tokenZero.toLowerCase() == WETH.toLowerCase()) {\n      //   priceA = await calPrice(BNB_BUSD_LP);\n      // }\n\n      // if (tokenOne.toLowerCase() == TOKEN_LIST[2].address.toLowerCase()) {\n      //   priceB = 1;\n      // } else if (tokenOne.toLowerCase() == WETH.toLowerCase()) {\n      //   priceB = await calPrice(BNB_BUSD_LP);\n      // }\n\n      // if (priceA == 0) {\n      //   if (tokenZeroPairUSDT != \"0x0000000000000000000000000000000000000000\") {\n      //     priceA = await calPrice(tokenZeroPairUSDT);\n      //   } else if (\n      //     tokenZeroPairBNB != \"0x0000000000000000000000000000000000000000\"\n      //   ) {\n      //     priceA = await calPrice(tokenZeroPairBNB);\n      //   } else {\n      //     priceA = 0;\n      //   }\n      // }\n\n      // if (priceB == 0) {\n      //   if (tokenOnePairUSDT != \"0x0000000000000000000000000000000000000000\") {\n      //     priceB = await calPrice(tokenOnePairUSDT);\n      //   } else if (\n      //     tokenOnePairBNB != \"0x0000000000000000000000000000000000000000\"\n      //   ) {\n      //     priceB = await calPrice(tokenOnePairBNB);\n      //   } else {\n      //     priceB = 0;\n      //   }\n      // }\n\n      const totalSupply = await ExchangeService.getTotalSupply(pairAddress);\n      const tokenStaked = await ExchangeService.getTokenStaked(pairAddress);\n\n      const liquidity =\n        (((reserve[0] / 10 ** decimalZero) * priceA +\n          (reserve[1] / 10 ** decimalOne) * priceB) /\n          totalSupply) *\n        tokenStaked;\n\n      return liquidity;\n    }\n    return 0;\n  };\n  const options = {\n    indicators: false,\n  };\n  const handleTotalLiquidityForPool = async (tokenAddress) => {\n    if (tokenAddress != \"0x0000000000000000000000000000000000000000\") {\n      const reserve = await ExchangeService.getTokenStaked(tokenAddress);\n      const tokenPairUSDT = await ExchangeService.getPair(\n        tokenAddress,\n        TOKEN_LIST[2].address\n      );\n      const tokenPairBNB = await ExchangeService.getPair(tokenAddress, WETH);\n\n      let priceA = 0;\n\n      if (tokenAddress.toLowerCase() == TOKEN_LIST[2].address.toLowerCase()) {\n        priceA = 1;\n      } else if (tokenAddress.toLowerCase() == WETH.toLowerCase()) {\n        priceA = await calPrice(BNB_BUSD_LP);\n      }\n\n      if (priceA == 0) {\n        if (tokenPairUSDT != \"0x0000000000000000000000000000000000000000\") {\n          priceA = await calPrice(tokenPairUSDT);\n        } else if (\n          tokenPairBNB != \"0x0000000000000000000000000000000000000000\"\n        ) {\n          priceA = await calPrice(tokenPairBNB);\n          priceA = 0;\n        }\n      }\n\n      const liquidity = reserve * priceA;\n\n      return Number(liquidity).toFixed(2);\n    }\n    return 0;\n  };\n  const handleIcon = (symbol) => {\n    if (symbol != undefined) {\n      const tokenObj = TOKEN_LIST.find(\n        (d) => d.symbol.toLowerCase() === symbol.toLowerCase()\n      );\n      return tokenObj != undefined ? tokenObj.icon : Default;\n    }\n  };\n\n  const history = useHistory();\n  return (\n    <div className=\"container_wrap\">\n      <div className=\"container container_inside homePage\">\n        <div className=\"updateSection\">\n          <img src={UpdateDsk} className=\"forDesktop\" alt=\"banner\" />\n          {/* <img src={UpdateMob} className=\"forMob\" alt=\"banner\" /> */}\n          {/* <Button  title=\"Read Statement of the team\" className=\"readState_btn\" /> */}\n          <a\n            rel=\"stylesheet\"\n            href={\"https://prdt.niob.app\"}\n            target=\"_blank\"\n            type=\"button\"\n            className=\"readState_btn\"\n          >\n            Go to Prediction Trading\n          </a>\n          {/* <a rel=\"stylesheet\" href={Statement} target=\"_blank\" type=\"button\" className=\"readState_btn\" >Read Statement of the team</a> */}\n        </div>\n\n        <Carousel fade {...options}>\n          <Carousel.Item>\n            <Carousel.Caption>\n              <h3>Welcome to SAITA Swap</h3>\n              <p>\n                Decentralized Exchange and Automatic Liquidity Acquisition Yield\n                Farm running currently on Binance Smart Chain.\n              </p>\n              <p>\n                If you are new to SAITA please also visit our Tutorial Section in\n                our official docs. We’ll teach you step by step you to use SAITA\n                Swap and it’s assets.\n              </p>\n              <a\n                href=\"https://docs.niob.finance/tutorial\"\n                target={\"_blank\"}\n                className=\"captionFooter d-flex justify-content-between align-items-center\"\n              >\n                <span>SAITA Tutorial</span>\n                <span>\n                  <Image\n                    src={require(\"../../assets/images/Link-Icon.svg\").default}\n                    alt=\"icon\"\n                  />\n                </span>\n              </a>\n            </Carousel.Caption>\n            <Image\n              className=\"bgImage\"\n              alt=\"image\"\n              src={\n                require(\"../../assets/images/dashboard-header-bg.jpg\").default\n              }\n            />\n          </Carousel.Item>\n          <Carousel.Item>\n            <Carousel.Caption>\n              <h3>The Docs</h3>\n              <p>\n                All important and technical information about the project\n                \"Saita\", tokenomics, project roadmap and term explanations can be\n                found in our docs. If you have any questions, please ask them in\n                the official Saita Telegram Channel.\n              </p>\n              <a\n                href=\"https://docs.niob.finance\"\n                target={\"_blank\"}\n                className=\"captionFooter d-flex justify-content-between align-items-center\"\n              >\n                <span>SAITA Docs</span>{\" \"}\n                <span>\n                  <Image\n                    src={require(\"../../assets/images/Link-Icon.svg\").default}\n                    alt=\"icon\"\n                  />\n                </span>\n              </a>\n            </Carousel.Caption>\n            <Image\n              className=\"bgImage\"\n              alt=\"image\"\n              src={\n                require(\"../../assets/images/dashboard-header-bg.jpg\").default\n              }\n            />\n          </Carousel.Item>\n        </Carousel>\n        <Row className=\"startEngine\">\n          <Col xl={4} lg={12}>\n            <div className=\"comnBlk\">\n              <Image\n                className=\"headerImg\"\n                src={require(\"../../assets/images/swap-icon.svg\").default}\n              />\n              <h3>Start your engine </h3>\n              <p>Start your journey or improve your wallet portfolio:</p>\n              <h3>SAITA Price: ${niobBusdValue.toFixed(4)}</h3>\n              <Link\n                to={\"/trade/exchange\"}\n                className=\"captionFooter d-flex justify-content-between align-items-center\"\n              >\n                <span>Buy SAITA Token </span> <span className=\"arrowIcon\" />\n              </Link>\n            </div>\n          </Col>\n          <Col xl={4} lg={12}>\n            <div className=\"comnBlk\">\n              <Image\n                className=\"headerImg\"\n                src={require(\"../../assets/images/farm-icon.svg\").default}\n              />\n              <h3>Farm Planets</h3>\n              <p>Stake LP tokens in Farms and earn up to:</p>\n              <h3>{topFarmApy !== \"\" ? topFarmApy : \"loading..\"} % APR</h3>\n              <Link\n                className=\"captionFooter d-flex justify-content-between align-items-center\"\n                to=\"farmplanets/active\"\n              >\n                <span>Start farming</span> <span className=\"arrowIcon\" />\n              </Link>\n            </div>\n          </Col>\n          <Col xl={4} lg={12}>\n            <div className=\"comnBlk\">\n              <Image\n                className=\"headerImg\"\n                src={require(\"../../assets/images/reflink-icon.svg\").default}\n              />\n              <h3>Decentralized Ref Link </h3>\n              <p>Enjoy Referral Rewards from:</p>\n              <h3>Farms, Pools Swaps</h3>\n              <Link\n                className=\"captionFooter d-flex justify-content-between align-items-center\"\n                to=\"/referral\"\n              >\n                <span>Start inviting friends</span>{\" \"}\n                <span className=\"arrowIcon\" />\n              </Link>\n            </div>\n          </Col>\n        </Row>\n        <Row className=\"announcements\">\n          <Col xl={6} lg={12}>\n            <div className=\"comnBlk  carousel_caption_announce\">\n              <h3 className=\"fw-strong pb-2\">Announcements</h3>\n              <TwitterTimelineEmbed\n                sourceType=\"profile\"\n                screenName=\"saitafinance\"\n                options={{ height: 418 }}\n                theme=\"dark\"\n                noScrollbar={true}\n              />\n            </div>\n          </Col>\n          <Col xl={6} lg={12}>\n            <div className=\"comnBlk mb-4\">\n              <h3>SAITA Stats</h3>\n              <ul className=\"pl-0 niobStats\">\n                <li>\n                  <label>Market Cap</label>\n                  <span>${addCommas(marketCap.toFixed(2))}</span>\n                </li>\n                <li>\n                  <label>Total Minted</label>\n                  <span>{addCommas(Number(totalMinted).toFixed(2))}</span>\n                </li>\n                <li>\n                  <label>Total Burned</label>\n                  <span>{addCommas(burnedToken)}</span>\n                </li>\n                <li>\n                  <label>Total Locked Rewards</label>\n                  <span>\n                    <strong className=\"value\">\n                      {farmAndStakeLoader ? (\n                        <Loader\n                          type=\"Circles\"\n                          color=\"#FFFFFF\"\n                          height={15}\n                          width={15}\n                          visible={true}\n                          // timeout={5000} //3 secs\n                        />\n                      ) : (\n                        addCommas(\n                          totalLockedRewards ? totalLockedRewards.toFixed(2) : 0\n                        )\n                      )}\n                    </strong>\n                  </span>\n                </li>\n                <li>\n                  <label> Circulating Supply </label>\n                  <span>\n                    {addCommas((totalMinted - burnedToken).toFixed(2))}\n                  </span>\n                </li>\n                <li>\n                  <label>Max Tx Amount </label>\n                  <span>{addCommas(anchorTotalSupply.toFixed(2))}</span>\n                </li>\n                <li>\n                  <label>New Saita/Block</label>\n                  <span>{niobPerBlock}</span>\n                  {/* <span>{addCommas(anchorPerBlock)}</span> */}\n                </li>\n                <li>\n                  <label>Transfer Tax</label>\n                  <span>{\"3%\"}</span>\n                </li>\n              </ul>\n            </div>\n            <div className=\"comnBlk\">\n              <h3>Total Value Locked (TVL)</h3>\n              <div className=\"totl_value\">\n                <h3>\n                  {\" \"}\n                  {farmAndStakeLoader ? (\n                    <Loader\n                      type=\"Circles\"\n                      color=\"#FFFFFF\"\n                      height={15}\n                      width={15}\n                      visible={true}\n                      // timeout={5000} //3 secs\n                    />\n                  ) : (\n                    addCommas(liquidity ? liquidity.toFixed(2) : 0)\n                  )}\n                </h3>\n                <p className=\"mb-0\">Across all Farms and Pools</p>\n              </div>\n            </div>\n          </Col>\n        </Row>\n        <Row className=\"all_farms\">\n          <Col md={12}>\n            <div className=\"farm_title\">\n              <h3>Top Farm Planets</h3>\n              <Button\n                title=\"All Farms\"\n                onClick={() => {\n                  history.push(`${rootName}/farmplanets/active`);\n                }}\n              />\n            </div>\n          </Col>\n\n          {topFarms\n            .sort(function (a, b) {\n              let keyA = a.newApr,\n                keyB = b.newApr;\n              // Compare the 2 farms\n              if (keyA < keyB) return 1;\n              if (keyA > keyB) return -1;\n              return 0;\n            })\n            .filter((farm, index) => index < 3)\n            .map((topFarm, index) => (\n              <Col xl={4} lg={12}>\n                <FarmCard\n                  title={topFarm.symbol0}\n                  title1={topFarm.symbol1}\n                  icon1={\n                    handleIcon(topFarm?.symbol0)\n                      ? handleIcon(topFarm?.symbol0)\n                      : \"\"\n                  }\n                  icon2={\n                    handleIcon(topFarm?.symbol1)\n                      ? handleIcon(topFarm?.symbol1)\n                      : \"\"\n                  }\n                  liquidity={`$${topFarm.newLiquidity} `}\n                  apy={`${topFarm.newApr != \"NaN\" ? topFarm.newApr : \"0\"} %`}\n                />\n              </Col>\n            ))}\n        </Row>\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","/data/nm/SaitaSwap/src/pages/Trade/Trade.js",["502","503","504","505"],"import React, { useState } from \"react\";\nimport { Container, Tab, Tabs, Col, Row } from \"react-bootstrap\";\n\nimport Exchange from \"./Exchange\";\nimport Liquidity from \"././Liquidity\";\nimport { rootName } from \"../../constant\";\nimport \"./Trade.scss\";\nimport AddLiquidity from \"./AddLiquidity\";\nimport ImportPool from \"./ImportPool\";\nimport { useSelector } from \"react-redux\";\nimport { toast } from \"../../components/Toast/Toast\";\n\nconst Trade = (props) => {\n  const {\n    match: { params },\n    history,\n  } = props;\n  const { tab, fillter } = params;\n  const [colLiquidity, setColLiquidity] = useState(1);\n  const isUserConnected = useSelector((state) => state.persist.isUserConnected);\n  const [lptoken, setLptoken] = useState(null);\n\n  const handleTab = (data) => {\n    if (data === \"Bridge\") {\n      const tab = window.open(\n        \"https://www.binance.org/en/bridge?utm_source=Niob\",\n        \"_blank\"\n      );\n      tab.focus();\n    } else history.push(`${rootName}/trade/${data}`);\n  };\n\n  const handleComponent = (value) => {\n    if (!isUserConnected) {\n      return toast.error(\"Connect wallet first!\");\n    }\n    setColLiquidity(value);\n  };\n  const handleAddLiquidity = (lp) => {\n    if (!isUserConnected) {\n      return toast.error(\"Connect wallet first!\");\n    }\n    setLptoken(lp);\n    history.push(`${rootName}/trade/liquidity/addLiquidity`);\n  };\n  const handleRemove = (lp) => {\n    if (!isUserConnected) {\n      return toast.error(\"Connect wallet first!\");\n    }\n    setLptoken(lp);\n  };\n  const [key, setKey] = useState(\"deutsch\");\n  return (\n    <div className=\"container_wrap trade\">\n      <Container fluid className=\"swapScreen comnSection\">\n        <Container className=\"smallContainer\">\n          <h2 className=\"text-center swap_title\">Make a Swap</h2>\n          <Row>\n            {/* <Col md={6} lg={4}>\n              <div className=\"comnBlk lang-blk\">\n                <Tabs\n                  activeKey={key}\n                  defaultActiveKey=\"english\"\n                  id=\"tab-example\"\n                  className=\"  lang-tab\"\n                  onSelect={(k) => setKey(k)}\n                >\n                  <Tab\n                    eventKey=\"english\"\n                    title=\"English\"\n                    className=\"lang-content\"\n                  >\n                    <h2>Important Information</h2>\n                    <p>\n                      Never execute a swap if the offered value for the target\n                      currency does not correspond to the market price! If there\n                      is not enough liquidity available on NIOB Swap for the\n                      desired pair (for example BNB to DOT), the price cannot be\n                      met.\n                      <br />\n                      <br />{\" \"}\n                      <strong>\n                        {\" \"}\n                        After entering both tokens you will see the summary of\n                        the exchange in the swap window.\n                      </strong>\n                      <br />\n                      <br /> If the exchange gets still confirmed, the lost\n                      amount cannot be refunded! <br />\n                      <br />\n                      <strong>\n                        {\" \"}\n                        USER IS SOLELY RESPONSIBLE FOR ANY LOSSES CAUSED BY LOW\n                        LIQUIDITY!\n                      </strong>\n                    </p>\n                  </Tab>\n                  <Tab\n                    eventKey=\"deutsch\"\n                    title=\"Deutsch\"\n                    className=\"lang-content\"\n                  >\n                    <h2>Wichtige Information</h2>\n                    <p>\n                      Niemals einen Swap durchführen wenn der angebotene Wert\n                      für die Zielwährung nicht dem Marktpreis entspricht!\n                      Sollte für das gewünschte Paar (zum Beispiel BNB zu DOT)\n                      nicht genügend Liquidität auf der Exchange zur Verfügung\n                      stehen, kann der Preis nicht eingehalten werden.\n                      <br />\n                      <br />{\" \"}\n                      <strong>\n                        {\" \"}\n                        Nach der Eingabe beider Token seht ihr die\n                        Zusammenfassung des Exchange im Swap Fenster.\n                      </strong>\n                      <br />\n                      <br />{\" \"}\n                      <strong>\n                        {\" \"}\n                        Der Nutzer ist allein verantwortlich für Verluste, die\n                        durch geringe Liquidität entstehen!{\" \"}\n                      </strong>{\" \"}\n                      <br />\n                      <br />\n                    </p>\n                  </Tab>\n                </Tabs>\n              </div>\n            </Col> */}\n            <Col md={6}>\n              <div className=\"comnBlk\">\n                <Tabs\n                  activeKey={tab}\n                  defaultActiveKey=\"exchange\"\n                  id=\"uncontrolled-tab-example\"\n                  className=\"mb-3\"\n                  onSelect={handleTab}\n                >\n                  <Tab eventKey=\"exchange\" title=\"Swap\">\n                    <Exchange />\n                  </Tab>\n                  <Tab eventKey=\"liquidity\" title=\"Liquidity\">\n                    {fillter === \"addLiquidity\" ? (\n                      <AddLiquidity lptoken={lptoken} />\n                    ) : fillter === \"importPool\" ? (\n                      <ImportPool lptoken={lptoken} />\n                    ) : (\n                      <Liquidity\n                        handleAddLiquidity={handleAddLiquidity}\n                        handleRemove={handleRemove}\n                        lptoken={lptoken}\n                      />\n                    )}\n                  </Tab>\n                  {/* <Tab eventKey=\"Bridge\" title=\"Bridge\">Bridge</Tab> */}\n                </Tabs>\n              </div>\n            </Col>\n          </Row>\n        </Container>\n      </Container>\n    </div>\n  );\n};\n\nexport default Trade;\n","/data/nm/SaitaSwap/src/pages/Trade/AddLiquidity.js",["506","507","508","509","510","511","512","513","514","515","516","517","518","519","520"],"import React, { useEffect, useState } from \"react\";\nimport { Container, Col } from \"react-bootstrap\";\nimport ConnectWallet from \"../../components/ConnectWallet/ConnectWallet\";\nimport CardCustom from \"../../components/cardCustom/CardCustom\";\nimport ButtonPrimary from \"../../components/Button/Button\";\nimport SelectCoin from \"../../components/selectCoin/SelectCoin\";\nimport Plusicon from \"../../assets/images/plus_yellow.png\";\nimport ModalCurrency from \"../../components/Modal/ModalCurrency/ModalCurrency\";\nimport ButtonBack from \"../../components/buttonBack/ButtonBack\";\nimport \"./Trade.scss\";\nimport SettingModal from \"../../components/Modal/SettingModal/SettingModal\";\nimport SettingIcon from \"../../assets/images/Settings-Icon.svg\";\nimport TimerIcon from \"../../assets/images/ionic-ios-timer.svg\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { MAIN_CONTRACT_LIST, TOKEN_LIST, WETH } from \"../../assets/tokens\";\nimport { ContractServices } from \"../../services/ContractServices\";\nimport { toast } from \"../../components/Toast/Toast\";\nimport { ExchangeService } from \"../../services/ExchangeService\";\nimport {\n  addTransaction,\n  checkUserLpTokens,\n  searchTokenByNameOrAddress,\n  startLoading,\n  stopLoading,\n} from \"../../redux/actions\";\nimport { BigNumber } from \"bignumber.js\";\nimport SupplyModal from \"../../components/SupplyModal/SupplyModal\";\nimport RecentTransactions from \"../../components/RecentTransactions/RecentTransactions\";\nimport { ConsoleView } from \"react-device-detect\";\n\nconst AddLiquidity = (props) => {\n  const tokenList = useSelector((state) => state.persist.tokenList);\n\n  const [show, setShow] = useState(false);\n  const handleClose = () => setShow(false);\n  const [show1, setShow1] = useState(false);\n  const handleClose1 = () => setShow1(false);\n  const handleShow1 = () => setShow1(true);\n  const [settingShow, setsettingShow] = useState(false);\n  const settingClose = () => setsettingShow(false);\n  const [showRecent, setShowRecent] = useState(false);\n  const supplyModalClose = () => setShowSupplyModal(false);\n  const recentTransactionsClose = () => setShowRecent(false);\n  const settinghandleShow = () => setsettingShow(true);\n  const [search, setSearch] = useState(\"\");\n  const [max, setMax] = useState(true);\n\n  const dispatch = useDispatch();\n\n  const MINIMUM_LIQUIDITY = 10 ** 3;\n\n  const isUserConnected = useSelector((state) => state.persist.isUserConnected);\n  const walletType = useSelector((state) => state.persist.walletType);\n  const deadline = useSelector((state) => state.persist.deadline);\n  const slippagePercentage = useSelector(\n    (state) => state.persist.slippagePercentage\n  );\n\n  const [modalCurrency, setModalCurrency] = useState(false);\n  const [tokenOne, setTokenOne] = useState(TOKEN_LIST[0]);\n  const [tokenTwo, setTokenTwo] = useState({});\n  const [tokenOneValue, setTokenOneValue] = useState();\n  const [tokenTwoValue, setTokenTwoValue] = useState();\n  const [sharePoolValue, setSharePoolValue] = useState(100);\n  const [tokenOneCurrency, setCurrencyNameForTokenOne] = useState(\n    TOKEN_LIST[0].symbol\n  );\n  const [tokenTwoCurrency, setCurrencyNameForTokenTwo] =\n    useState(\"Select a token\");\n  const [tokenOneBalance, setTokenOneBalance] = useState(0);\n  const [tokenTwoBalance, setTokenTwoBalance] = useState(0);\n  const [tokenOneDeposit, setTokenOneDeposit] = useState(0);\n  const [tokenTwoDeposit, setTokenTwoDeposit] = useState(0);\n  const [tokenOneApproval, setTokenOneApproval] = useState(false);\n  const [tokenTwoApproval, setTokenTwoApproval] = useState(false);\n\n  const [tokenOneApproved, setTokenOneApproved] = useState(false);\n  const [tokenTwoApproved, setTokenTwoApproved] = useState(false);\n\n  const [lpTokenBalance, setLpTokenBalance] = useState(0);\n  const [tokenType, setTokenType] = useState(\"TK1\");\n  const [showSupplyModal, setShowSupplyModal] = useState(false);\n\n  const [filteredTokenList, setFilteredTokenList] = useState([]);\n  const [approvalConfirmation, setApprovalConfirmation] = useState(false);\n  const [liquidityConfirmation, setLiquidityConfirmation] = useState(false);\n\n  const [selectedCurrency, setSelectedCurrency] = useState(\"\");\n\n  const [currentPairAddress, setCurrentPairAddress] = useState(\"\");\n  const [firstProvider, setFirstProvider] = useState(false);\n  const [showPoolShare, setShowPoolShare] = useState(false);\n  const [showTransactionModal, setShowTransactionModal] = useState(false);\n  const [txHash, setTxHash] = useState(\"\");\n\n  useEffect(() => {\n    setFilteredTokenList(\n      tokenList.filter((token) =>\n        token.name.toLowerCase().includes(search.toLowerCase())\n      )\n    );\n    init();\n  }, [search, tokenList]);\n\n  const init = async () => {\n    if (isUserConnected) {\n      const oneBalance = await ContractServices.getBNBBalance(isUserConnected);\n      setTokenOneBalance(oneBalance);\n\n      const { lptoken } = props;\n\n      if (lptoken) {\n        console.log(lptoken, \"Lpztoken\");\n        setCurrentPairAddress(lptoken.pair);\n        setLpTokenBalance(lptoken.balance);\n        setSharePoolValue(lptoken.poolShare);\n        if (lptoken.token0Obj) {\n          console.log(\"hahah\", lptoken);\n          setTokenOne(lptoken.token0Obj);\n          setCurrencyNameForTokenOne(lptoken.token0Obj.symbol);\n          setTokenOneDeposit(lptoken.token0Deposit);\n          let tokenBal = 0;\n          if (lptoken.token0Obj.address === \"BNB\") {\n            tokenBal = oneBalance;\n          } else {\n            tokenBal = await ContractServices.getTokenBalance(\n              lptoken.token0Obj.address,\n              isUserConnected\n            );\n          }\n          setTokenOneBalance(tokenBal);\n        }\n        if (lptoken.token1Obj) {\n          setTokenTwo(lptoken.token1Obj);\n          setCurrencyNameForTokenTwo(lptoken.token1Obj.symbol);\n          setTokenTwoDeposit(lptoken.token1Deposit);\n          let tokenBal = 0;\n          if (lptoken.token1Obj.address === \"BNB\") {\n            tokenBal = oneBalance;\n          } else {\n            tokenBal = await ContractServices.getTokenBalance(\n              lptoken.token1Obj.address,\n              isUserConnected\n            );\n          }\n          setTokenTwoBalance(tokenBal);\n        }\n      }\n    }\n  };\n\n  const closeTransactionModal = () => {\n    setShowTransactionModal(false);\n    props.backBtn();\n    window.location.reload();\n  };\n\n  const onHandleOpenModal = (tokenType) => {\n    if (!isUserConnected) {\n      return toast.error(\"Connect wallet first!\");\n    }\n    setShow(true);\n    setFilteredTokenList(tokenList);\n    setSelectedCurrency(\n      tokenType === \"TK1\" ? tokenTwoCurrency : tokenOneCurrency\n    );\n    setModalCurrency({\n      modalCurrency: true,\n    });\n    setTokenType(tokenType);\n  };\n  const onHandleSelectCurrency = async (token, selecting) => {\n    const { address, symbol } = token;\n    if (!isUserConnected) {\n      return toast.error(\"Connect wallet first!\");\n    }\n    let a1,\n      a2,\n      oneBalance = 0,\n      twoBalance = 0;\n    if (selecting === \"TK1\") {\n      handleClose();\n      a1 = address;\n      if (address === \"BNB\") {\n        oneBalance = await ContractServices.getBNBBalance(isUserConnected);\n        setTokenOneApproved(true);\n      } else {\n        setTokenOneApproved(false);\n        oneBalance = await ContractServices.getTokenBalance(\n          address,\n          isUserConnected\n        );\n      }\n      setTokenOne(token);\n      setCurrencyNameForTokenOne(symbol);\n      setTokenOneBalance(oneBalance);\n      if (tokenTwo.address) {\n        a2 = tokenTwo.address;\n      }\n      if (tokenOneValue > 0) {\n        const r = await getAllowance(tokenOneValue, \"TK1\");\n      }\n    }\n    if (selecting === \"TK2\") {\n      handleClose();\n      a2 = address;\n      if (address === \"BNB\") {\n        setTokenTwoApproved(true);\n        twoBalance = await ContractServices.getBNBBalance(isUserConnected);\n      } else {\n        setTokenTwoApproved(false);\n        twoBalance = await ContractServices.getTokenBalance(\n          address,\n          isUserConnected\n        );\n      }\n      setTokenTwo(token);\n      setCurrencyNameForTokenTwo(symbol);\n      setTokenTwoBalance(twoBalance);\n      if (tokenOne.address) {\n        a1 = tokenOne.address;\n      }\n      if (tokenTwoValue > 0) {\n        const r = await getAllowance(tokenTwoValue, \"TK2\");\n      }\n    }\n    setModalCurrency(!modalCurrency);\n    setSearch(\"\");\n    setFilteredTokenList(tokenList);\n\n    if (a1 && a2) {\n      let currentPairAddress;\n      if (a1 === \"BNB\") {\n        a1 = WETH; //WETH\n        currentPairAddress = await ExchangeService.getPair(a1, a2);\n      } else if (a2 === \"BNB\") {\n        a2 = WETH; //WETH\n        currentPairAddress = await ExchangeService.getPair(a1, a2);\n      } else {\n        currentPairAddress = await ExchangeService.getPair(a1, a2);\n      }\n      if (currentPairAddress !== \"0x0000000000000000000000000000000000000000\") {\n        setCurrentPairAddress(currentPairAddress);\n        const lpTokenBalance = await ContractServices.getTokenBalance(\n          currentPairAddress,\n          isUserConnected\n        );\n        const d1 = await ContractServices.getDecimals(a1);\n        const d2 = await ContractServices.getDecimals(a2);\n        const reserves = await ExchangeService.getReserves(currentPairAddress);\n        console.log(\"d1\", d1, \"d2\", d2);\n        calculateLiquidityPercentageWithSelectCurrency(\n          reserves,\n          d1,\n          d2,\n          lpTokenBalance,\n          currentPairAddress\n        );\n        setLpTokenBalance(lpTokenBalance);\n        setFirstProvider(false);\n        setShowPoolShare(true);\n        // xxxxxxxxx\n        // const reserves = await ExchangeService.getReserves(currentPairAddress);\n        // calculateLiquidityPercentage(reserves, amt1, amt2);\n        // console.log('qqqqq', currentPairAddress);\n        // const reserves = await ExchangeService.getReserves(currentPairAddress);\n        // console.log('aaaaa', reserves);\n        // await calculateLiquidityPercentage(reserves, 0.1, 0.02);\n        // console.log('wwww', result);\n      } else {\n        setCurrentPairAddress(\"\");\n        setFirstProvider(true);\n        setShowPoolShare(true);\n        setLpTokenBalance(0);\n      }\n    }\n  };\n\n  const getAllowance = async (amount, tokenType) => {\n    if (tokenType === \"TK1\") {\n      if (isUserConnected && tokenOne.address !== \"BNB\") {\n        let allowance = await ContractServices.allowanceToken(\n          tokenOne.address,\n          MAIN_CONTRACT_LIST.router.address,\n          isUserConnected\n        );\n        allowance = Number(allowance) / 10 ** Number(tokenOne.decimals);\n        console.log(tokenOne.decimals, \"token 1 decimals---------------\");\n        if (amount > allowance) {\n          setTokenOneApproval(true);\n        } else {\n          setTokenOneApproved(true);\n        }\n      } else {\n        setTokenOneApproved(true);\n      }\n    }\n    if (tokenType === \"TK2\") {\n      if (isUserConnected && tokenTwo.address !== \"BNB\") {\n        let allowance = await ContractServices.allowanceToken(\n          tokenTwo.address,\n          MAIN_CONTRACT_LIST.router.address,\n          isUserConnected\n        );\n        allowance = Number(allowance) / 10 ** Number(tokenTwo.decimals);\n        // console.log(allowance, 'token 2')\n        if (amount > allowance) {\n          setTokenTwoApproval(true);\n        } else {\n          setTokenTwoApproved(true);\n        }\n      } else {\n        setTokenTwoApproved(true);\n      }\n    }\n    return true;\n  };\n\n  const handleTokenValue = async (amount, tokenType) => {\n    let amt1, amt2;\n    if (\n      tokenOne.address.toLowerCase() !== TOKEN_LIST[0].address.toLowerCase() &&\n      tokenOne.address.toLowerCase() !== TOKEN_LIST[1].address.toLowerCase() &&\n      tokenTwo.address.toLowerCase() !== TOKEN_LIST[0].address.toLowerCase() &&\n      tokenTwo.address.toLowerCase() !== TOKEN_LIST[1].address.toLowerCase()\n    ) {\n      toast.error(\"One token should be either Eth or Saitama\");\n      return;\n    }\n    if (tokenType === \"TK1\") {\n      setTokenOneValue(amount);\n      amt1 = amount;\n      const r = await getAllowance(amount, tokenType);\n      if (r && tokenOne.address && tokenTwo.address && amount > 0) {\n        let tokenAddress = tokenOne.address;\n        if (tokenOne.address === \"BNB\") {\n          tokenAddress = WETH;\n        }\n        console.log(\"EEEEEE\", currentPairAddress);\n        if (currentPairAddress) {\n          const tk0 = await ExchangeService.getTokenZero(currentPairAddress);\n          const tk1 = await ExchangeService.getTokenOne(currentPairAddress);\n          const reserves = await ExchangeService.getReserves(\n            currentPairAddress\n          );\n          const token0Decimal = await ContractServices.getDecimals(tk0);\n          const token1Decimal = await ContractServices.getDecimals(tk1);\n\n          if (tk0 && reserves) {\n            let a;\n            if (tokenAddress.toLowerCase() === tk0.toLowerCase()) {\n              a = (\n                amount *\n                (reserves[1] /\n                  10 ** token1Decimal /\n                  (reserves[0] / 10 ** token0Decimal))\n              ).toFixed(5);\n            } else {\n              a = (\n                amount *\n                (reserves[0] /\n                  10 ** token0Decimal /\n                  (reserves[1] / 10 ** token1Decimal))\n              ).toFixed(5);\n            }\n            console.log(\"a\", Number(a));\n            setTokenTwoValue(a);\n            amt2 = a;\n            if (!tokenTwoApproval) {\n              const r = await getAllowance(a, \"TK2\");\n              handleApprovalButton(\"TK2\");\n            }\n          }\n        }\n      }\n    }\n    if (tokenType === \"TK2\") {\n      setTokenTwoValue(amount);\n      amt2 = amount;\n      const r = await getAllowance(amount, tokenType);\n      if (r && tokenOne.address && tokenTwo.address && amount > 0) {\n        let tokenAddress = tokenTwo.address;\n        if (tokenTwo.address === \"BNB\") {\n          tokenAddress = WETH;\n        }\n        if (currentPairAddress) {\n          const tk0 = await ExchangeService.getTokenZero(currentPairAddress);\n          const tk1 = await ExchangeService.getTokenOne(currentPairAddress);\n          const reserves = await ExchangeService.getReserves(\n            currentPairAddress\n          );\n          const token0Decimal = await ContractServices.getDecimals(tk0);\n          const token1Decimal = await ContractServices.getDecimals(tk1);\n\n          if (tk0 && reserves) {\n            let a;\n            if (tokenAddress.toLowerCase() === tk0.toLowerCase()) {\n              a = (\n                amount *\n                (reserves[1] /\n                  10 ** token1Decimal /\n                  (reserves[0] / 10 ** token0Decimal))\n              ).toFixed(5);\n            } else {\n              a = (\n                amount *\n                (reserves[0] /\n                  10 ** token0Decimal /\n                  (reserves[1] / 10 ** token1Decimal))\n              ).toFixed(5);\n            }\n            setTokenOneValue(a);\n            amt1 = a;\n            if (!tokenOneApproval) {\n              const r = await getAllowance(a, \"TK1\");\n              handleApprovalButton(\"TK1\");\n            }\n          }\n        }\n      }\n    }\n    if (tokenOne.address && tokenTwo.address) {\n      let a1 = tokenOne.address,\n        a2 = tokenTwo.address;\n\n      let currentPairAddress;\n      if (a1 === \"BNB\") {\n        a1 = WETH; //WETH\n        currentPairAddress = await ExchangeService.getPair(a1, a2);\n      } else if (a2 === \"BNB\") {\n        a2 = WETH; //WETH\n        currentPairAddress = await ExchangeService.getPair(a1, a2);\n      } else {\n        currentPairAddress = await ExchangeService.getPair(a1, a2);\n      }\n      if (currentPairAddress !== \"0x0000000000000000000000000000000000000000\") {\n        setCurrentPairAddress(currentPairAddress);\n        const lpTokenBalance = await ContractServices.getTokenBalance(\n          currentPairAddress,\n          isUserConnected\n        );\n        setLpTokenBalance(lpTokenBalance);\n\n        const reserves = await ExchangeService.getReserves(currentPairAddress);\n        const ratio = await calculateLiquidityPercentage(reserves, amt1, amt2);\n        // console.log(reserves, ratio, '---------------------------ratio');\n        setSharePoolValue(ratio);\n\n        setFirstProvider(false);\n        setShowPoolShare(true);\n      } else {\n        setCurrentPairAddress(\"\");\n        setFirstProvider(true);\n        setShowPoolShare(true);\n        setLpTokenBalance(0);\n      }\n    }\n  };\n  //call web3 approval function\n  const handleTokenApproval = async (tokenType) => {\n    const acc = isUserConnected;\n    console.log(\"isUserConnected\", isUserConnected);\n    // if (acc && acc.toLowerCase() !== isUserConnected.toLowerCase()) {\n    //   return toast.error(\"Wallet address doesn`t match!\");\n    // }\n    if (approvalConfirmation) {\n      return toast.info(\"Token approval is processing\");\n    }\n    // const value = (2*256 - 1).toString();\n    const value =\n      \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n    let tokenAddress = \"BNB\";\n    if (tokenType === \"TK1\") {\n      tokenAddress = tokenOne.address;\n    }\n    if (tokenType === \"TK2\") {\n      tokenAddress = tokenTwo.address;\n    }\n    try {\n      dispatch(startLoading());\n\n      const r = await ContractServices.approveToken(\n        isUserConnected,\n        value,\n        MAIN_CONTRACT_LIST.router.address,\n        tokenAddress\n      );\n      if (r.code == 4001) {\n        toast.error(\"User denied transaction signature.\");\n      } else {\n        setApprovalConfirmation(true);\n        let data = {\n          message: `Approve`,\n          tx: r.transactionHash,\n        };\n        if (tokenType === \"TK1\") {\n          setTokenOneApproved(true);\n          setTokenOneApproval(false);\n\n          data.message = `Approve ${tokenOne.symbol}`;\n        }\n        if (tokenType === \"TK2\") {\n          setTokenTwoApproved(true);\n          setTokenTwoApproval(false);\n          data.message = `Approve ${tokenTwo.symbol}`;\n        }\n        dispatch(addTransaction(data));\n        setApprovalConfirmation(false);\n      }\n      dispatch(stopLoading());\n    } catch (err) {\n      console.log(\"***********err*\", err);\n\n      setApprovalConfirmation(false);\n      dispatch(stopLoading());\n      console.log(err);\n      toast.error(\"Transaction Reverted!\");\n    }\n  };\n\n  const handleSearchToken = async (data) => {\n    try {\n      const res = await dispatch(searchTokenByNameOrAddress(data));\n      setFilteredTokenList(res);\n    } catch (error) {\n      toast.error(\"Something went wrong!\");\n    }\n  };\n  const handleApprovalButton = (tokenType) => {\n    if (tokenOneApproval && tokenType === \"TK1\") {\n      return (\n        <div className=\"col button_unlockWallet\">\n          <ButtonPrimary\n            className=\"swapBtn\"\n            title={`Approve ${tokenOne.symbol}`}\n            disabled={approvalConfirmation}\n            onClick={() => handleTokenApproval(tokenType)}\n          />\n        </div>\n      );\n    }\n    if (tokenTwoApproval && tokenType === \"TK2\") {\n      return (\n        <div className=\"col button_unlockWallet\">\n          <ButtonPrimary\n            className=\"swapBtn\"\n            title={`Approve ${tokenTwo.symbol}`}\n            disabled={approvalConfirmation}\n            onClick={() => handleTokenApproval(tokenType)}\n          />\n        </div>\n      );\n    }\n    //dead code\n    return null;\n  };\n  const calculateLiquidityPercentageWithSelectCurrency = async (\n    reserve,\n    d1,\n    d2,\n    lpBalance,\n    currentPairAddress\n  ) => {\n    console.log(\"HIIIIIIIIIIIIIIIIIIIIII\", d1, d2);\n    const _reserve0 = Number(reserve[\"_reserve0\"]) / 10 ** d2;\n    const _reserve1 = Number(reserve[\"_reserve1\"]) / 10 ** d1;\n\n    let _totalSupply = await ContractServices.getTotalSupply(\n      currentPairAddress\n    );\n\n    let ratio = lpBalance / _totalSupply;\n    const t0 = (ratio * _reserve0).toFixed(5);\n    console.log(\"tototo\", t0);\n    setTokenOneDeposit(t0);\n    const t1 = (ratio * _reserve1).toFixed(5);\n    setTokenTwoDeposit(t1);\n    console.log(\"ratio\", ratio, \"reserve0\", _reserve0, \"reserve1\", _reserve1);\n  };\n  const calculateLiquidityPercentage = async (reserve, amount0, amount1) => {\n    const _reserve0 = reserve[\"_reserve0\"] / 10 ** tokenOne.decimals;\n    const _reserve1 = reserve[\"_reserve1\"] / 10 ** tokenTwo.decimals;\n\n    let liquidity = 0;\n    let _totalSupply = await ContractServices.getTotalSupply(\n      currentPairAddress\n    );\n\n    let ratio = lpTokenBalance / _totalSupply;\n    const t0 = (ratio * _reserve0).toFixed(5);\n    setTokenOneDeposit(t0);\n    const t1 = (ratio * _reserve1).toFixed(5);\n    setTokenTwoDeposit(t1);\n\n    if (_totalSupply === 0) {\n      liquidity = Math.sqrt(amount0 * amount1) - MINIMUM_LIQUIDITY;\n      return 100;\n    } else {\n      liquidity = Math.min(\n        (amount0 * _totalSupply) / _reserve0,\n        (amount1 * _totalSupply) / _reserve1\n      );\n    }\n\n    liquidity = ((liquidity / (_totalSupply + liquidity)) * 100).toFixed(2);\n  };\n\n  const checkAddLiquidity = async () => {\n    debugger;\n    if (!isUserConnected) {\n      handleShow1();\n    } else {\n      let address;\n      if (walletType === \"Metamask\") {\n        address = await ContractServices.isMetamaskInstalled(\"\");\n        // address = await isUserConnected;\n        console.log(address, \"address\");\n      }\n      if (walletType === \"BinanceChain\") {\n        address = await ContractServices.isBinanceChainInstalled();\n      }\n\n      if (isUserConnected?.toLowerCase() !== address?.toLowerCase()) {\n        return toast.error(\"Mismatch wallet address!\");\n      }\n      if (!tokenOne.address) {\n        return toast.error(\"Select first token!\");\n      }\n      if (!tokenTwo.address) {\n        return toast.error(\"Select second token!\");\n      }\n      if (tokenOneValue <= 0) {\n        return toast.error(\"Enter first token value!\");\n      }\n      if (tokenTwoValue <= 0) {\n        return toast.error(\"Enter second token value!\");\n      }\n      if (!tokenOneApproved) {\n        return toast.error(\"First Token approval is pending!\");\n      }\n      if (!tokenTwoApproved) {\n        return toast.error(\"Second Token approval is pending!\");\n      }\n      console.log(\n        tokenOneBalance < tokenOneValue,\n        tokenOneBalance,\n        tokenOneValue\n      );\n      if (tokenOneBalance < tokenOneValue) {\n        return toast.error(\n          `Wallet have insufficient ${tokenOne.symbol} balance!`\n        );\n      }\n      if (tokenTwoBalance < tokenTwoValue) {\n        return toast.error(\n          `Wallet have insufficient ${tokenTwo.symbol} balance!`\n        );\n      }\n      setShowSupplyModal(true);\n    }\n  };\n\n  const addLiquidity = async () => {\n    const acc = isUserConnected;\n    if (acc && acc.toLowerCase() !== isUserConnected.toLowerCase()) {\n      return toast.error(\"Wallet address doesn`t match!\");\n    }\n    if (liquidityConfirmation) {\n      return toast.info(\"Transaction is processing!\");\n    }\n    setLiquidityConfirmation(true);\n    let value = 0,\n      checkBNB = false,\n      token;\n\n    let dl = Math.floor(new Date().getTime() / 1000);\n    dl = dl + deadline * 60;\n\n    if (tokenOne.address === \"BNB\") {\n      checkBNB = true;\n      value = tokenOneValue;\n      token = tokenTwo.address;\n    }\n    if (tokenTwo.address === \"BNB\") {\n      checkBNB = true;\n      value = tokenTwoValue;\n      token = tokenOne.address;\n    }\n    if (value > 0) {\n      value = value * 10 ** 18;\n    }\n    if (checkBNB) {\n      let amountETHMin = BigNumber(\n        Math.floor(Number(value) - (Number(value) * slippagePercentage) / 100)\n      ).toFixed();\n      let amountTokenMin = \"\";\n      let amountTokenDesired = 0;\n      if (tokenOne.address === \"BNB\") {\n        amountTokenDesired = tokenTwoValue;\n        amountTokenMin = BigNumber(\n          Math.floor(\n            (amountTokenDesired -\n              (amountTokenDesired * slippagePercentage) / 100) *\n              10 ** tokenTwo.decimals\n          )\n        ).toFixed();\n        amountTokenDesired = BigNumber(\n          amountTokenDesired * 10 ** tokenTwo.decimals\n        ).toFixed();\n      }\n      if (tokenTwo.address === \"BNB\") {\n        amountTokenDesired = tokenOneValue;\n        amountTokenMin = BigNumber(\n          Math.floor(\n            (amountTokenDesired -\n              (amountTokenDesired * slippagePercentage) / 100) *\n              10 ** tokenOne.decimals\n          )\n        ).toFixed();\n        amountTokenDesired = BigNumber(\n          amountTokenDesired * 10 ** tokenOne.decimals\n        ).toFixed();\n      }\n      value = value.toString();\n\n      const data = {\n        token,\n        amountTokenDesired,\n        amountTokenMin,\n        amountETHMin,\n        to: isUserConnected,\n        deadline: dl,\n        value,\n      };\n      try {\n        dispatch(startLoading());\n        console.log(data, \"ye hai data\");\n        const result = await ExchangeService.addLiquidityETH(data);\n        alert(\"ddd\");\n        // console.log(result, \"add liquidity transaction\");\n        dispatch(stopLoading());\n\n        if (result) {\n          setTxHash(result);\n          setShowTransactionModal(true);\n          setShowSupplyModal(false);\n\n          const data = {\n            message: `Add ${tokenOne.symbol} and ${tokenTwo.symbol}`,\n            tx: result,\n          };\n          dispatch(addTransaction(data));\n          dispatch(checkUserLpTokens(false));\n        }\n        setLiquidityConfirmation(false);\n      } catch (err) {\n        dispatch(stopLoading());\n        const message = await ContractServices.web3ErrorHandle(err);\n        toast.error(message);\n        setLiquidityConfirmation(false);\n      }\n    } else {\n      let amountADesired = tokenOneValue;\n      let amountBDesired = tokenTwoValue;\n\n      let amountAMin = Math.floor(\n        amountADesired - (amountADesired * slippagePercentage) / 100\n      );\n      let amountBMin = Math.floor(\n        amountBDesired - (amountBDesired * slippagePercentage) / 100\n      );\n\n      amountADesired = BigNumber(\n        amountADesired * 10 ** tokenOne.decimals\n      ).toFixed();\n      amountBDesired = BigNumber(\n        amountBDesired * 10 ** tokenTwo.decimals\n      ).toFixed();\n      amountAMin = BigNumber(amountAMin * 10 ** tokenOne.decimals).toFixed();\n      amountBMin = BigNumber(amountBMin * 10 ** tokenTwo.decimals).toFixed();\n\n      let dl = Math.floor(new Date().getTime() / 1000);\n      dl = dl + deadline * 60;\n\n      const data = {\n        tokenA: tokenOne.address,\n        tokenB: tokenTwo.address,\n        amountADesired,\n        amountBDesired,\n        amountAMin,\n        amountBMin,\n        to: isUserConnected,\n        deadline: dl,\n        value,\n      };\n      try {\n        dispatch(startLoading());\n        const result = await ExchangeService.addLiquidity(data);\n        // console.log(result, \"add liquidity transaction\");\n\n        dispatch(stopLoading());\n        if (result) {\n          setTxHash(result);\n          setShowTransactionModal(true);\n          setShowSupplyModal(false);\n\n          const data = {\n            message: `Add ${tokenOne.symbol} and ${tokenTwo.symbol}`,\n            tx: result,\n          };\n          dispatch(addTransaction(data));\n          dispatch(checkUserLpTokens(false));\n        }\n        setLiquidityConfirmation(false);\n      } catch (err) {\n        console.log(err);\n        dispatch(stopLoading());\n        const message = await ContractServices.web3ErrorHandle(err);\n        toast.error(message);\n        setLiquidityConfirmation(false);\n      }\n    }\n  };\n  const calculateFraction = (tokenType) => {\n    let r = 0;\n    if (tokenOneValue && tokenTwoValue) {\n      console.log(\n        \"tokenOneValue\",\n        tokenOneValue,\n        \"tokenTwoValue\",\n        tokenTwoValue\n      );\n      if (tokenType === \"TK1\") {\n        if (tokenOneValue === 0) return 0;\n        r = tokenTwoValue / tokenOneValue;\n      }\n      if (tokenType === \"TK2\") {\n        if (tokenTwoValue === 0) return 0;\n        r = tokenOneValue / tokenTwoValue;\n      }\n      return Number(r.toFixed(5));\n    } else {\n      return 0;\n    }\n  };\n\n  const handleMaxBalance = async (amountIn) => {\n    if (!isUserConnected) {\n      return toast.error(\"Connect wallet first!\");\n    }\n    if (tokenOne.address === \"BNB\") {\n      // .002 BNB is reserved for saving gas fee\n      const bnbBalance =\n        (await ContractServices.getBNBBalance(isUserConnected)) - 0.1;\n      handleTokenValue(bnbBalance, amountIn);\n      setMax(false);\n    } else {\n      // __ amount of particular token must be reserved for saving -needs to be fixed\n      const tokenBalance = await ContractServices.getTokenBalance(\n        tokenOne.address,\n        isUserConnected\n      );\n      handleTokenValue(tokenBalance, amountIn);\n      setMax(false);\n    }\n  };\n  return (\n    <>\n      <Container fluid className=\"swapScreen comnSection\">\n        <CardCustom>\n          <div className=\"settingSec\">\n            <div className=\"in_title\">\n              <ButtonBack />\n              <h4 className=\"ps-5\">Add Liquidity</h4>\n            </div>\n            <div className=\"settingIcon\">\n              <img\n                src={TimerIcon}\n                onClick={() => setShowRecent(true)}\n                className=\"timerImg\"\n              />\n              <img src={SettingIcon} onClick={() => settinghandleShow(true)} />\n            </div>\n          </div>\n          {firstProvider && (\n            <div className=\"firstPro_Note\">\n              <p>You are the first liquidity provider.</p>\n              <p>\n                The ratio of tokens you add will set the price of this pool.\n              </p>\n              <p>Once you are happy with the rate click supply to review.</p>\n            </div>\n          )}\n          <div className=\"liquidtySec\">\n            {\n              <SelectCoin\n                label={`Balance: ${tokenOneBalance}`}\n                coinImage={tokenOne?.icon}\n                value={tokenOneCurrency}\n                onClick={() => onHandleOpenModal(\"TK1\")}\n                inputLabel=\"Input\"\n                className=\"mb-0\"\n                placeholder=\"0.0\"\n                onChange={(e) => handleTokenValue(e.target.value, \"TK1\")}\n                defaultValue={tokenOneValue}\n                max={max}\n                onMax={() => handleMaxBalance(\"TK1\")}\n              />\n            }\n            <div className=\"convert_plus\">\n              <img src={Plusicon} style={{ width: 22 }} />\n            </div>\n            {\n              <SelectCoin\n                label={`Balance: ${tokenTwoBalance}`}\n                coinImage={tokenTwo?.icon}\n                value={tokenTwoCurrency}\n                onClick={() => onHandleOpenModal(\"TK2\")}\n                inputLabel=\"Input\"\n                className=\"mb-0\"\n                placeholder=\"0.0\"\n                onChange={(e) => handleTokenValue(e.target.value, \"TK2\")}\n                defaultValue={tokenTwoValue}\n                max={false}\n              />\n            }\n            {showPoolShare && (\n              <Col className=\"poolSec\">\n                <h6>PRICES AND POOL SHARE</h6>\n                <div className=\"poolDiv\">\n                  <span>\n                    {calculateFraction(\"TK1\")}\n                    <br />\n                    <small>\n                      {\" \"}\n                      {tokenTwoCurrency} per {tokenOneCurrency}\n                    </small>\n                  </span>\n                  <span>\n                    {calculateFraction(\"TK2\")} per\n                    <br />\n                    <small>\n                      {\" \"}\n                      {tokenOneCurrency} per {tokenTwoCurrency}\n                    </small>\n                  </span>\n                  <span>\n                    {sharePoolValue}% <br />\n                    <small>Share of Pool</small>\n                  </span>\n                </div>\n              </Col>\n            )}\n            {currentPairAddress && (\n              <Col className=\"lp-class\">\n                <h4>LP Tokens in your Wallet</h4>\n                <ul className=\"LptokensList\">\n                  <li>\n                    <span>\n                      <img\n                        className=\"sc-fWPcDo bUpjCL\"\n                        alt=\"icon 1\"\n                        src={tokenOne?.icon}\n                      />\n                      <img\n                        className=\"sc-fWPcDo bUpjCL\"\n                        alt=\"icon 2\"\n                        src={tokenTwo?.icon}\n                      />\n                      &nbsp;&nbsp;\n                      {`${tokenOneCurrency}/${tokenTwoCurrency}`}:\n                    </span>{\" \"}\n                    <span>{Number(lpTokenBalance)?.toFixed(5)}</span>\n                  </li>\n                  <li>\n                    {tokenOne.symbol}: <span>{tokenOneDeposit}</span>\n                  </li>\n                  <li>\n                    {\" \"}\n                    {tokenTwo.symbol}: <span>{tokenTwoDeposit}</span>\n                  </li>\n                </ul>\n              </Col>\n            )}\n          </div>\n          <Col className=\"swapBtn_col\">\n            {handleApprovalButton(\"TK1\")}\n            {handleApprovalButton(\"TK2\")}\n\n            <ButtonPrimary\n              className=\"swapBtn dismissBtn\"\n              title={isUserConnected ? \"Supply\" : \"Unlock Wallet\"}\n              // onClick={() => handleShow1(true)}\n              onClick={() => checkAddLiquidity()}\n            />\n          </Col>\n        </CardCustom>\n      </Container>\n      <ModalCurrency\n        show={show}\n        handleClose={handleClose}\n        tokenList={filteredTokenList}\n        searchToken={handleSearchToken}\n        searchByName={setSearch}\n        selectCurrency={onHandleSelectCurrency}\n        tokenType={tokenType}\n        currencyName={selectedCurrency}\n        handleOrder={setFilteredTokenList}\n      />\n      <ConnectWallet\n        show={show1}\n        handleShow={handleShow1}\n        handleClose={handleClose1}\n      />\n      <SettingModal\n        show={settingShow}\n        handleShow={settinghandleShow}\n        handleClose={settingClose}\n      />\n      <SupplyModal\n        show={showSupplyModal}\n        handleClose={supplyModalClose}\n        addLiquidity={addLiquidity}\n        liquidityConfirmation={liquidityConfirmation}\n        tokenOneCurrency={tokenOneCurrency}\n        tokenOneValue={tokenOneValue}\n        tokenTwoCurrency={tokenTwoCurrency}\n        tokenTwoValue={tokenTwoValue}\n        calculateFraction={calculateFraction}\n        sharePoolValue={sharePoolValue}\n        tokenOne={tokenOne}\n        tokenTwo={tokenTwo}\n        slippagePercentage={slippagePercentage}\n      />\n      <RecentTransactions\n        show={showRecent}\n        handleClose={recentTransactionsClose}\n      />\n    </>\n  );\n};\n\nexport default AddLiquidity;\n","/data/nm/SaitaSwap/src/pages/PoolGalaxy/PoolGalaxy.js",["521","522","523","524","525","526","527","528","529","530","531","532","533","534","535"],"import React, { useEffect, useState } from \"react\";\nimport Button from \"@restart/ui/esm/Button\";\nimport {\n  Container,\n  Col,\n  Row,\n  Form,\n  InputGroup,\n  FormControl,\n  Tabs,\n  Tab,\n} from \"react-bootstrap\";\nimport Searchicon from \"../../assets/images/search.png\";\nimport PoolIcon from \"../../assets/images/Pool-Header-Logo.svg\";\nimport \"./PoolGalaxy.scss\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addTransaction, startLoading, stopLoading } from \"../../redux/actions\";\nimport { ReferralsServices } from \"../../services/ReferralsServices\";\nimport { FarmService } from \"../../services/FarmService\";\nimport { ContractServices } from \"../../services/ContractServices\";\nimport { ExchangeService } from \"../../services/ExchangeService\";\nimport { toast } from \"../../components/Toast/Toast\";\nimport BigNumber from \"bignumber.js\";\nimport GalaxyCard from \"../../components/GalaxyCard/GalaxyCard\";\nimport NIOB from \"../../assets/images/token_icons/NIOB.svg\";\nimport BUSD from \"../../assets/images/token_icons/BUSD-Token.svg\";\nimport GetLPToken from \"../../components/GetLPToken/GetLPToken\";\nimport WithDrawLPToken from \"../../components/GetLPToken/WithDrawLPToken\";\nimport TransactionalModal from \"../../components/TransactionalModal/TransactionalModal\";\nimport ReturnInvest from \"../../components/ReturnInvest/ReturnInvest\"\nimport { TOKEN_LIST, ANCHOR_BUSD_LP } from \"../../assets/tokens\";\n\nfunction PoolGalaxy(props) {\n  const {\n    match: { params },\n    history,\n  } = props;\n  const { tab } = params;\n  // const handleTab = (data) => {\n  //   history.push(`${rootName}/farmplanets/${data}`);\n  // };\n\n  const handleClose = () => { setStakeValue(null); setShowStake(false) };\n  const handleWithdrawClose = () => { setStakeValue(null); setShowStakeWithdraw(false) };\n\n  const dispatch = useDispatch();\n  const isUserConnected = useSelector(state => state.persist.isUserConnected);\n  const referralAddress = useSelector(state => state.persist.referralAddress);\n\n  const [checked, setChecked] = useState(false);\n  const [active, setActive] = useState(true);\n  const [currentIndex, setCurrentIndex] = useState(-1);\n  const [showStake, setShowStake] = useState(false);\n  const [showStakeWithdraw, setShowStakeWithdraw] = useState(false);\n  const [showAPY, setShowAPY] = useState(false);\n  const [roiModalData, setRoiModalData] = useState(null);\n\n  const [poolLength, setPoolLength] = useState(0);\n  const [farms, setFarms] = useState([]);\n  const [inactiveFarms, setInactiveFarms] = useState([]);\n  const [stakingOnly, setStakingOnly] = useState([]);\n  const [stakeData, setStakeData] = useState(null);\n  const [stakeValue, setStakeValue] = useState(0);\n  const [referrer, setReferrer] = useState('0x0000000000000000000000000000000000000000');\n\n  const [stakeConfirmation, setStakeConfimation] = useState(0);\n  const [showTransactionModal, setShowTransactionModal] = useState(false);\n  const [txHash, setTxHash] = useState('');\n  const [lpDetails, setLpTokenDetails] = useState(null);\n  const [niobStats, setNiobStats] = useState(null);\n\n\n  //staking only\n  const handleChange = () => setChecked(!checked);\n\n  const closeTransactionModal = () => {\n    setShowTransactionModal(false);\n    setFarms([]);\n    setInactiveFarms([]);\n    setStakingOnly([]);\n    init();\n    window.location.reload();\n  }\n\n  const cloaseRoiModal = () => {\n    setShowAPY(false);\n  }\n  const handleRoiModal = (data, lpDetails, niobId) => {\n    // console.log(data, lpDetails);\n    setNiobStats(niobId);\n    setRoiModalData(data);\n    setLpTokenDetails(lpDetails);\n    setShowAPY(true);\n  }\n\n  const handleIndex = (index) => {\n    if (currentIndex === index) {\n      setCurrentIndex(-1);\n    } else {\n      setCurrentIndex(index);\n    }\n  };\n\n\n  const getValue = async (address) => {\n    if (address != undefined) {\n      try {\n        const reserves = await ExchangeService.getReserves(ANCHOR_BUSD_LP);\n        let val = reserves[1] / reserves[0];\n        val = val || 0;\n        return (val.toFixed(3));\n\n      } catch (error) {\n        console.log(error)\n      }\n    }\n\n  }\n\n\n  //this will re-arrange locked pool to desired position\n  const getSortedPools = (array, from, to) => {\n    if (to === from) return array;\n\n    let target = array[from];\n    let increment = to < from ? -1 : 1;\n\n    for (let k = from; k != to; k += increment) {\n      array[k] = array[k + increment];\n    }\n    array[to] = target;\n    return array;\n  }\n\n  useEffect(() => {\n    init();\n    return () => {\n      setFarms([]);\n      setInactiveFarms([]);\n    }\n  }, [isUserConnected]);\n\n  const init = async () => {\n    try {\n      dispatch(startLoading());\n      let ref = await ReferralsServices.getReferrer(isUserConnected);\n      if (ref === '0x0000000000000000000000000000000000000000') {\n        if (referralAddress && referralAddress !== '0x0000000000000000000000000000000000000000') {\n          ref = referralAddress;\n        }\n        setReferrer(ref);\n      }\n      const pL = Number(await FarmService.poolLength());\n      // console.log('qq', pL);\n      setPoolLength(pL);\n      // let farmsTemp = [];\n      dispatch(stopLoading());\n      let activePoolsToSort = [];\n      let stakingOnlyArrayToSort = [];\n      for (let i = 0; i < pL; i++) {\n\n        const poolInfo = await FarmService.poolInfo(i, '2');\n        const niobId = await FarmService.niobId();\n        const userInfo = await FarmService.userInfo(i, isUserConnected);\n        const dollarVal = await getValue(poolInfo.lpToken);\n        if (poolInfo) {\n          if (Number(poolInfo.allocPoint) === 0) {\n            setInactiveFarms(inactiveFarms => [...inactiveFarms, { poolInfo, userInfo, pid: i, isLocked: niobId == i ? true : false, dollarVal }]);\n          } else {\n            if (Number(userInfo.amount) > 0) {\n              // stakingOnlyArrayToSort.push({ poolInfo, userInfo, pid: i, niobId })\n              setStakingOnly(stakingOnly => [...stakingOnly, { poolInfo, userInfo, pid: i, isLocked: false, dollarVal }]);\n            }\n            // activePoolsToSort.push({ poolInfo, userInfo, pid: i, niobId })\n            setFarms(farms => [...farms, { poolInfo, userInfo, pid: i, niobId, isLocked: false, dollarVal }]);\n          }\n        }\n      }\n\n      // // this x is the current postion of lockedNiobPool which we use to change it's position up to second later\n      // let lockedNiobIndex =  activePoolsToSort.findIndex(x => x.pid == x.niobId)\n      // // this will change position of lockedNiobPool to index 1\n      // let sortedAllPools = getSortedPools(activePoolsToSort, lockedNiobIndex, 1);\n      // //Now get unlocked niob pool details\n      // const unlockedNiobPool = sortedAllPools.find(pool => pool.pid == '6');\n      // // again get index of lockedNiobPool\n      // let newlockedNiobIndex =  sortedAllPools.findIndex(x => x.pid == x.niobId)\n      // //firstly lets fix realAllocPoint of lockedNiobPool \n      // let realAllocPointOfLockedPool = sortedAllPools[newlockedNiobIndex].poolInfo.allocPoint; \n\n      // //Now attach unlockedNiob pool's allocPoint to lockedNiobPool\n      // sortedAllPools[newlockedNiobIndex].poolInfo.allocPoint = unlockedNiobPool.poolInfo.allocPoint; \n      // sortedAllPools[newlockedNiobIndex].poolInfo.displayAllocPoint = realAllocPointOfLockedPool; \n      // // these are the total (also active) farms\n      // // setFarms(sortedAllPools);\n\n      // // these are the staked pools\n      // let lockedNiobIndexStakedOnly =  stakingOnlyArrayToSort.findIndex(x => x.pid == x.niobId);\n      // // this will change position of lockedNiobPool to index 1\n      // // check if user has staked locked pool, if yes only then sort the pools\n      // let sortedStakingOnlyPools;\n      // if (lockedNiobIndexStakedOnly !== -1 && stakingOnlyArrayToSort.length > 1) {\n      //      sortedStakingOnlyPools = getSortedPools(stakingOnlyArrayToSort, lockedNiobIndexStakedOnly, 1);\n      //     //  setStakingOnly(sortedStakingOnlyPools);\n      // }\n      // // else set the stakingOnly array as it is\n      // else {\n      //   // setStakingOnly(stakingOnlyArrayToSort);\n      // }\n\n      // these are the inactive pools\n\n    } catch (err) {\n      console.log(err)\n    }\n  };\n  const closeStakeModal = () => {\n    setShowStakeWithdraw(false);\n    setShowStake(false);\n    setStakeData(null);\n    setStakeValue(0);\n  }\n  const handleROIModal = () => {\n    setShowStakeWithdraw(false);\n    setShowStake(false);\n    setStakeData(null);\n    setStakeValue(0);\n  }\n  const stakeHandle = (data, type) => {\n    if (type === 'withdraw') {\n      setStakeData(data);\n      setShowStakeWithdraw(true);\n    }\n    if (type === 'deposit') {\n      setStakeData(data);\n      setShowStake(true);\n    }\n  }\n\n  const handleStakeValue = e => {\n    const value = e.target.value;\n    setStakeValue(value);\n  }\n  const setMaxValue = () => setStakeValue(stakeData.balance);\n\n  const harvest = async (pid, lpTokenName) => {\n    const acc = await ContractServices.getDefaultAccount();\n    if (acc && acc.toLowerCase() !== isUserConnected.toLowerCase()) {\n      return toast.error('Wallet address doesn`t match!');\n    }\n\n    if (stakeConfirmation) {\n      return toast.info('Transaction is processing!');\n    }\n    setStakeConfimation(true);\n    const data = {\n      pid: pid.toString(),\n      amount: 0,\n      referrer: referrer,\n      from: isUserConnected\n    }\n    try {\n      dispatch(startLoading());\n      const result = await FarmService.deposit(data);\n      dispatch(stopLoading());\n      setStakeConfimation(false);\n\n      if (result) {\n        setTxHash(result);\n        setShowTransactionModal(true);\n\n        const data = {\n          message: `Harvest ${lpTokenName}`,\n          tx: result\n        };\n        dispatch(addTransaction(data));\n      }\n    } catch (err) {\n      dispatch(stopLoading());\n      setStakeConfimation(false);\n\n      const message = await ContractServices.web3ErrorHandle(err);\n      toast.error(message);\n    }\n  }\n\n  const depositWithdraw = async (type, isLocked) => {\n    const acc = await ContractServices.getDefaultAccount();\n    if (acc && acc.toLowerCase() !== isUserConnected.toLowerCase()) {\n      return toast.error('Wallet address doesn`t match!');\n    }\n    const value = Number(stakeValue);\n    if (isNaN(value)) {\n      return toast.error('Enter vaild amount!');\n    }\n    if (value <= 0) {\n      return toast.error('Enter amount greater than zero!');\n    }\n    if (value > stakeData.balance) {\n      return toast.error('Value is greater than max value!');\n    }\n    if (!stakeData) {\n      return toast.info('Reload page try again!');\n    }\n    if (stakeConfirmation) {\n      return toast.info('Transaction is processing!');\n    }\n    setStakeConfimation(true);\n    if (type === 'deposit') {\n      const amount = BigNumber(value * 10 ** stakeData.lpTokenDetails.decimals).toFixed();\n      // const deposit = '10000';\n\n      const data = {\n        pid: stakeData.pid.toString(),\n        amount,\n        referrer: referrer,\n        from: isUserConnected,\n      }\n      // console.log(data, 'before deposit----------farm--------------');\n      try {\n        closeStakeModal();\n        dispatch(startLoading());\n        const result = await FarmService.deposit(data);\n        dispatch(stopLoading());\n        setStakeConfimation(false);\n\n        if (result) {\n          setTxHash(result);\n          setShowTransactionModal(true);\n\n          const data = {\n            message: `Deposit ${stakeData.lpTokenDetails.lpTokenName}`,\n            tx: result\n          };\n          dispatch(addTransaction(data));\n        }\n      } catch (err) {\n        console.log(err, 'lp deposit');\n        dispatch(stopLoading());\n        setStakeConfimation(false);\n\n        const message = await ContractServices.web3ErrorHandle(err);\n        toast.error(message);\n      }\n    }\n    if (type === 'withdraw') {\n      const amount = BigNumber(value * 10 ** stakeData.lpTokenDetails.decimals).toFixed();\n\n      const data = {\n        pid: stakeData.pid.toString(),\n        amount,\n        from: isUserConnected\n      }\n      // console.log(data, 'before withdraw----------farm--------------');\n      try {\n        closeStakeModal();\n        dispatch(startLoading());\n        let result;\n        if (isLocked) {\n          console.log('zzz', data);\n          result = await FarmService.withdrawNiob(data);\n        } else {\n          result = await FarmService.withdraw(data);\n        }\n        dispatch(stopLoading());\n        setStakeConfimation(false);\n\n        if (result) {\n          setTxHash(result);\n          setShowTransactionModal(true);\n\n          const data = {\n            message: `Withdraw ${stakeData.lpTokenDetails.lpTokenName}`,\n            tx: result\n          };\n          dispatch(addTransaction(data));\n        }\n      } catch (err) {\n        console.log(err, 'lp withdraw');\n        dispatch(stopLoading());\n        setStakeConfimation(false);\n\n        const message = await ContractServices.web3ErrorHandle(err);\n        toast.error(message);\n\n      }\n    }\n  }\n  return (\n    <div className=\"container_wrap farmpln poolGalaxy_cont\">\n      <div className=\"upper_text\">\n        <Container>\n          <Row>\n            <Col xl={6} className=\"pl-0\">\n              <div className=\"farm_title\">\n                <div className=\"farm_icon\">\n                  <img src={PoolIcon} />\n                </div>\n                <div className=\"desc\">\n                  <h1 className=\"title_hd\">Pool Galaxy</h1>\n                  <p>\n                    Stake NIOB to earn new tokens. You can unstake at any time!\n                    Rewards are calculated per block.\n                  </p>\n                </div>\n              </div>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n      <div className=\"farm_srchbar\">\n        <Container>\n          <div className=\"contain_area\">\n            <Form className=\"srchbar_area\">\n              <div className=\"serch_field\">\n                <Form.Label>Search</Form.Label>\n                <InputGroup>\n                  <FormControl id=\"search\" placeholder=\"Niob\" />\n                  <Button className=\"search_btn\">\n                    <img src={Searchicon} />\n                  </Button>\n                </InputGroup>\n              </div>\n              <div className=\"staked_only\">\n                <Form.Check\n                  type=\"checkbox\"\n                  id=\"stakecheck\"\n                  label=\"Staked only\"\n                  checked={checked}\n                  onChange={handleChange}\n                />\n                <Button className=\"btn harvest_btn\">Harvest all</Button>\n              </div>\n            </Form>\n            <div className=\"frm_plnet_list\">\n              <div className=\"farm_tabs\">\n                <Tabs\n                  activeKey={tab}\n                  id=\"frmplanet_tab\"\n                  variant=\"pills\"\n                //   onSelect={handleTab}\n                >\n\n                  <Tab eventKey=\"active\" title=\"Active\">\n                    <div className=\"planet_list active\">\n                      <Row>\n                        <Col xl={12}>\n                          {checked && (\n                            <div className=\"planet_list_view\">\n                              <div className=\"headingStyle\">\n                                <h6>Token</h6>\n                                <h6>APR</h6>\n                                <h6>Total Staked</h6>\n                                <h6 className=\"earnTxt\">Earned</h6>\n                              </div>\n                              {stakingOnly.map((farm, index) =>\n                                <GalaxyCard\n                                  key={index}\n                                  index={index}\n                                  harvestOnClick={harvest}\n                                  currentIndex={currentIndex}\n                                  handleChange={() => handleIndex(index)}\n                                  stakeHandle={stakeHandle}\n                                  handleRoiModal={handleRoiModal}\n                                  status={true}\n                                  farm={farm}\n                                  icon1={NIOB}\n                                  icon2={BUSD}\n                                  title={`NIOB`}\n                                  title1={`BUSD`}\n                                />\n                              )}\n                            </div>\n                          )}\n                          {!checked && (\n                            <div className=\"planet_list_view\">\n                              <div className=\"headingStyle\">\n                                <h6>Token</h6>\n                                <h6>APR</h6>\n                                <h6>Total Staked</h6>\n                                <h6 className=\"earnTxt\">Earned</h6>\n                              </div>\n                              {farms.map((farm, index) =>\n                                <GalaxyCard\n                                  key={index}\n                                  index={index}\n                                  harvestOnClick={harvest}\n                                  currentIndex={currentIndex}\n                                  handleChange={() => handleIndex(index)}\n                                  stakeHandle={stakeHandle}\n                                  handleRoiModal={handleRoiModal}\n                                  status={true}\n                                  farm={farm}\n                                  icon1={NIOB}\n                                  icon2={BUSD}\n                                  title={`NIOB`}\n                                  title1={`BUSD`}\n                                />\n                              )}\n                            </div>\n                          )}\n                        </Col>\n                      </Row>\n                    </div>\n                  </Tab>\n\n                  <Tab eventKey=\"inactive\" title=\"Inactive\">\n                    <div className=\"planet_list active\">\n                      <Row>\n                        <Col xl={12}>\n                          <div className=\"planet_list_view\">\n                            <div className=\"headingStyle\">\n                              <h6>Token</h6>\n                              <h6>APR</h6>\n                              <h6>Total Staked</h6>\n                              <h6 className=\"earnTxt\">Earned</h6>\n                            </div>\n                            {inactiveFarms.map((farm, index) =>\n                              <GalaxyCard\n                                key={index}\n                                index={index}\n                                harvestOnClick={harvest}\n                                currentIndex={currentIndex}\n                                handleChange={() => handleIndex(index)}\n                                stakeHandle={stakeHandle}\n                                handleRoiModal={handleRoiModal}\n                                status={false}\n                                farm={farm}\n                                icon1={NIOB}\n                                icon2={BUSD}\n                                title={`NIOB`}\n                                title1={`BUSD`}\n                              />\n                            )}\n                          </div>\n                        </Col>\n                      </Row>\n                    </div>\n                  </Tab>\n\n                </Tabs>\n              </div>\n            </div>\n          </div>\n        </Container>\n      </div>\n      <GetLPToken stakeValue={stakeValue} stakeData={stakeData} stakeConfirmation={stakeConfirmation} handleStakeValue={handleStakeValue} depositWithdraw={depositWithdraw} setMaxValue={setMaxValue} show={showStake} closeStakeModal={handleClose} />\n      <WithDrawLPToken stakeValue={stakeValue} stakeData={stakeData} stakeConfirmation={stakeConfirmation} handleStakeValue={handleStakeValue} depositWithdraw={depositWithdraw} setMaxValue={setMaxValue} show={showStakeWithdraw} closeStakeModal={handleWithdrawClose} address={isUserConnected} isNiobWithdrawabe={true} />\n      <TransactionalModal show={showTransactionModal} handleClose={closeTransactionModal} txHash={txHash} />\n      {showAPY && <ReturnInvest\n        show={showAPY}\n        niobId={niobStats}\n        roiModalData={roiModalData}\n        lpDetails={lpDetails}\n        handleClose={cloaseRoiModal}\n      />}\n    </div>\n  );\n}\n\nexport default PoolGalaxy;\n","/data/nm/SaitaSwap/src/pages/FarmPlanets/FarmPlanets.js",["536","537","538","539","540","541","542","543","544","545","546","547","548","549"],"import Button from \"@restart/ui/esm/Button\";\nimport React, { useEffect, useState } from \"react\";\nimport {\n  Container,\n  Col,\n  Row,\n  Form,\n  InputGroup,\n  FormControl,\n  Table,\n} from \"react-bootstrap\";\nimport {\n  addTransaction,\n  searchTokenByNameOrAddress,\n  startLoading,\n  stopLoading,\n} from \"../../redux/actions\";\nimport { ReferralsServices } from \"../../services/ReferralsServices\";\nimport { FarmService } from \"../../services/FarmService\";\nimport { toast } from \"../../components/Toast/Toast\";\nimport { ContractServices } from \"../../services/ContractServices\";\nimport BigNumber from \"bignumber.js\";\nimport GetLPToken from \"../../components/GetLPToken/GetLPToken\";\n\nimport { Tabs, Tab } from \"react-bootstrap\";\nimport { rootName } from \"../../constant\";\nimport Searchicon from \"../../assets/images/search.png\";\nimport FarmIcon from \"../../assets/images/Farm-Header-Logo.svg\";\nimport \"./FarmPlanets.scss\";\nimport PlanetCard from \"../../components/PlanetCard/PlanetCard\";\nimport NIOB from \"../../assets/images/token_icons/NIOB.svg\";\nimport BUSD from \"../../assets/images/token_icons/BUSD-Token.svg\";\nimport ANCHOR from \"../../assets/images/token_icons/ANCHOR-Token.svg\";\nimport { useDispatch } from \"react-redux\";\nimport { useSelector } from \"react-redux\";\nimport WithDrawLPToken from \"../../components/GetLPToken/WithDrawLPToken\";\nimport TransactionalModal from \"../../components/TransactionalModal/TransactionalModal\";\nimport TransactionModal from \"../../components/TransactionModal/TransactionModal\";\n\nconst FarmPlanets = (props) => {\n  const {\n    match: { params },\n    history,\n  } = props;\n  const { tab } = params;\n  const handleTab = (data) => {\n    history.push(`${rootName}/farmplanets/${data}`);\n  };\n\n  const handleClose = () => {\n    setStakeValue(null);\n    setShowStake(false);\n  };\n  const handleWithdrawClose = () => {\n    setStakeValue(null);\n    setShowStakeWithdraw(false);\n  };\n\n  const dispatch = useDispatch();\n  const isUserConnected = useSelector((state) => state.persist.isUserConnected);\n  const referralAddress = useSelector((state) => state.persist.referralAddress);\n\n  const [checked, setChecked] = useState(false);\n  const [active, setActive] = useState(true);\n  const [currentIndex, setCurrentIndex] = useState(-1);\n  const [showStake, setShowStake] = useState(false);\n  const [showStakeWithdraw, setShowStakeWithdraw] = useState(false);\n  const [showAPY, setShowAPY] = useState(false);\n  const [roiModalData, setRoiModalData] = useState(null);\n\n  const [poolLength, setPoolLength] = useState(0);\n  const [farms, setFarms] = useState([]);\n  const [inactiveFarms, setInactiveFarms] = useState([]);\n  const [stakingOnly, setStakingOnly] = useState([]);\n  const [stakeData, setStakeData] = useState(null);\n  const [stakeValue, setStakeValue] = useState(0);\n  const [referrer, setReferrer] = useState(\n    \"0x0000000000000000000000000000000000000000\"\n  );\n\n  const [stakeConfirmation, setStakeConfimation] = useState(0);\n  const [showTransactionModal, setShowTransactionModal] = useState(false);\n  const [txHash, setTxHash] = useState(\"\");\n  const [lpDetails, setLpTokenDetails] = useState(null);\n  const [selectedPairId, setSelectedPairId] = useState();\n\n  //staking only\n  const handleChange = () => setChecked(!checked);\n\n  const closeTransactionModal = () => {\n    setShowTransactionModal(false);\n    setFarms([]);\n    setInactiveFarms([]);\n    setStakingOnly([]);\n    init();\n    window.location.reload();\n  };\n\n  const cloaseRoiModal = () => {\n    setShowAPY(false);\n  };\n  const handleRoiModal = (data, lpDetails) => {\n    setRoiModalData(data);\n    setLpTokenDetails(lpDetails);\n    setShowAPY(true);\n  };\n\n  const handleIndex = (index) => {\n    if (currentIndex === index) {\n      setCurrentIndex(-1);\n    } else {\n      setCurrentIndex(index);\n    }\n  };\n\n  useEffect(() => {\n    init();\n    return () => {\n      setFarms([]);\n      setInactiveFarms([]);\n    };\n  }, [isUserConnected]);\n\n  const init = async () => {\n    try {\n      dispatch(startLoading());\n      let ref = await ReferralsServices.getReferrer(isUserConnected);\n      if (ref === \"0x0000000000000000000000000000000000000000\") {\n        if (\n          referralAddress &&\n          referralAddress !== \"0x0000000000000000000000000000000000000000\"\n        ) {\n          ref = referralAddress;\n        }\n        setReferrer(ref);\n      }\n      const pL = Number(await FarmService.poolLength());\n      setPoolLength(pL);\n      dispatch(stopLoading());\n      for (let i = 0; i < pL; i++) {\n        const poolInfo = await FarmService.poolInfo(i, \"1\");\n        const userInfo = await FarmService.userInfo(i, isUserConnected);\n        if (poolInfo) {\n          if (Number(poolInfo.allocPoint) === 0) {\n            setInactiveFarms((inactiveFarms) => [\n              ...inactiveFarms,\n              { poolInfo, userInfo, pid: i },\n            ]);\n          } else {\n            if (Number(userInfo.amount) > 0) {\n              // console.log('index', i);\n              setStakingOnly((stakingOnly) => [\n                ...stakingOnly,\n                { poolInfo, userInfo, pid: i },\n              ]);\n            }\n            setFarms((farms) => [...farms, { poolInfo, userInfo, pid: i }]);\n          }\n        }\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  const closeStakeModal = () => {\n    setShowStakeWithdraw(false);\n    setShowStake(false);\n    setStakeData(null);\n    setStakeValue(0);\n  };\n\n  const stakeHandle = (data, type) => {\n    // setSelectedPairId is used for getting the id of the farm that user clicked (and staked) to\n    // change the values of only single farm --will be implemented in future\n    setSelectedPairId(data.pid);\n    if (type === \"withdraw\") {\n      setStakeData(data);\n      setShowStakeWithdraw(true);\n    }\n    if (type === \"deposit\") {\n      setStakeData(data);\n      setShowStake(true);\n    }\n  };\n\n  const handleStakeValue = (e) => {\n    const value = e.target.value;\n    setStakeValue(value);\n  };\n  const setMaxValue = () => setStakeValue(stakeData.balance);\n\n  const harvest = async (pid, lpTokenName) => {\n    const acc = await ContractServices.getDefaultAccount();\n    if (acc && acc.toLowerCase() !== isUserConnected.toLowerCase()) {\n      return toast.error(\"Wallet address doesn`t match!\");\n    }\n\n    if (stakeConfirmation) {\n      return toast.info(\"Transaction is processing!\");\n    }\n    setStakeConfimation(true);\n    const data = {\n      pid: pid.toString(),\n      amount: 0,\n      referrer: referrer,\n      from: isUserConnected,\n    };\n    try {\n      dispatch(startLoading());\n      const result = await FarmService.deposit(data);\n      dispatch(stopLoading());\n      setStakeConfimation(false);\n\n      if (result) {\n        setTxHash(result);\n        setShowTransactionModal(true);\n\n        const data = {\n          message: `Harvest ${lpTokenName}`,\n          tx: result,\n        };\n        dispatch(addTransaction(data));\n      }\n    } catch (err) {\n      console.log(err, \"lp harvest\");\n      dispatch(stopLoading());\n      setStakeConfimation(false);\n\n      const message = await ContractServices.web3ErrorHandle(err);\n      toast.error(message);\n    }\n  };\n\n  // // this function will be used to change the values of single farm that user clicked and staked\n  // const refreshChangedItem = async () => {\n  //   try {\n  //     dispatch(startLoading());\n  //     let ref = await ReferralsServices.getReferrer(isUserConnected);\n  //     if (ref === '0x0000000000000000000000000000000000000000') {\n  //       if (referralAddress && referralAddress !== '0x0000000000000000000000000000000000000000') {\n  //         ref = referralAddress;\n  //       }\n  //       setReferrer(ref);\n  //     }\n  //     const pL = Number(await FarmService.poolLength());\n  //     setPoolLength(pL);\n  //     // let farmsTemp = [];\n  //     dispatch(stopLoading());\n  //     for (let i = 0; i < pL; i++) {\n  //       const poolInfo = await FarmService.poolInfo(i, '1');\n  //       const userInfo = await FarmService.userInfo(i, isUserConnected);\n  //       // console.log(userInfo, '------i------', i);\n  //       if (poolInfo) {\n  //         if (Number(poolInfo.allocPoint) === 0) {\n  //           setInactiveFarms(inactiveFarms => [...inactiveFarms, { poolInfo, userInfo, pid: i }]);\n  //         } else {\n  //           if (Number(userInfo.amount) > 0) {\n  //             console.log('index', i);\n  //           }\n  //           // setStakingOnly(stakingOnly => stakingOnly.pid === selectedPairId ?  { poolInfo, userInfo, pid: i }: stakingOnly);\n  //           // setFarms(farms => [...farms, { poolInfo, userInfo, pid: i }]);\n  //           let newArr = [...farms]; // copying the old farms\n  //           newArr[selectedPairId] = { poolInfo, userInfo, pid: selectedPairId };\n  //           setFarms(newArr);\n  //         }\n  //       }\n  //     }\n  //   } catch (err) {\n  //     console.log(err)\n  //   }\n  // }\n\n  const depositWithdraw = async (type) => {\n    const acc = await ContractServices.getDefaultAccount();\n    if (acc && acc.toLowerCase() !== isUserConnected.toLowerCase()) {\n      return toast.error(\"Wallet address doesn`t match!\");\n    }\n    const value = Number(stakeValue);\n    if (isNaN(value)) {\n      return toast.error(\"Enter vaild amount!\");\n    }\n    if (value <= 0) {\n      return toast.error(\"Enter amount greater than zero!\");\n    }\n    if (value > stakeData.balance) {\n      return toast.error(\"Value is greater than max value!\");\n    }\n    if (!stakeData) {\n      return toast.info(\"Reload page try again!\");\n    }\n    if (stakeConfirmation) {\n      return toast.info(\"Transaction is processing!\");\n    }\n    setStakeConfimation(true);\n    if (type === \"deposit\") {\n      const amount = BigNumber(\n        value * 10 ** stakeData.lpTokenDetails.decimals\n      ).toFixed();\n\n      const data = {\n        pid: stakeData.pid.toString(),\n        amount,\n        referrer: referrer,\n        from: isUserConnected,\n      };\n      // console.log('sending this deposit data' ,data);\n      try {\n        closeStakeModal();\n        dispatch(startLoading());\n        const result = await FarmService.deposit(data);\n        setStakeConfimation(false);\n        dispatch(stopLoading());\n\n        if (result) {\n          setTxHash(result);\n          setShowTransactionModal(true);\n\n          const data = {\n            message: `Deposit ${stakeData.lpTokenDetails.lpTokenName}`,\n            tx: result,\n          };\n          dispatch(addTransaction(data));\n        }\n      } catch (err) {\n        console.log(err, \"lp deposit\");\n        dispatch(stopLoading());\n        setStakeConfimation(false);\n\n        const message = await ContractServices.web3ErrorHandle(err);\n        toast.error(message);\n      }\n    }\n    if (type === \"withdraw\") {\n      const amount = BigNumber(\n        value * 10 ** stakeData.lpTokenDetails.decimals\n      ).toFixed();\n      const data = {\n        pid: stakeData.pid.toString(),\n        amount,\n        from: isUserConnected,\n      };\n      // console.log('sending this withdraw data' , data);\n      try {\n        closeStakeModal();\n        dispatch(startLoading());\n        const result = await FarmService.withdraw(data);\n        dispatch(stopLoading());\n        setStakeConfimation(false);\n\n        if (result) {\n          setTxHash(result);\n          setShowTransactionModal(true);\n\n          const data = {\n            message: `Withdraw ${stakeData.lpTokenDetails.lpTokenName}`,\n            tx: result,\n          };\n          dispatch(addTransaction(data));\n        }\n      } catch (err) {\n        console.log(err, \"lp withdraw\");\n        dispatch(stopLoading());\n        setStakeConfimation(false);\n\n        const message = await ContractServices.web3ErrorHandle(err);\n        toast.error(message);\n      }\n    }\n  };\n\n  return (\n    <div className=\"container_wrap farmpln frm_plnet_disply\">\n      <div className=\"upperBox\">\n        <Container>\n          <div className=\"upper_text\">\n            <Row>\n              <Col xl={6} className=\"pl-0\">\n                <div className=\"farm_title\">\n                  <div className=\"farm_icon\">\n                    <img src={FarmIcon} />\n                  </div>\n                  <div className=\"desc\">\n                    <h1 className=\"title_hd\">Farm Planets</h1>\n                    <p>\n                      There is so much to explore! SaitaSwap offers multiple\n                      farming oppurtunities to you. Get amazing rewards by staking\n                      your LP tokens in return for additional SAITAMA Tokens.\n                    </p>\n                  </div>\n                </div>\n              </Col>\n            </Row>\n          </div>\n        </Container>\n      </div>\n      <div className=\"farm_srchbar\">\n        <Container>\n          <div className=\"contain_area\">\n            <Form className=\"srchbar_area\">\n              <div className=\"serch_field\">\n                <Form.Label>Search</Form.Label>\n                <InputGroup>\n                  <FormControl id=\"search\" placeholder=\"Saitama\" />\n                  <Button className=\"search_btn\">\n                    <img src={Searchicon} />\n                  </Button>\n                </InputGroup>\n              </div>\n              <div className=\"staked_only\">\n                <Form.Check\n                  type=\"checkbox\"\n                  id=\"stakecheck\"\n                  label=\"Staked only\"\n                  checked={checked}\n                  onChange={handleChange}\n                />\n                <Button className=\"btn harvest_btn\">Harvest all</Button>\n              </div>\n            </Form>\n            <div className=\"frm_plnet_list\">\n              <div className=\"farm_tabs\">\n                <Tabs\n                  activeKey={tab}\n                  id=\"frmplanet_tab\"\n                  variant=\"pills\"\n                  onSelect={handleTab}\n                >\n                  <Tab eventKey=\"active\" title=\"Active\">\n                    <div className=\"planet_list active\">\n                      <Row>\n                        <Col xl={12}>\n                          {checked && (\n                            <div className=\"planet_list_view\">\n                              <Table responsive>\n                                <tbody>\n                                  {stakingOnly.map((farm, index) => (\n                                    <PlanetCard\n                                      key={index}\n                                      index={index}\n                                      harvestOnClick={harvest}\n                                      currentIndex={currentIndex}\n                                      handleChange={() => handleIndex(index)}\n                                      stakeHandle={stakeHandle}\n                                      handleRoiModal={handleRoiModal}\n                                      status={true}\n                                      farm={farm}\n                                      icon1={NIOB}\n                                      icon2={BUSD}\n                                      title={`NIOB`}\n                                      title1={`BUSD`}\n                                    />\n                                  ))}\n                                </tbody>\n                              </Table>\n                            </div>\n                          )}\n\n                          {!checked && (\n                            <div className=\"planet_list_view\">\n                              <Table responsive>\n                                <tbody>\n                                  {farms.map((farm, index) => (\n                                    <PlanetCard\n                                      key={index}\n                                      index={index}\n                                      harvestOnClick={harvest}\n                                      currentIndex={currentIndex}\n                                      handleChange={() => handleIndex(index)}\n                                      stakeHandle={stakeHandle}\n                                      handleRoiModal={handleRoiModal}\n                                      status={true}\n                                      farm={farm}\n                                      icon1={NIOB}\n                                      icon2={BUSD}\n                                      title={`NIOB`}\n                                      title1={`BUSD`}\n                                    />\n                                  ))}\n                                </tbody>\n                              </Table>\n                            </div>\n                          )}\n\n                        </Col>\n                      </Row>\n                    </div>\n                  </Tab>\n\n                  <Tab eventKey=\"inactive\" title=\"Inactive\">\n                    <div className=\"planet_list active\">\n                      <Row>\n                        <Col xl={12}>\n                          <div className=\"planet_list_view\">\n                            {inactiveFarms.map((farm, index) => (\n                              <PlanetCard\n                                key={index}\n                                index={index}\n                                harvestOnClick={harvest}\n                                currentIndex={currentIndex}\n                                handleChange={() => handleIndex(index)}\n                                stakeHandle={stakeHandle}\n                                handleRoiModal={handleRoiModal}\n                                status={true}\n                                farm={farm}\n                                icon1={NIOB}\n                                icon2={BUSD}\n                                title={`NIOB`}\n                                title1={`BUSD`}\n                              />\n                            ))}\n                          </div>\n                        </Col>\n                      </Row>\n                    </div>\n                  </Tab>\n                </Tabs>\n              </div>\n            </div>\n          </div>\n        </Container>\n      </div>\n      <GetLPToken\n        stakeValue={stakeValue}\n        stakeData={stakeData}\n        stakeConfirmation={stakeConfirmation}\n        handleStakeValue={handleStakeValue}\n        depositWithdraw={depositWithdraw}\n        setMaxValue={setMaxValue}\n        show={showStake}\n        closeStakeModal={handleClose}\n      />\n      <WithDrawLPToken\n        stakeValue={stakeValue}\n        stakeData={stakeData}\n        stakeConfirmation={stakeConfirmation}\n        handleStakeValue={handleStakeValue}\n        depositWithdraw={depositWithdraw}\n        setMaxValue={setMaxValue}\n        show={showStakeWithdraw}\n        closeStakeModal={handleWithdrawClose}\n        isNiobWithdrawabe={false}\n      />\n      <TransactionalModal\n        show={showTransactionModal}\n        handleClose={closeTransactionModal}\n        txHash={txHash}\n      />\n    </div>\n  );\n};\n\nexport default FarmPlanets;\n","/data/nm/SaitaSwap/src/redux/actions/index.js",[],"/data/nm/SaitaSwap/src/redux/actions/LoadingActions.js",[],"/data/nm/SaitaSwap/src/redux/actions/PersistActions.js",["550"],"import packageJson from \"../../../package.json\";\nimport { ContractServices } from \"../../services/ContractServices\";\n\n/** seting action types */\nexport const actionTypes = {\n  USER_CONNECTED: \"USER_CONNECTED\",\n  LOGOUT: \"LOGOUT\",\n  TOKEN_LIST_ADD: \"TOKEN_LIST_ADD\",\n  TOKEN_LIST_DEL: \"TOKEN_LIST_DEL\",\n  SAVE_SLIPPAGE_PERCENTAGE: \"SAVE_SLIPPAGE_PERCENTAGE\",\n  SAVE_DEADLINE: \"SAVE_DEADLINE\",\n  LOGIN_USER_SUCCESS: \"LOGIN_USER_SUCCESS\",\n  SAVE_USER_LP_TOKENS: \"SAVE_USER_LP_TOKENS\",\n  SAVE_USER_RECENT_TRANSACTIONS: \"SAVE_USER_RECENT_TRANSACTIONS\",\n  SAVE_REFFRAL_ADDRESS: \"SAVE_REFFRAL_ADDRESS\",\n  CHECK_USER_LPTOKENS: \"CHECK_USER_LPTOKENS\",\n  LOGIN_CONFIRMATION_SREEN: \"LOGIN_CONFIRMATION_SREEN\",\n  LOGOUT_CONFIRMATION_SREEN: \"LOGOUT_CONFIRMATION_SREEN\",\n  SAVE_FOOTER_DATA: \"SAVE_FOOTER_DATA\",\n};\n\nexport const versionManager = () => async (dispatch, getState) => {\n  try {\n    const version = packageJson.version;\n    const react_version = localStorage.getItem(\"react_version\");\n    if (react_version && version !== react_version) {\n      localStorage.clear();\n      window.location.reload();\n    }\n    if (!react_version) {\n      localStorage.setItem(\"react_version\", version);\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n/*\n * Action creators\n */\nexport const login = (data) => {\n  return {\n    type: actionTypes.USER_CONNECTED,\n    payload: data,\n  };\n};\nexport const logout = () => {\n  ContractServices.setWalletType(\"Metamask\");\n  localStorage.removeItem(\"persist:root, walletconnect\");\n  window.location.reload();\n  return {\n    type: actionTypes.LOGOUT,\n  };\n};\n\nexport const tokenListAdd = (data) => {\n  return {\n    type: actionTypes.TOKEN_LIST_ADD,\n    payload: data,\n  };\n};\nexport const tokenListDel = (data) => {\n  return {\n    type: actionTypes.TOKEN_LIST_DEL,\n    payload: data,\n  };\n};\nexport const saveSlippagePercentage = (data) => {\n  return {\n    type: actionTypes.SAVE_SLIPPAGE_PERCENTAGE,\n    payload: data,\n  };\n};\nexport const saveDeadline = (data) => {\n  return {\n    type: actionTypes.SAVE_DEADLINE,\n    payload: data,\n  };\n};\nexport const saveUser = (data) => {\n  return {\n    type: actionTypes.LOGIN_USER_SUCCESS,\n    payload: data,\n  };\n};\nexport const saveUserLpTokens = (data) => {\n  return {\n    type: actionTypes.SAVE_USER_LP_TOKENS,\n    payload: data,\n  };\n};\nexport const checkUserLpTokens = (payload) => {\n  return {\n    type: actionTypes.CHECK_USER_LPTOKENS,\n    payload,\n  };\n};\n\nexport const savereffralAddress = (address) => {\n  return {\n    type: actionTypes.SAVE_REFFRAL_ADDRESS,\n    payload: address,\n  };\n};\n\nexport const addTransaction = (data) => async (dispatch, getState) => {\n  let {\n    persist: { recentTransactions },\n  } = getState();\n  recentTransactions.unshift(data);\n  dispatch({\n    type: actionTypes.SAVE_USER_RECENT_TRANSACTIONS,\n    payload: { recentTransactions },\n  });\n};\n\nexport const removeTokenList = (data) => async (dispatch, getState) => {\n  let {\n    persist: { tokenList },\n  } = getState();\n  const findIndex = tokenList.findIndex(\n    (a) => a.address.toLowerCase() === data.address.toLowerCase()\n  );\n  const tkList = tokenList.splice(findIndex, 1);\n  // console.log(tkList);\n};\n\nexport const loginConfirmationScreen = (data) => {\n  return {\n    type: actionTypes.LOGIN_CONFIRMATION_SREEN,\n  };\n};\n\nexport const logoutConfirmationScreen = (data) => {\n  return {\n    type: actionTypes.LOGOUT_CONFIRMATION_SREEN,\n  };\n};\n\nexport const saveFotterValues = (data) => async (dispatch, getState) => {\n  dispatch({\n    type: actionTypes.SAVE_FOOTER_DATA,\n    payload: data,\n  });\n};\n","/data/nm/SaitaSwap/src/services/UserService.js",[],"/data/nm/SaitaSwap/src/services/ContractServices.js",["551","552","553","554","555","556"],"import Web3 from \"web3\";\nimport TOKEN_ABI from \"../assets/ABI/tokenContract.ABI.json\";\nimport { toast } from \"../components/Toast/Toast\";\nimport {\n  NETWORK_CHAIN_ID,\n  NETWORK_CHAIN_NAME,\n  NETWORK_LINK,\n  NETWORK_NATIVE_CURRENCY_DECIMALS,\n  NETWORK_NATIVE_CURRENCY_NAME,\n  NETWORK_NATIVE_CURRENCY_SYMBOL,\n  NETWORK_RPC_URL,\n} from \"../constant\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\n\nlet web3Object;\nlet contractOjbect;\nlet currentContractAddress;\nlet tokenContractObject;\nlet currentTokenAddress;\nlet walletTypeObject = \"Metamask\";\nlet walletConnectProvider;\n\nconst callWeb3ForWalletConnect = async (provider) => {\n  provider = new WalletConnectProvider({\n    rpc: {\n      // 97: \"https://data-seed-prebsc-2-s3.binance.org:8545/\",\n      // 56: \"https://bsc-dataseed.binance.org/\",\n      4: \"https://rinkeby.infura.io/v3/1eef3e361aac42f79167464a2e0d6564\",\n    },\n    chainId: 4,\n    network: \"rinkeby\",\n    qrcode: true,\n    qrcodeModalOptions: {\n      mobileLinks: [\"metamask\"],\n      desktopLinks: [\"encrypted ink\"],\n    },\n  });\n  provider.on(\"accountsChanged\", (accounts) => {\n    console.log(accounts);\n  });\n\n  provider.on(\"chainChanged\", (chainId) => {\n    console.log(chainId);\n  });\n\n  provider.on(\"disconnect\", (code, reason) => {\n    console.log(code, reason);\n  });\n\n  const results = await provider.enable();\n  console.log(\"results:\", results);\n  web3Object = new Web3(provider);\n  // const contract = new web3Object.eth.Contract(\n  //   TOKEN_ABI,\n  //   \"0xaC0DBd7a6f4D50B51aca4e8D363875922CBBE29C\"\n  // );\n  // const txHash = await contract.methods\n  //   .approve(provider.accounts[0], \"1000000000000000000000\")\n  //   .send({\n  //     from: provider.accounts[0],\n  //   });\n  // const txHash = await web3Object.eth.sendTransaction({\n  //   from: provider.accounts[0],\n  //   data: web3Object.eth.abi.encodeFunctionCall(\n  //     TOKEN_ABI.filter((o) => o.type === \"function\" && o.name === \"approve\")[0],\n  //     [provider.accounts[0], \"1000000000000000000000\"]\n  //   ),\n  // });\n  // console.log(\"got an web3 instance and called approve:\", txHash);\n  return { provider, web3: web3Object };\n};\n\n//only for lp tokens\nconst convertToDecimals = async (value) => {\n  const decimals = 18;\n  return Number(value) / 10 ** decimals;\n};\n\nconst isMetamaskInstalled = async (type) => {\n  //Have to check the ethereum binding on the window object to see if it's installed\n  const { ethereum, web3 } = window;\n  const result = Boolean(ethereum && ethereum.isMetaMask);\n  walletTypeObject = \"Metamask\";\n  if (result) {\n    //metamask\n    try {\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n      return accounts[0];\n    } catch (err) {\n      toast.error(err.message);\n      return false;\n    }\n  } else if (ethereum) {\n    //trust wallet\n    try {\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n      return accounts[0];\n    } catch (err) {\n      toast.error(err.message);\n      return false;\n    }\n  } else if (web3) {\n    //trustwallet\n    const accounts = await web3.eth.getAccounts();\n    return accounts[0];\n  } else {\n    if (type) {\n      toast.error(`Install ${type} extension first!`);\n    }\n    return false;\n  }\n};\n\nconst isBinanceChainInstalled = async () => {\n  //Have to check the ethereum binding on the window object to see if it's installed\n  const { BinanceChain } = window;\n  if (BinanceChain) {\n    walletTypeObject = \"BinanceChain\";\n    try {\n      const accounts = await BinanceChain.request({\n        method: \"eth_requestAccounts\",\n      });\n      return accounts[0];\n    } catch (err) {\n      toast.error(err.message);\n      return false;\n    }\n  } else {\n    toast.error(\"Install BinanceChain extension first!\");\n    return false;\n  }\n};\n\nconst walletWindowListener = async () => {\n  const { BinanceChain, ethereum } = window;\n  if (walletTypeObject === \"Metamask\") {\n    const result = Boolean(ethereum && ethereum.isMetaMask);\n    if (result) {\n      if (ethereum.chainId !== NETWORK_CHAIN_ID) {\n        try {\n          const chain = await ethereum.request({\n            method: \"wallet_switchEthereumChain\",\n            params: [{ chainId: NETWORK_CHAIN_ID }],\n          });\n        } catch (error) {\n          console.log(\"metamask error\", error);\n          if (error?.code === 4902) {\n            try {\n              const addChain = await ethereum.request({\n                method: \"wallet_addEthereumChain\",\n                params: [\n                  {\n                    chainId: NETWORK_CHAIN_ID,\n                    chainName: NETWORK_CHAIN_NAME,\n                    nativeCurrency: {\n                      name: NETWORK_NATIVE_CURRENCY_NAME,\n                      symbol: NETWORK_NATIVE_CURRENCY_SYMBOL,\n                      decimals: Number(NETWORK_NATIVE_CURRENCY_DECIMALS),\n                    },\n                    rpcUrls: [NETWORK_RPC_URL],\n                    blockExplorerUrls: [NETWORK_LINK],\n                  },\n                ],\n              });\n              window.location.reload();\n            } catch (error) {}\n          }\n        }\n      }\n\n      ethereum.on(\"chainChanged\", async (chainId) => {\n        if (chainId !== NETWORK_CHAIN_ID) {\n          // toast.error('Select Binance Smart Chain Mainnet Network in wallet!')\n          try {\n            const chain = await ethereum.request({\n              method: \"wallet_switchEthereumChain\",\n              params: [{ chainId: NETWORK_CHAIN_ID }],\n            });\n          } catch (error) {\n            console.log(\"metamask error\", error);\n            if (error?.code === 4902) {\n              try {\n                const addChain = await ethereum.request({\n                  method: \"wallet_addEthereumChain\",\n                  params: [\n                    {\n                      chainId: await window.ethereum.chainId,\n                      chainName: NETWORK_CHAIN_NAME,\n                      nativeCurrency: {\n                        name: NETWORK_NATIVE_CURRENCY_NAME,\n                        symbol: NETWORK_NATIVE_CURRENCY_SYMBOL,\n                        decimals: Number(NETWORK_NATIVE_CURRENCY_DECIMALS),\n                      },\n                      rpcUrls: [NETWORK_RPC_URL],\n                      blockExplorerUrls: [NETWORK_LINK],\n                    },\n                  ],\n                });\n              } catch (error) {}\n            }\n          }\n        }\n      });\n    }\n  }\n  if (walletTypeObject === \"BinanceChain\") {\n    if (BinanceChain) {\n      BinanceChain.on(\"chainChanged\", async (chainId) => {\n        if (chainId !== NETWORK_CHAIN_ID) {\n          // toast.error('Select Binance Smart Chain Mainnet Network in wallet!')\n          try {\n            const chain = await BinanceChain.request({\n              method: \"wallet_switchEthereumChain\",\n              params: [{ chainId: NETWORK_CHAIN_ID }],\n            });\n          } catch (error) {\n            console.log(\"binance error\", error);\n          }\n        }\n      });\n    }\n  }\n};\n\nconst callWeb3 = async () => {\n  if (web3Object) {\n    console.log(\"we already have web3Object\", web3Object);\n    return web3Object;\n  }\n  console.log(\"web3Objectweb3Object\", web3Object);\n  const { ethereum, web3, BinanceChain } = window;\n  if (walletTypeObject === \"Metamask\") {\n    if (ethereum && ethereum.isMetaMask) {\n      web3Object = new Web3(ethereum);\n      return web3Object;\n    } else if (ethereum) {\n      web3Object = new Web3(ethereum);\n      return web3Object;\n    } else if (web3) {\n      web3Object = new Web3(web3.currentProvider);\n      return web3Object;\n    } else {\n      toast.error(\"You have to install Wallet!\");\n    }\n  } else {\n    if (BinanceChain) {\n      web3Object = new Web3(BinanceChain);\n      return web3Object;\n    } else {\n      toast.error(\"You have to install Wallet!\");\n    }\n  }\n};\n\nconst callContract = async (contractAddress, contractABI) => {\n  if (\n    contractOjbect &&\n    currentContractAddress &&\n    currentContractAddress.toLowerCase() === contractAddress.toLowerCase()\n  ) {\n    return contractOjbect;\n  }\n  const web3Object = await callWeb3();\n  currentContractAddress = contractAddress;\n  contractOjbect = new web3Object.eth.Contract(contractABI, contractAddress);\n  return contractOjbect;\n};\nconst callTokenContract = async (tokenAddress) => {\n  if (\n    tokenContractObject &&\n    currentContractAddress &&\n    currentTokenAddress.toLowerCase() === tokenAddress.toLowerCase()\n  ) {\n    return tokenContractObject;\n  }\n  const web3Object = await callWeb3();\n  currentTokenAddress = tokenAddress;\n  tokenContractObject = new web3Object.eth.Contract(\n    TOKEN_ABI,\n    currentTokenAddress\n  );\n  return tokenContractObject;\n};\n\nconst calculateGasPrice = async () => {\n  const web3 = await callWeb3();\n  return await web3.eth.getGasPrice();\n};\n\nconst getDefaultAccount = async () => {\n  const web3 = await callWeb3();\n  const accounts = await web3.eth.getAccounts();\n  console.log(\"accounts sss\", accounts);\n  return accounts[0];\n};\n\nconst approveToken = async (\n  address,\n  value,\n  mainContractAddress,\n  tokenAddress\n) => {\n  try {\n    const gasPrice = await calculateGasPrice();\n    const contract = await callTokenContract(tokenAddress);\n    //calculate estimate gas limit\n    const gas = await contract.methods\n      .approve(mainContractAddress, value)\n      .estimateGas({ from: address });\n\n    return await contract.methods\n      .approve(mainContractAddress, value)\n      .send({ from: address, gasPrice, gas });\n  } catch (error) {\n    return error;\n  }\n};\n\nconst allowanceToken = async (tokenAddress, mainContractAddress, address) => {\n  try {\n    const contract = await callTokenContract(tokenAddress);\n    return await contract.methods\n      .allowance(address, mainContractAddress)\n      .call();\n  } catch (error) {\n    return error;\n  }\n};\n\nconst getTokenBalance = async (tokenAddress, address) => {\n  try {\n    const contract = await callTokenContract(tokenAddress);\n    const decimals = await contract.methods.decimals().call();\n    let result = await contract.methods.balanceOf(address).call();\n    result = (Number(result) / 10 ** decimals).toFixed(5);\n    console.log(result);\n    return Number(result);\n  } catch (error) {\n    console.log(\"Error:\", error);\n    return error;\n  }\n};\nconst getTokenBalanceFull = async (tokenAddress, address) => {\n  try {\n    const contract = await callTokenContract(tokenAddress);\n    const decimals = await contract.methods.decimals().call();\n\n    let result = await contract.methods.balanceOf(address).call();\n    result = result / 10 ** decimals;\n\n    return result;\n  } catch (error) {\n    console.log(\"Error:\", error);\n    return error;\n  }\n};\n\nconst getDecimals = async (tokenAddress) => {\n  try {\n    const contract = await callTokenContract(tokenAddress);\n    return await contract.methods.decimals().call();\n  } catch (error) {\n    return error;\n  }\n};\n\nconst getTokenName = async (tokenAddress) => {\n  try {\n    const contract = await callTokenContract(tokenAddress);\n    return await contract.methods.name().call();\n  } catch (error) {\n    return error;\n  }\n};\n\nconst getTokenSymbol = async (tokenAddress) => {\n  try {\n    const contract = await callTokenContract(tokenAddress);\n    return await contract.methods.symbol().call();\n  } catch (error) {\n    return error;\n  }\n};\n\nconst getBNBBalance = async (address) => {\n  try {\n    const web3 = await callWeb3();\n    let result = await web3.eth.getBalance(address);\n    result = (Number(result) / 10 ** 18).toFixed(5);\n    return Number(result);\n  } catch (error) {\n    return error;\n  }\n};\n\nconst setWalletType = async (walletType) => {\n  walletTypeObject = walletType;\n};\n\nconst getTotalSupply = async (tokenAddress) => {\n  try {\n    const contract = await callTokenContract(tokenAddress);\n    let result = await contract.methods.totalSupply().call();\n    const decimals = await contract.methods.decimals().call();\n    result = Number(result) / 10 ** Number(decimals);\n    return result;\n  } catch (error) {\n    return error;\n  }\n};\n\nconst web3ErrorHandle = async (err) => {\n  let message = \"Transaction Reverted!\";\n  if (err.message.indexOf(\"Rejected\") > -1) {\n    message = \"User denied the transaction!\";\n  } else if (err.message && err.message.indexOf(\"User denied\") > -1) {\n    message = \"User denied the tra nsaction!\";\n  } else if (err.message && err.message.indexOf(\"INSUFFICIENT_B\") > -1) {\n    message = \"Insufficient value of second token!\";\n  } else if (err.message && err.message.indexOf(\"INSUFFICIENT_A\") > -1) {\n    message = \"Insufficient value of first token!\";\n  } else {\n    console.log(err, err.message);\n  }\n  return message;\n};\n\nconst getLiquidity100Value = async (tokenAddress, address) => {\n  try {\n    const contract = await callTokenContract(tokenAddress);\n\n    return await contract.methods.balanceOf(address).call();\n  } catch (error) {\n    console.log(\"Error:\", error);\n    return error;\n  }\n};\n\n//exporting functions\nexport const ContractServices = {\n  isMetamaskInstalled,\n  isBinanceChainInstalled,\n  callWeb3,\n  callContract,\n  calculateGasPrice,\n  approveToken,\n  getTokenBalance,\n  getTokenBalanceFull,\n  getDecimals,\n  getTokenName,\n  getTokenSymbol,\n  getBNBBalance,\n  setWalletType,\n  allowanceToken,\n  getTotalSupply,\n  convertToDecimals,\n  web3ErrorHandle,\n  getDefaultAccount,\n  callTokenContract,\n  walletWindowListener,\n  walletTypeObject,\n  getLiquidity100Value,\n  callWeb3ForWalletConnect,\n};\n","/data/nm/SaitaSwap/src/services/ExchangeService.js",["557","558","559","560","561"],"/data/nm/SaitaSwap/src/components/ProfileModal/ProfileModal.js",["562"],"import React from \"react\";\nimport { Col, Row, Modal } from \"react-bootstrap\";\nimport CopyIcon from \"../../assets/images/copy.png\";\nimport \"./ProfileModal.scss\";\nimport { useSelector } from \"react-redux\";\nimport { BSC_SCAN } from \"../../constant\";\nimport { toast } from \"../Toast/Toast\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport TolerenceIcon from \"../../assets/images/tolerence.png\";\nimport Button from \"../Button/Button\";\n\nconst ProfileModal = ({ show, handleClose, logout }) => {\n  const isUserConnected = useSelector((state) => state.persist.isUserConnected);\n\n  return (\n    <Modal\n      centered\n      scrollable={true}\n      className=\"connect_wallet\"\n      show={show}\n      onHide={handleClose}\n    >\n      <Modal.Header closeButton>\n        <Modal.Title>Your Wallet</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Row>\n          <Col className=\"baseToken_style\">\n            <div className=\"profileModal_sec\">\n              <p>{isUserConnected}</p>\n              <div className=\"copySec\">\n                <a\n                  href={`${BSC_SCAN}/address/${isUserConnected}`}\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                >\n                  View on EtherScan\n                  <img src={TolerenceIcon} />\n                </a>\n                <div className=\"ms-3\">\n                  <span>Copy</span>&nbsp;\n                  <CopyToClipboard\n                    text={`${BSC_SCAN}/address/${isUserConnected}`}\n                    onCopy={() => toast.success(\"Copied!\")}\n                  >\n                    <img className=\"copy-icon\" alt=\"copy\" src={CopyIcon} />\n                  </CopyToClipboard>\n                </div>\n              </div>\n              <div className=\"text-center\">\n                <Button\n                  className=\"logout_btn mx-auto\"\n                  onClick={logout}\n                  title=\"Logout\"\n                />\n              </div>\n            </div>\n          </Col>\n        </Row>\n      </Modal.Body>\n    </Modal>\n  );\n};\n\nexport default ProfileModal;\n","/data/nm/SaitaSwap/src/components/Button/Button.js",["563"],"import \"./Button.scss\";\n\nconst Button = (props) => {\n  return (\n    <button\n      onClick={props.onClick}\n      title={props.title}\n      className={`btn buttonStyle ${props.className}`}\n      disabled={props.disabled}\n    >\n      {props.title} {props.icon ? <img src={props.icon} /> : \"\" } \n    </button>\n  );\n};\n\nexport default Button;\n","/data/nm/SaitaSwap/src/components/ConnectWallet/ConnectWallet.js",["564","565","566","567","568","569","570","571","572"],"import React, { useEffect } from \"react\";\nimport { Col, Row, Modal, Button } from \"react-bootstrap\";\nimport \"./ConnectWallet.scss\";\nimport { useDispatch } from \"react-redux\";\nimport { ContractServices } from \"../../services/ContractServices\";\nimport { login } from \"../../redux/actions\";\nimport { toast } from \"../../components/Toast/Toast\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\n\nimport iconMatamask from \"../../assets/images/metamask_icon.png\";\nimport iconCoinbase from \"../../assets/images/coinbase_icon.svg\";\nimport iconWallet from \"../../assets/images/wallet_icon.svg\";\nimport TokenPocket from \"../../assets/images/tp.png\";\nimport TrustWallet from \"../../assets/images/trust-wallet.png\";\nimport Binance from \"../../assets/images/Binance-chain.png\";\nimport MathWallet from \"../../assets/images/mathwallet.png\";\n\nconst ConnectWallet = ({ show, handleClose }) => {\n  const dispatch = useDispatch();\n\n  const loginCall = async (walletType, type) => {\n    try {\n      if (walletType === \"BinanceChain\") {\n        const account = await ContractServices.isBinanceChainInstalled();\n        if (account) {\n          dispatch(login({ account, walletType }));\n          handleClose(false);\n          window.location.reload();\n        }\n      } else if (walletType === \"Walletconnect\") {\n        try {\n          const d = await ContractServices.callWeb3ForWalletConnect();\n          const account = d.provider.accounts[0];\n          console.log(\"in connect wallet\", account, d);\n          d.provider.on(\"connect\", (_) =>\n            console.log(\"congrats u r connected..\")\n          );\n          d.provider.on(\"accountsChanged\", async (accounts) => {\n            console.log(\"account changed on remote\");\n            setTimeout(function () {\n              window.location.reload();\n            }, 500);\n            let account = accounts[0];\n            console.log(\"in connect wallet1\", account);\n            dispatch(login({ account, walletType }));\n            handleClose(false);\n            //return;\n            // window.location.reload();\n          });\n          dispatch(login({ account, walletType }));\n          handleClose(false);\n          //  window.location.reload();\n        } catch (error) {\n          console.log(error, \"wallet error\");\n        }\n      } else {\n        const account = await ContractServices.isMetamaskInstalled(type);\n        if (account) {\n          dispatch(login({ account, walletType }));\n          handleClose(false);\n          // window.location.reload();\n        }\n      }\n    } catch (err) {\n      toast.error(err.message);\n    }\n  };\n  useEffect(() => {\n    (async () => {\n      if (localStorage.getItem(\"walletconnect\"))\n        loginCall(\"Walletconnect\", \"Walletconnect\");\n    })();\n  }, []);\n\n  return (\n    <Modal\n      centered\n      scrollable={true}\n      className=\"connect_wallet\"\n      show={show}\n      onHide={handleClose}\n    >\n      <Modal.Header closeButton>\n        <Modal.Title>Connect to a wallet</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Row>\n          <Col className=\"baseToken_style token_strut\">\n            <ul>\n              <li>\n                <Button onClick={() => loginCall(\"Metamask\", \"Metamask\")}>\n                  MetaMask\n                  <span>\n                    <img src={iconMatamask} />\n                  </span>{\" \"}\n                </Button>\n              </li>\n              {/* <li>\n                <Button>\n                  CoinBase Wallet\n                  <span>\n                    <img src={iconCoinbase} />\n                  </span>{\" \"}\n                </Button>\n              </li> */}\n              <li>\n                <Button\n                  onClick={() => loginCall(\"Walletconnect\", \"Walletconnect\")}\n                >\n                  WalletConnect\n                  <span>\n                    <img src={iconWallet} />\n                  </span>{\" \"}\n                </Button>\n              </li>\n\n              {/* <li>\n                <Button>\n                  TrustWallet\n                  <span>\n                    <img src={TrustWallet} />\n                  </span>{\" \"}\n                </Button>\n              </li>\n              <li>\n                <Button>\n                  MathWallet\n                  <span>\n                    <img src={MathWallet} />\n                  </span>{\" \"}\n                </Button>\n              </li>\n              <li>\n                <Button>\n                  TokenPocket\n                  <span>\n                    <img src={TokenPocket} />\n                  </span>{\" \"}\n                </Button>\n              </li>\n              <li>\n                <Button>\n                  Binance Chain Wallet\n                  <span>\n                    <img src={Binance} />\n                  </span>{\" \"}\n                </Button>\n              </li> */}\n            </ul>\n          </Col>\n        </Row>\n      </Modal.Body>\n    </Modal>\n  );\n};\n\nexport default ConnectWallet;\n","/data/nm/SaitaSwap/src/services/ReferralsServices.js",[],"/data/nm/SaitaSwap/src/hooks/getWindowDimensions.js",[],"/data/nm/SaitaSwap/src/components/ScrollTop/ScrollTop.js",["573"],"import React, { Component } from \"react\";\nimport ScrollUp from \"../../assets/images/scroll-up-icon.svg\";\n\nexport default class ScrollTop extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      is_visible: false\n    };\n  }\n\n  componentDidMount() {\n    var scrollComponent = this;\n    document.addEventListener(\"scroll\", function(e) {\n      scrollComponent.toggleVisibility();\n    });\n  }\n\n  toggleVisibility() {\n    if (window.pageYOffset > 100) {\n      this.setState({\n        is_visible: true\n      });\n    } else {\n      this.setState({\n        is_visible: false\n      });\n    }\n  }\n\n  scrollToTop() {\n    window.scrollTo({\n      top: 0,\n      behavior: \"smooth\"\n    });\n  }\n\n  render() {\n    const { is_visible } = this.state;\n    return (\n      <div className=\"scroll_top\">\n        <div onClick={() => this.scrollToTop()}>\n              <img src={ScrollUp} alt={\"icon\"} />\n          </div>\n      </div>\n    );\n  }\n}\n","/data/nm/SaitaSwap/src/services/FarmService.js",["574"],"/data/nm/SaitaSwap/src/components/Toast/Toast.js",[],"/data/nm/SaitaSwap/src/components/TransactionalModal/TransactionalModal.js",["575","576"],"import React from \"react\";\nimport { Col, Row, Modal, Button } from \"react-bootstrap\";\nimport \"./TransactionalModal.scss\";\nimport { useSelector } from \"react-redux\";\nimport { BSC_SCAN } from \"../../constant\";\nimport checkicon from \"../../assets/images/check_icon.svg\";\n\nconst TransactionalModal = ({ show, handleClose, txHash }) => {\n  const recentTransactions = useSelector(\n    (state) => state.persist.recentTransactions\n  );\n\n  return (\n    <Modal\n      centered\n      scrollable={true}\n      className=\"connect_wallet\"\n      show={show}\n      onHide={handleClose}\n    >\n      <Modal.Header closeButton>\n        <Modal.Title>Transaction Submitted</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Row>\n          <Col className=\"baseToken_style\">\n            <img src={checkicon} alt=\"icon\" width=\"85\" className=\"icon_color\" />\n            <a\n              href={`${BSC_SCAN}/tx/${txHash}`}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              View on EtherScan\n            </a>\n            <div className=\"no_record\">\n              <button\n                type=\"button\"\n                className=\"btn buttonStyle full\"\n                onClick={handleClose}\n              >\n                Close\n              </button>\n            </div>\n          </Col>\n        </Row>\n      </Modal.Body>\n    </Modal>\n  );\n};\n\nexport default TransactionalModal;\n","/data/nm/SaitaSwap/src/components/TransactionModal/TransactionModal.js",[],"/data/nm/SaitaSwap/src/components/GetLPToken/WithDrawLPToken.js",["577","578","579"],"import React, { useEffect, useState } from 'react'\nimport { Col, Row, Modal, Button, Form, InputGroup, FormControl } from 'react-bootstrap'\nimport './GetLPToken.scss'\nimport { FarmService } from '../../services/FarmService'\nimport { toast } from '../Toast/Toast'\n\n\nconst WithDrawLPToken = props => {\n    const [symbolsArr] = useState([\"e\", \"E\", \"+\", \"-\"]);\n    const [niobWithdrawable, setNiob] = useState(0);\n    useEffect(() => {\n        \n        if (props.isNiobWithdrawabe && props?.stakeData?.isLocked) init();\n    }, []);\n\n    const init = async () => {\n        const niob = await FarmService.getNiob(props.address);\n        setNiob(niob);\n    }\n\n    const checkIfAmountGreaterThanWithdrawable = (value, isLocked) => {\n        // console.log('oooo', props.farms.isLocked);\n        // if ( (props.isNiobWithdrawabe && props?.stakeData?.isLocked) && value > niobWithdrawable) {\n            // toast.error('Amount greater than withdrawable !')\n        // } else {\n            props.depositWithdraw('withdraw', isLocked);\n        // }\n    }\n\n    return (\n        <Modal centered scrollable={true} className=\"connect_wallet get_tokens\" show={props.show} onHide={props.closeStakeModal}>\n            <Modal.Header closeButton>\n                <Modal.Title>Withdraw {props.stakeData?.lpTokenDetails?.lpTokenName} Tokens</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Row>\n                    <Col className=\"lp_tokens\">\n                        <Form className=\"lptokn_area\">\n                            <p className=\"text-end\"><span>{props.stakeData?.balance}</span> {props.stakeData?.lpTokenDetails?.lpTokenName} available</p>\n                            {/* {(props.isNiobWithdrawabe && props?.stakeData?.isLocked) &&\n                                <p className=\"text-end\"><span>{niobWithdrawable ? niobWithdrawable?.toFixed(4) : 0}</span> Withdrawable Niob</p>} */}\n                            <InputGroup>\n                                <FormControl\n                                    onKeyDown={(evt) => { symbolsArr.includes(evt.key) && evt.preventDefault() }}\n                                    type=\"number\"\n                                    id=\"search\"\n                                    autoCorrect=\"off\"\n                                    autoComplete=\"off\"\n                                    placeholder=\"0.0\"\n                                    minLength={1}\n                                    maxLength={79}\n                                    value={props.stakeValue}\n                                    onChange={(e) => props.handleStakeValue(e)}\n                                />\n                                <div className=\"action\">\n                                    <span className=\"token_name\"></span>\n                                    <Button onClick={() => props.setMaxValue()} className=\"max_btn cm_btn\">Max</Button>\n                                </div>\n                            </InputGroup>\n                            <div className=\"confirmation\">\n                                <Button onClick={() => props.closeStakeModal()} className=\"cancel_btn\">Cancel</Button>\n                                {/* <Button disabled={props.stakeConfirmation} onClick={() => props.depositWithdraw('withdraw')} className=\"cm_btn confirm\">Confirm</Button> */}\n                                <Button disabled={props.stakeConfirmation} onClick={() => checkIfAmountGreaterThanWithdrawable(props.stakeValue, props.stakeData.isLocked)} className=\"cm_btn confirm\">Confirm</Button>\n                            </div>\n                        </Form>\n                    </Col>\n                </Row>\n            </Modal.Body>\n        </Modal>\n    )\n}\n\nexport default WithDrawLPToken;\n","/data/nm/SaitaSwap/src/components/GetLPToken/GetLPToken.js",[],"/data/nm/SaitaSwap/src/components/PlanetCard/PlanetCard.js",["580","581","582","583","584","585","586","587","588","589","590","591","592","593","594","595","596","597","598","599","600","601","602","603","604","605","606","607","608"],"/data/nm/SaitaSwap/src/components/ReturnInvest/ReturnInvest.js",["609","610","611","612"],"import React, { useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport { Col, Row, Modal, Button, Table } from 'react-bootstrap'\nimport './ReturnInvest.scss'\nconst ReturnInvest = ({ roiModalData, handleClose, lpDetails, show, niobId }) => {\n    const handleROI = (day, liquidity) => {\n        const lq = liquidity ? 1000 : roiModalData?.liquidity;\n        let apr;\n        if (niobId == 12) {\n             apr = (((roiModalData?.allocPoint / roiModalData?.totalAllcationPoint) * ((roiModalData?.anchorPerBlock / 10 ** 18) * 28800 * day * 100 * roiModalData?.anchorPrice)) / lq) * 10.5537;\n        }\n        else {\n             apr = ((roiModalData?.allocPoint / roiModalData?.totalAllcationPoint) * ((roiModalData?.anchorPerBlock / 10 ** 18) * 28800 * day * 100 * roiModalData?.anchorPrice)) / lq;\n        }\n        return isNaN(apr) ? 0 : apr.toFixed(2);\n    }\n\n    const handleAnchorPerThousand = (day) => {\n        const totalLpWorth = roiModalData?.liquidity;\n        let anchorPerThousand;\n        if (niobId == 12) {\n          anchorPerThousand = ((1000 * (roiModalData?.anchorPerBlock / 10 ** 18) * 28800 * day * (roiModalData?.allocPoint / roiModalData?.totalAllcationPoint)) / totalLpWorth) * 10.5537;\n        } else {\n          anchorPerThousand = (1000 * (roiModalData?.anchorPerBlock / 10 ** 18) * 28800 * day * (roiModalData?.allocPoint / roiModalData?.totalAllcationPoint)) / totalLpWorth;\n        }\n        return isNaN(anchorPerThousand) ? 0 : anchorPerThousand.toFixed(2);\n    }\n    return (\n        <Modal centered scrollable={true} className=\"connect_wallet return_invest\" show={show} onHide={handleClose}>\n            <Modal.Header closeButton>\n                <Modal.Title>Return on Invest</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Row>\n                    <Col className=\"lp_tokens\">\n                        <div className=\"invest_area\">\n                            <Table>\n                                <thead>\n                                    <tr>\n                                        <th>Timeframe</th>\n                                        <th>ROI</th>\n                                        <th>NIOB per $1000</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    <tr>\n                                        <td>1d</td>\n                                        <td>{handleROI(1, false)}%</td>\n                                        <td>{handleAnchorPerThousand(1)}</td>\n                                    </tr>\n                                    <tr>\n                                        <td>7d</td>\n                                        <td>{handleROI(7, false)}%</td>\n                                        <td>{handleAnchorPerThousand(7)}</td>\n                                    </tr>\n                                    <tr>\n                                        <td>30d</td>\n                                        <td>{handleROI(30, false)}%</td>\n                                        <td>{handleAnchorPerThousand(30)}</td>\n                                    </tr>\n                                    <tr>\n                                        <td>365d(APR)</td>\n                                        <td>{handleROI(365, false)}%</td>\n                                        <td>{handleAnchorPerThousand(365)}</td>\n                                    </tr>\n                                </tbody>\n                            </Table>\n                            <p>Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.</p>\n                            <div className=\"confirmation\">\n                                <Link to=\"trade/liquidity/addLiquidity\" className=\"btn buttonStyle\" onClick={handleClose}>Get {lpDetails?.lpTokenName} </Link>\n                            </div>\n                        </div>\n                    </Col>\n                </Row>\n            </Modal.Body>\n        </Modal>\n    )\n}\n\nexport default ReturnInvest;\n","/data/nm/SaitaSwap/src/components/GalaxyCard/GalaxyCard.js",["613","614","615","616","617","618","619","620","621","622","623","624","625","626","627","628","629","630","631","632","633","634","635","636","637","638","639","640","641","642","643","644","645","646"],"import React, { useEffect, useState } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport \"../PlanetCard/PlanetCard.scss\";\n// import RightArrow from \"../../assets/images/right-arrow.png\";\nimport DownArrow from \"../../assets/images/down-arrow.png\";\nimport Schdule from \"../../assets/images/schdule.png\";\nimport ButtonPrimary from \"../Button/Button\";\nimport \"./GalaxyCard.scss\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { FarmService } from \"../../services/FarmService\";\nimport { ExchangeService } from \"../../services/ExchangeService\";\nimport { ContractServices } from \"../../services/ContractServices\";\nimport { MAIN_CONTRACT_LIST, TOKEN_LIST, WETH, ANCHOR_BUSD_LP, BNB_BUSD_LP } from \"../../assets/tokens\";\nimport { BigNumber } from \"bignumber.js\"\nimport { toast } from \"../Toast/Toast\";\nimport { addTransaction, startLoading, stopLoading } from \"../../redux/actions\";\nimport { addCommas } from \"../../constant\";\nimport ConnectWallet from \"../ConnectWallet/ConnectWallet\";\n\nconst GalaxyCard = (props) => {\n  const isUserConnected = useSelector(state => state.persist.isUserConnected);\n  const [classToggle, setClassToggle] = useState(false);\n\n  const [show, setShow] = useState(false);\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  const [show1, setShow1] = useState(false);\n  const handleClose1 = () => setShow1(false);\n  const handleShow1 = () => setShow1(true);\n\n  const dispatch = useDispatch();\n  const { farm: { poolInfo, userInfo, pid, niobId, isLocked, dollarVal }, index, currentIndex, handleChange,\n    harvestOnClick, stakeHandle, handleRoiModal, status } = props;\n\n  const [lpTokenDetails, setLpTokenDetails] = useState(null);\n  const [showIncrease, setShowIncrease] = useState(false);\n  const [totalSupply, setTotalSupply] = useState(0);\n  const [tokenStaked, setTokenStaked] = useState(0);\n  const [liquidity, setLiquidity] = useState(0);\n  const [showApproveButton, setShowApproveButton] = useState(true);\n  const [approvalConfirmation, setApprovalConfirmation] = useState(false);\n  const [showHarvest, setShowHarvest] = useState(false);\n  const [balance, setBalance] = useState(0);\n  const [stakeAmounts, setStakeAmounts] = useState({ amount: 0, rewards: 0 });\n  const [pantherAddress, setPantherAddress] = useState('');\n  const [apr, setApr] = useState(0);\n  const [roi, setROI] = useState({ allocPoint: 0, totalAllcationPoint: 0, anchorPerBlock: 0, anchorPrice: 0, liquidity: 0, lpWorth: 0 });\n  const [dollarValue, setAnchorDollarValue] = useState(0.01);\n  const [stakedDollarValue, setStakedDollarValue] = useState(0);\n\n  useEffect(() => {\n    init();\n    getPantherAddress();\n    getAnchorDollarValue();\n  }, [isUserConnected]);\n  const getPantherAddress = async () => {\n    const res = await FarmService.poolInfoo();\n    setPantherAddress(res);\n  }\n  const getAnchorDollarValue = async () => {\n    if (poolInfo.lpToken != undefined) {\n      try {\n\n        if (poolInfo.lpToken.toLowerCase() === TOKEN_LIST[1].address.toLowerCase()) {\n          const reserves = await ExchangeService.getReserves(ANCHOR_BUSD_LP);\n          let val = reserves[1] / reserves[0];\n          val = val || 0;\n          setAnchorDollarValue(val.toFixed(3));\n          return (val.toFixed(3));\n        }\n        else if (poolInfo.lpToken.toLowerCase() != TOKEN_LIST[2].address.toLowerCase()) {\n\n          const pair = await ExchangeService.getPairFromPancakeFactory(poolInfo.lpToken, TOKEN_LIST[2].address);\n          const reserves = await ExchangeService.getReserves(pair);\n          let val = reserves[1] / reserves[0];\n          val = val || 0;\n          setAnchorDollarValue(val.toFixed(3));\n          return (val.toFixed(3));\n        }\n\n      } catch (error) {\n        console.log(error)\n      }\n    }\n\n  }\n\n  const getDollarAPR = async (address) => {\n    if (poolInfo.lpToken != undefined) {\n      try {\n\n        if (address.toLowerCase() === TOKEN_LIST[1].address.toLowerCase()) {\n          const reserves = await ExchangeService.getReserves(ANCHOR_BUSD_LP);\n          let val = reserves[1] / reserves[0];\n          val = val || 0;\n          setAnchorDollarValue(val.toFixed(3));\n          return (val.toFixed(3));\n        }\n        else if (address.toLowerCase() != TOKEN_LIST[2].address.toLowerCase()) {\n\n          const pair = await ExchangeService.getPairFromPancakeFactory(address, TOKEN_LIST[2].address);\n          const reserves = await ExchangeService.getReserves(pair);\n          let val = reserves[1] / reserves[0];\n          val = val || 0;\n          setAnchorDollarValue(val.toFixed(3));\n          return (val.toFixed(3));\n        }\n\n      } catch (error) {\n        console.log(error)\n      }\n    }\n\n  }\n\n  const init = async () => {\n    if (poolInfo) {\n      const { lpToken } = poolInfo;\n      if (lpToken) {\n        const totalSupplyTemp = await ContractServices.getTotalSupply(lpToken);\n        setTotalSupply(totalSupplyTemp);\n        const tokenAmount = await ExchangeService.getTokenStaked(lpToken);\n        setTokenStaked(tokenAmount);\n        let price = 0;\n        if (lpToken.toLowerCase() === TOKEN_LIST[2].address.toLowerCase()) {\n          price = 1\n        } else {\n          const tokenPairUSDT = await ExchangeService.getPair(lpToken, TOKEN_LIST[2].address);\n          price = await calPrice(tokenPairUSDT);\n        }\n        let liq;\n        if (poolInfo.lpToken.toLowerCase() === TOKEN_LIST[2].address.toLowerCase()) {\n          liq = (tokenAmount * 1);\n        } else {\n          const dv = await getAnchorDollarValue();\n          liq = (tokenAmount * dv);\n        }\n        setLiquidity(liq);\n        const lpTokenDetailsTemp = await FarmService.getPoolTokenDetails(lpToken);\n        const a = await calculateAPR(Number(poolInfo.allocPoint), lpToken, liquidity);\n        // console.log('=====', pid, poolInfo.allocPoint, lpToken, liquidity);\n\n\n\n        if (pid == niobId) {\n          const a = await calculateAPR(Number(poolInfo.allocPoint), lpToken, liquidity);\n          setApr(a * 10.5537)\n        } else {\n          setApr(a);\n        }\n\n\n\n        // setApr(a);\n        lpTokenDetailsTemp.apr = a;\n        setLpTokenDetails(lpTokenDetailsTemp);\n        if (isUserConnected) {\n          const allowance = await ContractServices.allowanceToken(lpToken, MAIN_CONTRACT_LIST.farm.address, isUserConnected);\n          let check = true;\n          if (BigNumber(allowance).isGreaterThanOrEqualTo(BigNumber(2 * 255 - 1))) {\n            setShowApproveButton(false);\n            check = false;\n          }\n\n          let balance = await ContractServices.getTokenBalance(lpToken, isUserConnected);\n          if (balance > 0.00001) {\n            balance -= 0.00001;\n          }\n          setBalance(balance);\n\n          const amount = Number((Number(userInfo.amount) / 10 ** Number(lpTokenDetailsTemp.decimals)).toFixed(5));\n          const price = await handleStakeDollarValue(amount, lpToken);\n          const rewards = Number((Number(await FarmService.pendingPanther(pid, isUserConnected) / 10 ** 18).toFixed(5)));\n          if (!check && amount > 0) {\n            setShowIncrease(true);\n          }\n          setStakeAmounts({ amount, rewards });\n\n          setStakedDollarValue(price);\n\n\n          //nextHarvest\n          const nextHarvestUntil = await FarmService.canHarvest(pid, isUserConnected);\n          if (!check && rewards > 0 && Number(userInfo.nextHarvestUntil) > 0 && nextHarvestUntil) {\n            setShowHarvest(true);\n          }\n        }\n      }\n    }\n  };\n\n  const handleTokenApproval = async () => {\n    const acc = await ContractServices.getDefaultAccount();\n    if (acc && acc.toLowerCase() !== isUserConnected.toLowerCase()) {\n      return toast.error('Wallet address doesn`t match!');\n    }\n    if (approvalConfirmation) {\n      return toast.info('Token approval is processing');\n    }\n    // (2*256 - 1);\n    const value = '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff';\n\n    try {\n      dispatch(startLoading());\n      setApprovalConfirmation(true);\n      const r = await ContractServices.approveToken(isUserConnected, value, MAIN_CONTRACT_LIST.farm.address, poolInfo.lpToken);\n      if (r) {\n        let data = {\n          message: `Approve LP Token`,\n          tx: r.transactionHash\n        };\n        dispatch(addTransaction(data));\n        setApprovalConfirmation(false);\n        init();\n      }\n      dispatch(stopLoading());\n    } catch (err) {\n      setApprovalConfirmation(false);\n      dispatch(stopLoading());\n      toast.error('Approval Transaction Reverted!');\n    }\n  }\n\n  const beforeStake = async (type, isLocked) => {\n    if (isUserConnected) {\n      let bal = 0;\n      if (type === 'deposit') {\n        bal = balance;\n      }\n      if (type === 'withdraw') {\n        bal = stakeAmounts.amount;\n      }\n      stakeHandle({ pid, poolInfo, lpTokenDetails, balance: bal, niobId, isLocked }, type);\n    } else {\n      return toast.error('Connect wallet first!');\n    }\n  }\n\n  const calPrice = async (pairAddress) => {\n    let price = 0;\n\n    if (pairAddress == \"0x0000000000000000000000000000000000000000\") {\n      return 0;\n    }\n\n    const tokenZero = await ExchangeService.getTokenZero(pairAddress);\n    const tokenOne = await ExchangeService.getTokenOne(pairAddress);\n    const reserve = await ExchangeService.getReserves(pairAddress);\n    const decimalZero = await ContractServices.getDecimals(tokenZero);\n    const decimalOne = await ContractServices.getDecimals(tokenOne);\n\n    if (tokenZero.toLowerCase() === TOKEN_LIST[2].address.toLowerCase()) {\n      return price = ((reserve[0] * (10 ** decimalOne)) / (reserve[1] * (10 ** decimalZero)));\n    }\n\n    if (tokenOne.toLowerCase() === TOKEN_LIST[2].address.toLowerCase()) {\n      return price = ((reserve[1] * (10 ** decimalZero)) / (reserve[0] * (10 ** decimalOne)));\n    }\n\n    let priceBNBToUSD = await calPrice(BNB_BUSD_LP);\n    if (tokenZero.toLowerCase() === WETH.toLowerCase()) {\n      price = ((reserve[0] * (10 ** decimalOne)) / (reserve[1] * (10 ** decimalZero)));\n      return (price * priceBNBToUSD);\n    }\n\n    if (tokenOne.toLowerCase() === WETH.toLowerCase()) {\n      price = ((reserve[1] * (10 ** decimalZero)) / (reserve[0] * (10 ** decimalOne)));\n      return (price * priceBNBToUSD);\n    }\n  }\n\n  const calculateAPR = async (allocPoint, lpToken, lpWorth) => {\n\n    const anchorPrice = await calPrice(ANCHOR_BUSD_LP);\n    const totalAllcationPoint = Number(await FarmService.totalAllocationPoint());\n    const anchorPerBlock = Number(await FarmService.pantherPerBlock());\n    //need to calculate usd price.\n    const liquidity = await handleLiquidity(lpToken);\n    console.log(\"ANCHOR PRICE:\", anchorPrice);\n    console.log(\"liquidityliquidity:\", liquidity);\n    if (liquidity != 0) {\n      const apr = ((allocPoint / totalAllcationPoint) * ((anchorPerBlock / 10 ** 18) * 28800 * 365 * 100 * anchorPrice)) / liquidity;\n      setROI({ allocPoint, totalAllcationPoint, anchorPerBlock, anchorPrice, liquidity, lpWorth });\n\n      return apr;\n    }\n\n    return 0;\n  }\n  const handleLiquidity = async (tokenAddress) => {\n\n    if (tokenAddress != \"0x0000000000000000000000000000000000000000\") {\n\n      const reserve = await ExchangeService.getTokenStaked(tokenAddress);\n      const tokenPairUSDT = await ExchangeService.getPair(tokenAddress, TOKEN_LIST[2].address);\n      const tokenPairBNB = await ExchangeService.getPair(tokenAddress, WETH);\n\n      let priceA = 0;\n\n      if (tokenAddress.toLowerCase() == TOKEN_LIST[2].address.toLowerCase()) {\n        priceA = 1;\n      } else if (tokenAddress.toLowerCase() == WETH.toLowerCase()) {\n        priceA = await getDollarAPR(tokenAddress);\n      }\n\n      if (priceA == 0) {\n        if (tokenPairUSDT != \"0x0000000000000000000000000000000000000000\") {\n          priceA = await getDollarAPR(tokenAddress);\n        } else if (tokenPairBNB != \"0x0000000000000000000000000000000000000000\") {\n          priceA = await getDollarAPR(tokenAddress);\n          priceA = 0;\n        }\n      }\n\n      const liquidity = (reserve * priceA);\n\n      return Number(liquidity).toFixed(2);\n    }\n    return 0;\n  }\n  const handleIcon = (lpTokenName) => {\n    if (lpTokenName != undefined) {\n      const tokenObj = TOKEN_LIST.find(\n        (d) => d.symbol.toLowerCase() === lpTokenName.toLowerCase()\n      );\n      return tokenObj?.icon;\n    }\n\n  }\n  const earnedDollarValue = (dollarValue, rewards) => {\n\n    let fixedAfterDecimal = Number((dollarValue * rewards)).toFixed(6);\n    let res = addCommas(fixedAfterDecimal);\n    return res;\n  }\n\n  const handleStakeDollarValue = async (stakedAmount, lpToken) => {\n    const pairAddress = await ExchangeService.getPair(lpToken, TOKEN_LIST[2].address);\n    let price;\n    if (lpToken.toLowerCase() === TOKEN_LIST[2].address) {\n      price = 1;\n    } else {\n      price = await calPrice(pairAddress);\n    }\n    const dollarPrice = stakedAmount * price;\n    return dollarPrice;\n  }\n\n  return (\n    <>\n      <Button\n        className={`planet_bar glaxy_bar`}\n        onClick={() => setClassToggle(!classToggle)}\n      >\n        <div className=\"cions\">\n          <span className=\"coin_imgs uppr\">\n            <img src={handleIcon(lpTokenDetails?.lpTokenName) ? handleIcon(lpTokenDetails?.lpTokenName) : null} />\n          </span>\n          <span className=\"coin_title glxy_token\"><span className=\"title_nm\">Token</span>{lpTokenDetails?.lpTokenName} {isLocked ? \"(Lock)\" : \"\"}</span>\n        </div>\n\n        <div className=\"coin_detail\">\n          <div className=\"d-flex align-items-center\">\n            <div className=\"prcentx\">{poolInfo?.displayAllocPoint ? poolInfo?.displayAllocPoint : poolInfo?.allocPoint}X</div>\n            <img className=\"QrIcon\" src={Schdule} onClick={() => handleRoiModal(roi, lpTokenDetails, pid)} />\n            <div className=\"apr\">\n              <span>APR</span>\n              <p>{addCommas(apr.toFixed(2))}%</p>\n            </div>\n          </div>\n          <div className=\"lqdty\">\n            <span>Liquidity</span>\n            <p>${addCommas(liquidity.toFixed(2))}</p>\n          </div>\n          <div className=\"erndniob\">\n            <span>Earned SAITA</span>\n            <p>{stakeAmounts.rewards !== NaN ? addCommas(stakeAmounts.rewards) : \"0.00\"}</p>\n            <p>$ {stakeAmounts.rewards !== NaN ? earnedDollarValue(dollarVal, stakeAmounts.rewards) : \"0.00\"}</p>\n          </div>\n        </div>\n        <div className=\"dtl_btn\">\n          <p>\n            Details{\" \"}\n            <span>\n              <img src={DownArrow} />\n            </span>\n          </p>\n        </div>\n      </Button>\n      <div className={classToggle ? \"planet_strip\" : \"d-none\"}>\n        <div className=\"stakedValue\">\n          <div className=\"d-flex comnDiv\">\n            <div className=\"stkd_title\">\n              <h6>Total Staked:</h6>\n              <h6>Stake:</h6>\n              <h6>Deposit Fee:</h6>\n            </div>\n            <div className=\"boldTxt\">\n              <h6>{addCommas(tokenStaked.toFixed(2))}</h6>\n              <h6>{lpTokenDetails?.lpTokenName}</h6>\n              <h6>{poolInfo.depositFeeBP ? (Number(poolInfo.depositFeeBP) / 10000) * 100 : 0}%</h6>\n            </div>\n          </div>\n          <div className=\"d-flex comnDiv\">\n            <div className=\"stkd_title\">\n              <h6>Staked Dollar Value:</h6>\n              <h6>Earned Value:</h6>\n              <h6>Harvest Interval:</h6>\n            </div>\n            <div className=\"boldTxt\">\n              <h6>${stakedDollarValue ? addCommas(stakedDollarValue.toFixed(9)) : 0}</h6>\n              <h6>$ {stakeAmounts.rewards !== NaN ? earnedDollarValue(dollarVal, stakeAmounts.rewards) : \"0.00\"}</h6>\n              <h6>{poolInfo.harvestInterval ? Number(((poolInfo.harvestInterval) / 3600).toFixed(2)) : 0} Hour(s)</h6>\n            </div>\n          </div>\n          <div className=\"vwdoc_btn\">\n            <div className=\"linksTxt\">\n              <a href=\"#\">View on BscScan</a>\n              <a href=\"#\">View Project Site</a>\n            </div>\n            <div className=\"available_funds\">\n              <div className=\"funds\">\n                {isUserConnected ? (\n                  <>\n                    {showIncrease ? (\n                      <div className=\"cardFarm_increase\">\n                        <button\n                          type=\"button\"\n                          onClick={() => beforeStake(\"withdraw\", isLocked)}\n                        >\n                          <span>-</span>\n                        </button>\n                        <button\n                          type=\"button\"\n                          onClick={() => beforeStake(\"deposit\", isLocked)}\n                        >\n                          <span>+</span>\n                        </button>\n                      </div>\n                    ) : (\n                      <>\n                        {showApproveButton ? (\n                          <Button\n                            className=\"funds_btn\"\n                            onClick={() => handleTokenApproval()}\n                          >\n                            Enable Pool\n                          </Button>\n                        ) : (\n                          <Button\n                            className=\"funds_btn\"\n                            onClick={() => beforeStake(\"deposit\")}\n                          >\n                            Stake\n                          </Button>\n                        )}\n                      </>\n                    )}\n                  </>\n                ) : (\n                  <>\n                    <Button\n                      type=\"button\"\n                      className=\"unlockWallet_Btn\"\n                      onClick={() => handleShow1()}\n                    >\n                      Unlock Wallet\n                    </Button>\n                  </>\n                )}\n                <ButtonPrimary className=\"unlockWallet_Btn\"\n                  onClick={() => {\n                    setShowHarvest(false);\n                    harvestOnClick(pid, lpTokenDetails?.lpTokenName);\n                  }} title=\"Harvest\"\n                  disabled={!showHarvest} />\n\n              </div>\n            </div>\n\n            {/* <ButtonPrimary className=\"unlockWallet_Btn\" onClick={()=> handleShow(true)} title=\"Unlock Wallet\" /> */}\n          </div>\n        </div>\n      </div>\n      <ConnectWallet show={show1} handleShow={handleShow1} handleClose={handleClose1} />\n\n    </>\n  );\n};\n\nexport default GalaxyCard;\n\n\n","/data/nm/SaitaSwap/src/redux/actions/ExchangeActions.js",["647","648"],"import { ContractServices } from \"../../services/ContractServices\";\nimport default_icon from \"../../assets/images/token_icons/default.svg\";\nimport { UserService } from \"../../services/UserService\";\nimport { checkUserLpTokens, saveUserLpTokens } from \"./PersistActions\";\nimport { WETH } from \"../../assets/tokens\";\nimport { ExchangeService } from \"../../services/ExchangeService\";\n\nexport const searchTokenByNameOrAddress =\n  (address) => async (dispatch, getState) => {\n    try {\n      const {\n        persist: { tokenList },\n      } = getState();\n\n      if (address.length === 42) {\n        const filteredTokenList = tokenList.filter((token) =>\n          token.address.toLowerCase().includes(address.toLowerCase())\n        );\n        if (filteredTokenList.length > 0) {\n          return filteredTokenList;\n        }\n        const tokenDecimal = await ContractServices.getDecimals(address);\n        const tokenName = await ContractServices.getTokenName(address);\n        const tokenSymbol = await ContractServices.getTokenSymbol(address);\n        const tokenBalance = await ContractServices.getTokenBalance(address);\n        const obj = {\n          icon: default_icon,\n          name: tokenName,\n          address,\n          isAdd: true,\n          isDel: false,\n          decimals: tokenDecimal,\n          symbol: tokenSymbol,\n        };\n        tokenList.push(obj);\n        return tokenList;\n      }\n      return tokenList.filter((token) =>\n        token.name.toLowerCase().includes(address.toLowerCase())\n      );\n    } catch (error) {\n      console.log(\"Error: \", error);\n      return error;\n    }\n  };\n\nexport const delTokenFromList = (data) => async (dispatch, getState) => {\n  try {\n    const {\n      persist: { tokenList },\n    } = getState();\n    tokenList.splice(\n      tokenList.findIndex(\n        (a) => a.address.toLowerCase() === data.address.toLowerCase()\n      ),\n      1\n    );\n    return tokenList;\n  } catch (error) {\n    console.log(\"Error: \", error);\n    return error;\n  }\n};\n\nexport const getUserLPTokens = () => async (dispatch, getState) => {\n  try {\n    const {\n      persist: { updateUserLpTokens },\n    } = getState();\n    if (!updateUserLpTokens) {\n      dispatch(saveUserLpTokens([]));\n      let lpTokensCount = await UserService.getPairsCount();\n      lpTokensCount = lpTokensCount.data.count;\n\n      const limit = 100;\n      const totalPages = Math.ceil(lpTokensCount / limit);\n      // let lpTokensArr = [];\n      for (let page = 1; page <= totalPages; page++) {\n        let lpTokens = await UserService.getPairs({ page, limit });\n\n        lpTokens = lpTokens.data;\n        // lpTokensArr = lpTokensArr.concat(lpTokens);\n        for (let lp of lpTokens) {\n          await dispatch(commonLpToken(lp));\n        }\n\n        // console.log(\"LPTOKENS:\", lpTokens);\n      }\n    }\n  } catch (error) {\n    console.log(\"Error: \", error);\n    return error;\n  }\n};\nexport const commonLpToken = (lp) => {\n  return async (dispatch, getState) => {\n    try {\n      const {\n        persist: { isUserConnected, tokenList, userLpTokens },\n      } = getState();\n      const balance = await ContractServices.getTokenBalanceFull(\n        lp.pair,\n        isUserConnected\n      );\n      if (balance > 0) {\n        let userLpTokensArr = userLpTokens;\n        let token0Obj = {},\n          token1Obj = {},\n          token0Deposit = 0,\n          token1Deposit = 0,\n          poolShare = \"0\",\n          ratio = 0;\n        const totalSupply = await ContractServices.getTotalSupply(lp.pair);\n\n        ratio = balance / totalSupply;\n        poolShare = ((balance / totalSupply) * 100).toFixed(2);\n\n        const reserves = await ExchangeService.getReserves(lp.pair);\n\n        if (lp.token0.toLowerCase() === WETH.toLowerCase()) {\n          token0Obj = tokenList.find((d) => d.address === \"BNB\");\n        } else {\n          token0Obj = tokenList.find(\n            (d) => d.address.toLowerCase() === lp.token0.toLowerCase()\n          );\n        }\n        if (lp.token1.toLowerCase() === WETH.toLowerCase()) {\n          token1Obj = tokenList.find((d) => d.address === \"BNB\");\n        } else {\n          token1Obj = tokenList.find(\n            (d) => d.address.toLowerCase() === lp.token1.toLowerCase()\n          );\n        }\n        //lp deposit\n        token0Deposit =\n          ratio * (reserves[\"_reserve0\"] / 10 ** token0Obj.decimals);\n        token1Deposit =\n          ratio * (reserves[\"_reserve1\"] / 10 ** token1Obj.decimals);\n\n        const data = {\n          ...lp,\n          token0Obj,\n          token1Obj,\n          token0Deposit,\n          token1Deposit,\n          balance,\n          poolShare,\n        };\n        userLpTokensArr = [...userLpTokensArr, data];\n        dispatch(saveUserLpTokens(userLpTokensArr));\n      }\n    } catch (error) {}\n  };\n};\n\nexport const addLpToken = (lp) => {\n  return async (dispatch, getState) => {\n    try {\n      const {\n        persist: { isUserConnected, tokenList, userLpTokens },\n      } = getState();\n      if (lp) {\n        dispatch(checkUserLpTokens(true));\n        let userLpTokensArr = userLpTokens;\n\n        const balance = await ContractServices.getTokenBalanceFull(\n          lp.pair,\n          isUserConnected\n        );\n        if (balance > 0) {\n          let token0Obj = {},\n            token1Obj = {},\n            token0Deposit = 0,\n            token1Deposit = 0,\n            poolShare = \"0\",\n            ratio = 0;\n          const totalSupply = await ContractServices.getTotalSupply(lp.pair);\n\n          ratio = balance / totalSupply;\n          poolShare = ((balance / totalSupply) * 100).toFixed(2);\n\n          const reserves = await ExchangeService.getReserves(lp.pair);\n\n          if (lp.token0.toLowerCase() === WETH.toLowerCase()) {\n            lp.token0 = \"BNB\";\n            token0Obj = tokenList.find((d) => d.address === \"BNB\");\n          } else {\n            token0Obj = tokenList.find(\n              (d) => d.address.toLowerCase() === lp.token0.toLowerCase()\n            );\n          }\n          if (lp.token1.toLowerCase() === WETH.toLowerCase()) {\n            lp.token1 = \"BNB\";\n            token1Obj = tokenList.find((d) => d.address === \"BNB\");\n          } else {\n            token1Obj = tokenList.find(\n              (d) => d.address.toLowerCase() === lp.token1.toLowerCase()\n            );\n          }\n          console.log(token0Obj, token1Obj);\n          //lp deposit\n          token0Deposit =\n            ratio * (reserves[\"_reserve0\"] / 10 ** token0Obj.decimals);\n          token1Deposit =\n            ratio * (reserves[\"_reserve1\"] / 10 ** token1Obj.decimals);\n\n          const data = {\n            ...lp,\n            token0Obj,\n            token1Obj,\n            token0Deposit,\n            token1Deposit,\n            balance,\n            poolShare,\n          };\n          let check = true;\n          for (let oldLp of userLpTokens) {\n            if (\n              oldLp.pair.toLowerCase() === lp.pair.toLowerCase() &&\n              oldLp.balance === lp.balance\n            ) {\n              check = false;\n            }\n          }\n          if (check) {\n            userLpTokensArr = [...userLpTokensArr, data];\n\n            await dispatch(saveUserLpTokens(userLpTokensArr));\n          }\n          return data;\n        } else {\n          return null;\n        }\n      }\n    } catch (error) {\n      console.log(\"Error: \", error);\n      return error;\n    }\n  };\n};\n\nexport const updateLpToken = (lp) => {\n  return async (dispatch, getState) => {\n    try {\n      const {\n        persist: { isUserConnected, tokenList, userLpTokens },\n      } = getState();\n      if (lp) {\n        dispatch(checkUserLpTokens(true));\n        let userLpTokensArr = userLpTokens;\n\n        const balance = await ContractServices.getTokenBalanceFull(\n          lp.pair,\n          isUserConnected\n        );\n        if (balance > 0) {\n          let token0Obj = {},\n            token1Obj = {},\n            token0Deposit = 0,\n            token1Deposit = 0,\n            poolShare = \"0\",\n            ratio = 0;\n          const totalSupply = await ContractServices.getTotalSupply(lp.pair);\n\n          ratio = balance / totalSupply;\n          poolShare = ((balance / totalSupply) * 100).toFixed(2);\n\n          const reserves = await ExchangeService.getReserves(lp.pair);\n\n          if (lp.token0.toLowerCase() === WETH.toLowerCase()) {\n            lp.token0 = \"BNB\";\n            token0Obj = tokenList.find((d) => d.address === \"BNB\");\n          } else {\n            token0Obj = tokenList.find(\n              (d) => d.address.toLowerCase() === lp.token0.toLowerCase()\n            );\n          }\n          if (lp.token1.toLowerCase() === WETH.toLowerCase()) {\n            lp.token1 = \"BNB\";\n            token1Obj = tokenList.find((d) => d.address === \"BNB\");\n          } else {\n            token1Obj = tokenList.find(\n              (d) => d.address.toLowerCase() === lp.token1.toLowerCase()\n            );\n          }\n          //lp deposit\n          token0Deposit =\n            ratio * (reserves[\"_reserve0\"] / 10 ** token0Obj.decimals);\n          token1Deposit =\n            ratio * (reserves[\"_reserve1\"] / 10 ** token1Obj.decimals);\n\n          const data = {\n            ...lp,\n            token0Obj,\n            token1Obj,\n            token0Deposit,\n            token1Deposit,\n            balance,\n            poolShare,\n          };\n          let realIndex = userLpTokens.findIndex(\n            (item) => item.pair === lp.pair\n          );\n          userLpTokens[realIndex].balance = balance;\n          userLpTokens[realIndex].poolShare = poolShare;\n          userLpTokens[realIndex].token0Deposit = token0Deposit;\n          userLpTokens[realIndex].token1Deposit = token1Deposit;\n          await dispatch(saveUserLpTokens(userLpTokensArr));\n          return;\n        } else {\n          return null;\n        }\n      }\n    } catch (error) {\n      console.log(\"Error: \", error);\n      return error;\n    }\n  };\n};\n","/data/nm/SaitaSwap/src/redux/actions/tokenActions.js",["649","650","651","652"],"import { UserService } from \"../../services/UserService\";\nimport { startLoading, stopLoading } from \"./LoadingActions\";\nimport { PersistActions } from \"../actions\"\nimport { ContractServices } from \"../../services/ContractServices\";\n\n\n\nexport function getTokenBalance() {\n  return (dispatch, getState) => new Promise((resolve, reject) => {\n    ContractServices.tokenBalance()\n      .then((res) => {\n        resolve(res);\n      })\n      .catch((ex) => {\n        reject(ex);\n      });\n\n  });\n}\n\n\n","/data/nm/SaitaSwap/src/redux/actions/SecurityActions.js",["653","654","655","656","657","658","659","660","661","662"],"import { SecurityService } from \"../../services/SecurityService\";\nimport { startLoading, stopLoading } from \"./LoadingActions\";\nimport { toast } from \"../../components/Toast/Toast\";\nimport { AUTH_TOKEN_KEY } from \"../../constant\";\nimport { getToken } from \"../../Helpers/storageHelper\"\n\n\n\n/** seting action types */\nexport const actionTypes = {\n  SAVE_GOOGLE_AUTH_DETAIL: \"SAVE_GOOGLE_AUTH_DETAIL\",\n  KYC_FORM_UPDATE: \"KYC_FORM_UPDATE\",\n  KYC_FORM_CLEAR: \"KYC_FORM_CLEAR\"\n\n};\n\n\n\nexport function saveKycFormData(data) {\n\n  return {\n    type: actionTypes.KYC_FORM_UPDATE,\n    payload: data\n  };\n}\n\nexport function clearKycFormData() {\n\n  return {\n    type: actionTypes.KYC_FORM_CLEAR,\n  };\n}\n\n\nexport function saveGoogleAuthDetails(data) {\n  return {\n    type: actionTypes.SAVE_GOOGLE_AUTH_DETAIL,\n    payload: data\n  };\n}\n\n\nexport function get2FaImage(data) {\n  return (dispatch, getState) => new Promise((resolve, reject) => {\n    dispatch(startLoading())\n    SecurityService.get2FaImage(data, {\n      jwt: getToken(AUTH_TOKEN_KEY)\n    })\n      .then((res) => {\n        dispatch(saveGoogleAuthDetails(res.data.data))\n        dispatch(stopLoading());\n        resolve(res);\n      })\n      .catch((ex) => {\n        toast.error(ex.data.message)\n        dispatch(stopLoading());\n\n        reject(ex);\n      });\n\n  });\n}\n\n\nexport function google2faValidate(data) {\n  return (dispatch, getState) => new Promise((resolve, reject) => {\n    dispatch(startLoading())\n    SecurityService.google2faValidate(data, {\n      jwt: getToken(AUTH_TOKEN_KEY)\n    })\n      .then((res) => {\n        toast.success(res.data.message);\n\n        dispatch(stopLoading());\n        resolve(res);\n      })\n      .catch((ex) => {\n        toast.error(ex.data.message)\n        dispatch(stopLoading());\n        reject(ex);\n      });\n\n  });\n}\n\n\nexport function google2faDisable(data) {\n  return (dispatch, getState) => new Promise((resolve, reject) => {\n    dispatch(startLoading())\n    SecurityService.google2faDisable(data, {\n\n      jwt: getToken(AUTH_TOKEN_KEY)\n    })\n      .then((res) => {\n        toast.success(res.data.message);\n\n        dispatch(stopLoading());\n        resolve(res);\n      })\n      .catch((ex) => {\n        toast.error(ex.data.message)\n        dispatch(stopLoading());\n        reject(ex);\n      });\n\n  });\n}\n\n\n\nexport const uploadRawFile = file => {\n  return (dispatch, getState) => {\n    let state = getState();\n\n    // dispatch(startLoading());\n    return new Promise((resolve, reject) => {\n      SecurityService.uploadRawFile(file, {\n        jwt: getToken(AUTH_TOKEN_KEY)\n      })\n        .then((res) => {\n          dispatch(stopLoading());\n          toast.success(res.data.message);\n          resolve(res);\n        })\n        .catch((ex) => {\n          dispatch(stopLoading());\n          reject(ex);\n        });\n    });\n  };\n};\n\n\nexport const removeKycDoc = file => {\n  return (dispatch, getState) => {\n    let state = getState();\n\n    dispatch(startLoading());\n    return new Promise((resolve, reject) => {\n      SecurityService.removeKycDoc(file, {\n        jwt: getToken(AUTH_TOKEN_KEY)\n      })\n        .then((res) => {\n          dispatch(stopLoading());\n          toast.success(res.data.message);\n          resolve(res);\n        })\n        .catch((ex) => {\n          dispatch(stopLoading());\n          reject(ex);\n        });\n    });\n  };\n};\n\n\nexport const getUserKycDetails = data => {\n  return (dispatch, getState) => {\n    let state = getState();\n\n    dispatch(startLoading());\n    return new Promise((resolve, reject) => {\n      SecurityService.getUserKycDetails({\n        jwt: getToken(AUTH_TOKEN_KEY)\n      })\n        .then((res) => {\n          dispatch(stopLoading());\n          resolve(res);\n        })\n        .catch((ex) => {\n          dispatch(stopLoading());\n          reject(ex);\n        });\n    });\n  };\n};\n\n\n\n\nexport const getFileById = data => {\n  return (dispatch, getState) => {\n    let state = getState();\n\n    dispatch(startLoading());\n    return new Promise((resolve, reject) => {\n      SecurityService.getFileById(data, {\n        jwt: getToken(AUTH_TOKEN_KEY)\n      })\n        .then((res) => {\n          dispatch(stopLoading());\n          resolve(res);\n        })\n        .catch((ex) => {\n          dispatch(stopLoading());\n          reject(ex);\n        });\n    });\n  };\n};\n\n//PROFILE\nexport const getUserProfile = () => {\n  return (dispatch, getState) => {\n    let state = getState();\n\n    dispatch(startLoading());\n    return new Promise((resolve, reject) => {\n      SecurityService.getUserProfile({\n        jwt: getToken(AUTH_TOKEN_KEY)\n      })\n        .then((res) => {\n          dispatch(stopLoading());\n          resolve(res);\n        })\n        .catch((ex) => {\n          dispatch(stopLoading());\n          reject(ex);\n        });\n    });\n  };\n};\n\n\nexport const updateUserProfile = data => {\n  return (dispatch, getState) => {\n    let state = getState();\n\n    dispatch(startLoading());\n    return new Promise((resolve, reject) => {\n      SecurityService.updateUserProfile(data, {\n        jwt: getToken(AUTH_TOKEN_KEY)\n      })\n        .then((res) => {\n          toast.success(res.data.message);\n          dispatch(stopLoading());\n          resolve(res);\n        })\n        .catch((ex) => {\n          toast.error(ex.data.message)\n          dispatch(stopLoading());\n          reject(ex);\n        });\n    });\n  };\n};\n\n\nexport const getUserInfo = () => {\n  return (dispatch, getState) => {\n    let state = getState();\n\n    dispatch(startLoading());\n    return new Promise((resolve, reject) => {\n      SecurityService.getUserInfo({\n        jwt: getToken(AUTH_TOKEN_KEY)\n      })\n        .then((res) => {\n          dispatch(stopLoading());\n          resolve(res);\n        })\n        .catch((ex) => {\n          dispatch(stopLoading());\n          reject(ex);\n        });\n    });\n  };\n};\nexport const getUserTrustedDevice = () => {\n  return (dispatch, getState) => {\n    let state = getState();\n\n    dispatch(startLoading());\n    return new Promise((resolve, reject) => {\n      SecurityService.getUserTrustedDevice({\n        jwt: getToken(AUTH_TOKEN_KEY)\n      })\n        .then((res) => {\n          dispatch(stopLoading());\n          resolve(res);\n        })\n        .catch((ex) => {\n          dispatch(stopLoading());\n          reject(ex);\n        });\n    });\n  };\n};\n\n\n\n\n\nexport const resetUserPassword = data => {\n  return (dispatch, getState) => {\n    let state = getState();\n\n    dispatch(startLoading());\n    return new Promise((resolve, reject) => {\n      SecurityService.resetUserPassword(data, {\n        jwt: getToken(AUTH_TOKEN_KEY)\n      })\n        .then((res) => {\n          toast.success(res.data.message);\n          dispatch(stopLoading());\n          resolve(res);\n        })\n        .catch((ex) => {\n          toast.error(ex.data.message)\n          dispatch(stopLoading());\n          reject(ex);\n        });\n    });\n  };\n};\n\n\n\nexport const updateUserKyc = data => {\n  return (dispatch, getState) => {\n    let state = getState();\n\n    dispatch(startLoading());\n    return new Promise((resolve, reject) => {\n      SecurityService.updateUserKyc(data, {\n        jwt: getToken(AUTH_TOKEN_KEY)\n      })\n        .then((res) => {\n          toast.success(res.data.message);\n          dispatch(stopLoading());\n          resolve(res);\n        })\n        .catch((ex) => {\n          toast.error(ex.data.message)\n          dispatch(stopLoading());\n          reject(ex);\n        });\n    });\n  };\n};\n\n\n\n\n\n\n\n\n\n","/data/nm/SaitaSwap/src/redux/actions/FarmAction.js",[],"/data/nm/SaitaSwap/src/redux/actions/RegisterActions.js",[],"/data/nm/SaitaSwap/src/redux/actions/AuthActions.js",[],"/data/nm/SaitaSwap/src/assets/tokens/index.js",["663","664","665","666","667","668","669","670","671","672","673","674","675"],"/data/nm/SaitaSwap/src/services/Fetch.js",[],"/data/nm/SaitaSwap/src/components/Card/Card.js",[],"/data/nm/SaitaSwap/src/components/RecentTransactions/RecentTransactions.js",[],"/data/nm/SaitaSwap/src/components/SupplyModal/SupplyModal.js",[],"/data/nm/SaitaSwap/src/components/buttonBack/ButtonBack.js",["676"],"import React from 'react'\nimport { Link, useHistory } from 'react-router-dom'\nimport goBack from '../../assets/images/icon_goback.png'\nimport './ButtonBackStyle.scss'\n\n\nconst ButtonBack = props => {\n    const history =  useHistory()\n    return (\n        <Link className=\"goBackButtonStyle\" to={{javascript:void(0)}}  onClick={() => {\n            history.goBack();\n        }}><img src={goBack} /></Link>\n    ) \n}\n\nexport default ButtonBack\n","/data/nm/SaitaSwap/src/components/selectCoin/SelectCoin.js",["677","678","679"],"import React, { useState } from \"react\";\nimport { Col, Row } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport \"./SelectCoinStyle.scss\";\nimport iconDropDown from \"../../assets/images/down-arrow.png\";\n\nconst SelectCoin = (props) => {\n  const [symbolsArr] = useState([\"e\", \"E\", \"+\", \"-\"]);\n  return (\n    <Col className={`selectCoin_style ${props.className}`}>\n      <Row className=\"mx-0\">\n        <Col className=\"selectCoin_left_style\">\n          <label>{props.inputLabel}</label>\n          <input\n            type=\"number\"\n            onKeyDown={(evt) => { symbolsArr.includes(evt.key) && evt.preventDefault() }}\n            onChange={props.onChange}\n            placeholder={props.placeholder}\n            value={props.defaultValue}\n            min={0} \n            minLength={1}\n            maxLength={79}\n            autoCorrect=\"off\"\n            autoComplete=\"off\"\n          />\n        </Col>\n        <Col className=\"selectCoin_right_style\">\n          <label>{props.label}</label>\n          <Col className=\"select_buttonStyle\">\n            {props.max && <strong onClick={props.onMax}>MAX</strong>}\n            <button onClick={props.onClick}>\n              <div> {props.coinImage && <img src={props.coinImage} className=\"coin_Img\" />}\n                <strong style={{ fontSize: props.selectTokenText ? \"\" : \"\" }}>\n                  {props.value}\n                </strong></div>\n              <img className=\"selectDropDownStyle\" src={iconDropDown} />\n            </button>\n          </Col>\n        </Col>\n      </Row>\n    </Col>\n  );\n};\n\nexport default SelectCoin;\n","/data/nm/SaitaSwap/src/pages/Trade/ImportPool.js",["680","681","682","683","684","685","686","687","688","689","690","691","692","693","694","695","696","697","698","699"],"import React, { useEffect, useState } from \"react\";\nimport { Container, Col } from \"react-bootstrap\";\nimport ConnectWallet from \"../../components/ConnectWallet/ConnectWallet\";\nimport CardCustom from \"../../components/cardCustom/CardCustom\";\nimport ButtonPrimary from \"../../components/Button/Button\";\nimport SelectCoin from \"../../components/selectCoin/SelectCoin\";\nimport Plusicon from \"../../assets/images/plus_yellow.png\";\nimport NIOBIcon from \"../../assets/images/NIOB-Token-Icon.svg\";\nimport BNBIcon from \"../../assets/images/token_icons/WBNB-Token-Icon.svg\";\nimport ModalCurrency from \"../../components/Modal/ModalCurrency/ModalCurrency\";\nimport ButtonBack from \"../../components/buttonBack/ButtonBack\";\nimport \"./Trade.scss\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { MAIN_CONTRACT_LIST, TOKEN_LIST, WETH } from \"../../assets/tokens\";\nimport { ContractServices } from \"../../services/ContractServices\";\nimport { toast } from \"../../components/Toast/Toast\";\nimport { ExchangeService } from \"../../services/ExchangeService\";\nimport {\n  addLpToken,\n  addTransaction,\n  checkUserLpTokens,\n  searchTokenByNameOrAddress,\n  startLoading,\n  stopLoading,\n} from \"../../redux/actions\";\nimport Button from \"../../components/Button/Button\";\nimport { BigNumber } from \"bignumber.js\";\nimport SupplyModal from \"../../components/SupplyModal/SupplyModal\";\nimport RecentTransactions from \"../../components/RecentTransactions/RecentTransactions\";\nimport awesomePlus from \"../../assets/images/plus_yellow.png\";\nimport TokenBalance from \"./TokenBalance\";\nimport { Link } from \"react-router-dom\";\n\nconst AddLiquidity = (props) => {\n  const [show, setShow] = useState(false);\n  const handleClose = () => setShow(false);\n  const [show1, setShow1] = useState(false);\n  const handleClose1 = () => setShow1(false);\n  const handleShow1 = () => setShow1(true);\n\n  const handleShow = (value) => {\n    setShow(true);\n  };\n\n  const dispatch = useDispatch();\n  const isUserConnected = useSelector((state) => state.persist.isUserConnected);\n  const tokenList = useSelector((state) => state.persist.tokenList);\n\n  const [modalCurrency, setModalCurrency] = useState(false);\n  const [tokenOne, setTokenOne] = useState(TOKEN_LIST[0]);\n  const [tokenTwo, setTokenTwo] = useState({});\n  const [tokenOneCurrency, setCurrencyNameForTokenOne] = useState(\n    TOKEN_LIST[0].symbol\n  );\n  const [tokenTwoCurrency, setCurrencyNameForTokenTwo] =\n    useState(\"Select a currency\");\n  const [tokenOneValue, setTokenOneValue] = useState(0);\n  const [tokenTwoValue, setTokenTwoValue] = useState(0);\n\n  const [lpTokenBalance, setLpTokenBalance] = useState(0);\n  const [tokenType, setTokenType] = useState(\"TK1\");\n\n  const [search, setSearch] = useState(\"\");\n  const [filteredTokenList, setFilteredTokenList] = useState([]);\n\n  const [selectedCurrency, setSelectedCurrency] = useState(\"\");\n\n  const [currentPairAddress, setCurrentPairAddress] = useState(\"\");\n\n  useEffect(() => {\n    setFilteredTokenList(\n      tokenList.filter((token) =>\n        token.name.toLowerCase().includes(search.toLowerCase())\n      )\n    );\n  }, [search, tokenList, setTokenOne, setTokenTwo]);\n\n  const onHandleOpenModal = (tokenType) => {\n    if (!isUserConnected) {\n      return toast.error(\"Connect wallet first!\");\n    }\n    setShow(true);\n    setSelectedCurrency(\n      tokenType === \"TK1\" ? tokenTwoCurrency : tokenOneCurrency\n    );\n    setModalCurrency({ modalCurrency: true });\n    setTokenType(tokenType);\n  };\n  const onHandleSelectCurrency = async (token, selecting) => {\n    const { address, symbol } = token;\n    let pairName = \"\";\n    if (!isUserConnected) {\n      return toast.error(\"Connect wallet first!\");\n    }\n    let a1, a2;\n    if (selecting === \"TK1\") {\n      handleClose();\n      a1 = address;\n      setTokenOne(token);\n      setCurrencyNameForTokenOne(symbol);\n      pairName = `${symbol}/${tokenTwoCurrency} LP`;\n\n      if (tokenTwo.address) {\n        a2 = tokenTwo.address;\n      }\n    }\n    if (selecting === \"TK2\") {\n      handleClose();\n      a2 = address;\n      setTokenTwo(token);\n      setCurrencyNameForTokenTwo(symbol);\n      pairName = `${tokenOneCurrency}/${symbol} LP`;\n\n      if (tokenOne.address) {\n        a1 = tokenOne.address;\n      }\n    }\n    setModalCurrency(!modalCurrency);\n    setSearch(\"\");\n    setFilteredTokenList(tokenList);\n\n    if (a1 && a2) {\n      dispatch(startLoading());\n      let currentPairAddress;\n      if (a1 === \"BNB\") {\n        a1 = WETH; //WETH\n        currentPairAddress = await ExchangeService.getPair(a1, a2);\n      } else if (a2 === \"BNB\") {\n        a2 = WETH; //WETH\n        currentPairAddress = await ExchangeService.getPair(a1, a2);\n      } else {\n        currentPairAddress = await ExchangeService.getPair(a1, a2);\n      }\n      if (currentPairAddress !== \"0x0000000000000000000000000000000000000000\") {\n        console.log(\"currentPairAddress\", currentPairAddress);\n        const tk0 = await ExchangeService.getTokenZero(currentPairAddress);\n        const tk1 = await ExchangeService.getTokenOne(currentPairAddress);\n\n        const lpdata = {\n          pair: currentPairAddress,\n          decimals: 18,\n          name: \"Import LPs\",\n          pairName,\n          symbol: \"Anchor-LP\",\n          token0: tk0,\n          token1: tk1,\n        };\n\n        const result = await dispatch(addLpToken(lpdata));\n        if (result) {\n          console.log(\"this is the result\", result);\n          setLpTokenBalance(result.balance);\n          setCurrentPairAddress(currentPairAddress);\n          setTokenOneValue(result.token1Deposit);\n          setTokenTwoValue(result.token0Deposit);\n        }\n      } else {\n        setLpTokenBalance(0);\n        setCurrentPairAddress(\"\");\n        setTokenOneValue(0);\n        setTokenTwoValue(0);\n      }\n      dispatch(stopLoading());\n    }\n  };\n\n  const handleSearchToken = async (data) => {\n    try {\n      const res = await dispatch(searchTokenByNameOrAddress(data));\n      setFilteredTokenList(res);\n    } catch (error) {\n      toast.error(\"Something went wrong!\");\n    }\n  };\n\n  return (\n    <>\n      <Container fluid className=\"swapScreen comnSection\">\n        <CardCustom>\n          <div className=\"text-center settingSec d-block\">\n            <ButtonBack />\n            <h4 className=\"text-center\">Import Pool</h4>\n          </div>\n          <button\n            className=\"importpoolbox\"\n            onClick={() => onHandleOpenModal(\"TK1\")}\n          >\n            <img src={tokenOne.icon} alt=\"icon\" />{\" \"}\n            <span>{tokenOne.symbol}</span>\n          </button>\n          <div className=\"Col btnSwap text-center\">\n            <img src={awesomePlus} alt=\"icon\" />\n          </div>\n          <button\n            className=\"importpoolbox\"\n            onClick={() => onHandleOpenModal(\"TK2\")}\n          >\n            {tokenTwo.address ? (\n              <>\n                <img src={tokenTwo?.icon} alt=\"icon\" />\n                <span>{tokenTwo?.symbol}</span>\n              </>\n            ) : (\n              <span>Select a Token</span>\n            )}\n          </button>\n          {tokenOne.address && tokenTwo.address ? (\n            currentPairAddress ? (\n              <div className=\"importpooldetails\">\n                <p>Pool Found!</p>\n                <h4>LP TOKENS IN YOUR WALLET</h4>\n                <ul>\n                  <li>\n                    <span>\n                      <img src={tokenOne.icon} alt=\"icon\" />{\" \"}\n                      <img src={tokenTwo.icon} alt=\"icon\" /> {tokenOne.symbol}/\n                      {tokenTwo?.symbol}\n                    </span>{\" \"}\n                    <span>{lpTokenBalance?.toFixed(12)}</span>\n                  </li>\n                  <br />\n                  <li>\n                    {tokenOne.symbol}: {tokenOneValue}\n                  </li>{\" \"}\n                  <br />\n                  <li>\n                    {tokenTwo?.symbol}: {tokenTwoValue}\n                  </li>{\" \"}\n                  <br />\n                </ul>\n              </div>\n            ) : (\n              <div className=\"importpooldetails\">\n                <p style={{ textAlign: \"center\" }}>No pool found</p>\n                {/* <p>\n                                    <Link to=\"#\" onClick={() => props.addBtn()}>Create pool</Link>\n                                </p> */}\n                <br />\n              </div>\n            )\n          ) : (\n            <div className=\"importpooldetails\">\n              <p>Select a token to find your liquidity.</p>\n              <br />\n            </div>\n          )}\n        </CardCustom>\n      </Container>\n      <ModalCurrency\n        show={show}\n        handleShow={handleShow}\n        searchToken={handleSearchToken}\n        handleClose={handleClose}\n        tokenList={filteredTokenList}\n        searchByName={setSearch}\n        selectCurrency={onHandleSelectCurrency}\n        currencyName={selectedCurrency}\n        tokenType={tokenType}\n      />\n    </>\n  );\n};\n\nexport default AddLiquidity;\n","/data/nm/SaitaSwap/src/components/Modal/SettingModal/SettingModal.js",[],"/data/nm/SaitaSwap/src/pages/Trade/Liquidity.js",["700","701","702","703","704","705","706","707"],"import React, { useEffect, useState } from \"react\";\nimport { Container, Col, Accordion } from \"react-bootstrap\";\nimport CardCustom from \"../../components/cardCustom/CardCustom\";\nimport ButtonPrimary from \"../../components/Button/Button\";\nimport SettingIcon from \"../../assets/images/Settings-Icon.svg\";\nimport TimerIcon from \"../../assets/images/ionic-ios-timer.svg\";\n\nimport Plusicon from \"../../assets/images/plus_ico.png\";\nimport SettingModal from \"../../components/Modal/SettingModal/SettingModal\";\nimport { Link } from \"react-router-dom\";\nimport ButtonLink from \"../../components/buttonLink/ButtonLink\";\nimport \"./Trade.scss\";\nimport RemoveLiquidity from \"../../components/Modal/RemoveLiquidity/RemoveLiquidity\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getUserLPTokens } from \"../../redux/actions\";\nimport RecentTransactions from \"../../components/RecentTransactions/RecentTransactions\";\nimport TokenBalance from \"./TokenBalance\";\n\nconst Liquidity = ({ handleAddLiquidity, handleRemove }) => {\n  const [settingShow, setsettingShow] = useState(false);\n  const settingClose = () => setsettingShow(false);\n  const settinghandleShow = () => setsettingShow(true);\n  // remove liquidity\n  const [removeShow, setremoveShow] = useState(false);\n  const removeClose = () => setremoveShow(false);\n  const removehandleShow = () => setremoveShow(true);\n\n  const dispatch = useDispatch();\n  const isUserConnected = useSelector((state) => state.persist.isUserConnected);\n  const userLpTokens = useSelector((state) => state.persist.userLpTokens);\n\n  const [showSettings, setShowSettings] = useState(false);\n  const [currentIndex, setCurrentIndex] = useState(-1);\n  const [showRecent, setShowRecent] = useState(false);\n  const recentTransactionsClose = () => setShowRecent(false);\n\n  const [lptoken, setLptoken] = useState(null);\n\n  const handleCloseSettings = () => setShowSettings(false);\n  const handleCloseRecent = () => setShowRecent(false);\n\n  const init = async () => {\n    if (isUserConnected) {\n      await dispatch(getUserLPTokens());\n    }\n  };\n\n  useEffect(() => {\n    init();\n  }, [isUserConnected]);\n\n  const toggleDropdwon = (index) => {\n    if (currentIndex === index) {\n      setCurrentIndex(-1);\n    } else {\n      setCurrentIndex(index);\n    }\n  };\n  console.log(\"userLpTokens\", userLpTokens);\n  return (\n    <>\n      <Container fluid className=\"swapScreen comnSection add_lq_box\">\n        <CardCustom>\n          <div className=\"settingSec\">\n            <div className=\"in_title\">\n              <h4>Liquidity</h4>\n              <p className=\"mb-0\">Add liquidity to receive LP tokens</p>\n            </div>\n            <div className=\"settingIcon\">\n              <img\n                src={TimerIcon}\n                onClick={() => setShowRecent(true)}\n                className=\"timerImg\"\n              />\n              <img src={SettingIcon} onClick={() => settinghandleShow(true)} />\n            </div>\n          </div>\n\n          <div className=\"add_liq text-center\">\n            <ButtonLink\n              title=\"Add Liquidity\"\n              className=\"add_liquidity_btn\"\n              icon={Plusicon}\n              link=\"/trade/liquidity/addLiquidity\"\n            />\n          </div>\n          <div className=\"settingSec d-block mb-0\">\n            <div className=\"in_title\">\n              <h4>Your Liquidity</h4>\n            </div>\n          </div>\n          {!isUserConnected ? (\n            <div className=\"liquidity_list\">\n              <h3>Connect a wallet to view your liquidity</h3>\n            </div>\n          ) : userLpTokens.length > 0 ? (\n            <>\n              {userLpTokens.map((lp, index) => (\n                <Accordion\n                  defaultActiveKey={index}\n                  className=\"yourLiq_accordian\"\n                >\n                  <Accordion.Item eventKey=\"0\">\n                    <Accordion.Header>\n                      {lp.pairName} <span className=\"ms-auto\">Manage</span>\n                    </Accordion.Header>\n                    <Accordion.Body>\n                      <div className=\"amountDiv\">\n                        <ul className=\"text-start\">\n                          <li>Your total pool tokens:</li>\n                          <li>Pooled {lp.token0Obj.symbol}:</li>\n                          <li>Pooled {lp.token1Obj.symbol}:</li>\n                          <li>Your pool share:</li>\n                        </ul>\n                        <ul className=\"text-end\">\n                          <li>{lp.balance.toFixed(10)}</li>\n                          <li>{lp.token0Deposit.toFixed(5)}</li>\n                          <li>{lp.token1Deposit.toFixed(5)}</li>\n                          <li>{lp.poolShare}%</li>\n                        </ul>\n                      </div>\n                      <div className=\"remove_liq d-flex text-center mb-2\">\n                        <ButtonPrimary\n                          title=\"Add Liquidity\"\n                          className=\"remove_liq_btn w-50 me-2\"\n                          // onClick={() =>  removehandleShow(true)}\n                          onClick={() => handleAddLiquidity(lp)}\n                          style={{\n                            display: \"inline\",\n                            marginLeft: \"6px\",\n                            marginRight: \"162px\",\n                          }}\n                        />\n                        <ButtonPrimary\n                          title=\"Remove Liquidity\"\n                          className=\"remove_liq_btn w-50 ms-2\"\n                          onClick={() => {\n                            setLptoken(lp);\n                            removehandleShow();\n                          }}\n                          style={{\n                            display: \"inline\",\n                            padding: \"2px 7px 3px 6px\",\n                          }}\n                        />\n                      </div>\n                    </Accordion.Body>\n                  </Accordion.Item>\n                </Accordion>\n              ))}\n            </>\n          ) : (\n            <div className=\"liquidity_list text-center\">\n              <h3>No Liquidity found.</h3>\n            </div>\n          )}\n\n          <Col className=\"tokeninfo\">\n            <p>\n              Don't see a pool you joined?{\" \"}\n              <Link to={\"/trade/liquidity/importPool\"}>import it.</Link>\n            </p>\n            <p>\n              Or, if you staked your LP tokens in a farm, unstake them to see\n              them here.\n            </p>\n          </Col>\n        </CardCustom>\n      </Container>\n      <SettingModal\n        show={settingShow}\n        handleShow={settinghandleShow}\n        handleClose={settingClose}\n      />\n      <RemoveLiquidity\n        lptoken={lptoken}\n        show={removeShow}\n        handleShow={removehandleShow}\n        handleClose={removeClose}\n      />\n      <RecentTransactions\n        show={showRecent}\n        handleClose={recentTransactionsClose}\n      />\n    </>\n  );\n};\n\nexport default Liquidity;\n","/data/nm/SaitaSwap/src/components/Modal/ModalCurrency/ModalCurrency.js",["708","709","710","711"],"import React, { useEffect, useState } from \"react\";\nimport { Col, Row, Modal } from \"react-bootstrap\";\nimport \"./ModalCurrencyStyle.scss\";\nimport CoinItem from \"../../coinItem/CoinItem\";\nimport { useDispatch } from \"react-redux\";\nimport { tokenListAdd, tokenListDel } from \"../../../redux/actions\";\n\nconst ModalCurrency = ({\n  show,\n  handleClose,\n  tokenList,\n  searchByName,\n  searchToken,\n  selectCurrency,\n  tokenType,\n  currencyName,\n}) => {\n  const dispatch = useDispatch();\n  const [values, setValues] = useState({ tokenSearch: \"\" });\n\n  // Set Token Search Input Value and Pass to Parent Component (Add Liquidity)\n  const handleChange = (e, name) => {\n    searchByName(e.target.value);\n    setValues({ ...values, [name]: e.target.value });\n  };\n\n  const [isAdded, setTokenAdd] = useState(true);\n  const handleTokenList = (data) => {\n    data.isAdd = false;\n    data.isDel = true;\n    dispatch(tokenListAdd(data));\n    setTokenAdd(false);\n  };\n  const handleRemoveTokenList = async (data) => {\n    dispatch(tokenListDel(data));\n    searchByName(\"\");\n    window.location.reload();\n  };\n\n  useEffect(() => {\n    if (!show) {\n      setValues({ tokenSearch: \"\" });\n    }\n    return () => {\n      // cleanup function here\n    };\n  }, [show, searchByName]);\n  return (\n    <Modal\n      scrollable={true}\n      className=\"selectCurrency_modal\"\n      show={show}\n      onHide={handleClose}\n      centered\n    >\n      <Modal.Header closeButton>\n        <Modal.Title>Select a Token</Modal.Title>\n      </Modal.Header>\n      <Row>\n        <Col>\n          <div className=\"gradiantWrap\">\n            <input\n              className=\"searchInput_Style\"\n              placeholder=\"Search name or paste address\"\n              name=\"tokenSearch\"\n              onChange={(e) => searchToken(e.target.value)}\n              onPaste={(e) => searchToken(e.target.value)}\n            />\n          </div>\n          <div className=\"tokenName\">\n            <h4>Token Name</h4>\n            <hr />\n          </div>\n        </Col>\n      </Row>\n\n      <Modal.Body>\n        <Row className=\"coinListBlockStyle\">\n          {tokenList && tokenList?.length ? (\n            tokenList.map((token, index) => (\n              <Col key={index}>\n                {currencyName === token?.symbol ? (\n                  <CoinItem\n                    className=\"active\"\n                    iconImage={token.icon}\n                    title={token.name}\n                    tokenDetails={token}\n                  />\n                ) : (\n                  <CoinItem\n                    onClick={() => selectCurrency(token, tokenType)}\n                    iconImage={token?.icon}\n                    title={token?.name}\n                    tokenDetails={token}\n                  />\n                )}\n              </Col>\n            ))\n          ) : (\n            <div className=\"\">No results found.</div>\n          )}\n        </Row>\n      </Modal.Body>\n    </Modal>\n  );\n};\n\nexport default ModalCurrency;\n","/data/nm/SaitaSwap/src/pages/Trade/Exchange.js",["712","713","714","715","716","717","718","719","720","721","722","723","724","725","726","727","728","729","730","731","732","733","734","735","736","737","738","739","740","741","742","743","744","745","746","747","748","749"],"import React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Container, Col, Tabs, Tab } from \"react-bootstrap\";\nimport ConnectWallet from \"../../components/ConnectWallet/ConnectWallet\";\nimport CardCustom from \"../../components/cardCustom/CardCustom\";\nimport ButtonPrimary from \"../../components/Button/Button\";\nimport SelectCoin from \"../../components/selectCoin/SelectCoin\";\nimport SwapModal from \"../../components/SwapModal/SwapModal\";\nimport ArrowDown from \"../../assets/images/Arrow-Down-Icon.svg\";\nimport SettingIcon from \"../../assets/images/Settings-Icon.svg\";\nimport NIOBIcon from \"../../assets/images/NIOB-Token-Icon.svg\";\nimport BNBIcon from \"../../assets/images/token_icons/WBNB-Token-Icon.svg\";\nimport SwitchIcon from \"../../assets/images/Switch-Icon.svg\";\nimport ModalCurrency from \"../../components/Modal/ModalCurrency/ModalCurrency\";\nimport \"./Trade.scss\";\nimport SettingModal from \"../../components/Modal/SettingModal/SettingModal\";\nimport {\n  MAIN_CONTRACT_LIST,\n  TOKEN_LIST,\n  WETH,\n  LIQUIDITY_PROVIDER_FEE,\n  USD,\n  Saitama,\n} from \"../../assets/tokens\";\nimport defaultImg from \"../../assets/images/token_icons/default.svg\";\nimport { ContractServices } from \"../../services/ContractServices\";\nimport { toast } from \"../../components/Toast/Toast\";\nimport { ExchangeService } from \"../../services/ExchangeService\";\nimport { BigNumber } from \"bignumber.js\";\nimport {\n  searchTokenByNameOrAddress,\n  addTransaction,\n  startLoading,\n  stopLoading,\n} from \"../../redux/actions\";\nimport Button from \"../../components/Button/Button\";\nimport RecentTransactions from \"../../components/RecentTransactions/RecentTransactions\";\nimport TransactionalModal from \"../../components/TransactionalModal/TransactionalModal\";\nimport iconTimer from \"../../assets/images/ionic-ios-timer.svg\";\n\nconst Exchange = (props) => {\n  const [show, setShow] = useState(false);\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n  const [show1, setShow1] = useState(false);\n  const handleClose1 = () => setShow1(false);\n  const handleShow1 = () => setShow1(true);\n  const [settingShow, setsettingShow] = useState(false);\n  const settingClose = () => setsettingShow(false);\n  const settinghandleShow = () => setsettingShow(true);\n  const [classToggle, setClassToggle] = useState(false);\n\n  const dispatch = useDispatch();\n\n  const isUserConnected = useSelector((state) => state.persist.isUserConnected);\n  const tokenList = useSelector((state) => state.persist.tokenList);\n  const deadline = useSelector((state) => state.persist.deadline);\n  const slippagePercentage = useSelector(\n    (state) => state.persist.slippagePercentage\n  );\n\n  const [modalCurrency, setModalCurrency] = useState(false);\n  const [tokenOne, setTokenOne] = useState(TOKEN_LIST[0]);\n  const [tokenTwo, setTokenTwo] = useState({});\n  const [tokenOneValue, setTokenOneValue] = useState();\n  const [tokenTwoValue, setTokenTwoValue] = useState();\n  const [sharePoolValue, setSharePoolValue] = useState(100);\n  const [tokenOneCurrency, setCurrencyNameForTokenOne] = useState(\n    TOKEN_LIST[0].symbol\n  );\n  const [tokenTwoCurrency, setCurrencyNameForTokenTwo] =\n    useState(\"Select a token\");\n  const [tokenOneBalance, setTokenOneBalance] = useState(0);\n  const [tokenTwoBalance, setTokenTwoBalance] = useState(0);\n  const [tokenOneApproval, setTokenOneApproval] = useState(false);\n  const [tokenTwoApproval, setTokenTwoApproval] = useState(false);\n\n  const [tokenOneApproved, setTokenOneApproved] = useState(false);\n  const [tokenTwoApproved, setTokenTwoApproved] = useState(false);\n\n  const [lpTokenBalance, setLpTokenBalance] = useState(0);\n  const [tokenType, setTokenType] = useState(\"TK1\");\n  const [showSupplyModal, setShowSupplyModal] = useState(false);\n\n  const [search, setSearch] = useState(\"\");\n  const [filteredTokenList, setFilteredTokenList] = useState([]);\n  const [liquidityConfirmation, setLiquidityConfirmation] = useState(false);\n\n  const [selectedCurrency, setSelectedCurrency] = useState(\"\");\n\n  const [currentPairAddress, setCurrentPairAddress] = useState(\"\");\n  const [firstProvider, setFirstProvider] = useState(false);\n  const [showPoolShare, setShowPoolShare] = useState(false);\n  const [showTransactionModal, setShowTransactionModal] = useState(false);\n  const [txHash, setTxHash] = useState(\"\");\n  const [walletShow, setWalletShow] = useState(false);\n\n  const [showSettings, setShowSettings] = useState(false);\n  const [showRecent, setShowRecent] = useState(false);\n  const [slippageTolerance, setSlippageTolerance] = useState(\"\");\n  const [amountIn, setAmountIn] = useState(\"\");\n  const [isDisabled, setDisabled] = useState(true);\n  const [btnText, setBtnText] = useState(\"Enter an amount\");\n  const [approvalConfirmation, setApprovalConfirmation] = useState(false);\n  const [openSwapModal, setSwapModal] = useState(false);\n  const [priceImpact, setPriceImpact] = useState(\"\");\n  const [minimumReceived, setMinReceived] = useState(0);\n  const [existingPair, setPairAddress] = useState([]);\n  const [tokenOneIcon, setTokenOneIcon] = useState(TOKEN_LIST[0].icon);\n  const [tokenTwoIcon, setTokenTwoIcon] = useState(defaultImg);\n  const [max, setMax] = useState(true);\n\n  useEffect(() => {\n    setFilteredTokenList(\n      tokenList?.filter((token) =>\n        token?.name.toLowerCase().includes(search.toLowerCase())\n      )\n    );\n    init();\n  }, [search, tokenList]);\n\n  useEffect(() => {\n    if (tokenOneValue) {\n      handleTokenValue(tokenOneValue, \"TK1\");\n    }\n  }, [tokenTwo, tokenTwoCurrency, tokenTwoBalance, tokenTwoIcon]);\n\n  const init = async () => {\n    if (isUserConnected) {\n      const oneBalance = await ContractServices.getBNBBalance(isUserConnected);\n      setTokenOneBalance(oneBalance);\n    }\n  };\n\n  const onHandleOpenModal = (tokenType) => {\n    if (!isUserConnected) {\n      return toast.error(\"Connect wallet first!\");\n    }\n    setFilteredTokenList(tokenList);\n    setSelectedCurrency(\n      tokenType === \"TK1\" ? tokenTwoCurrency : tokenOneCurrency\n    );\n    setModalCurrency({\n      modalCurrency: true,\n    });\n    setTokenType(tokenType);\n  };\n  const onHandleSelectCurrency = async (token, selecting) => {\n    const { address, symbol, icon } = token;\n    if (!isUserConnected) {\n      return toast.error(\"Connect wallet first!\");\n    }\n    let a1,\n      a2,\n      oneBalance = 0,\n      twoBalance = 0;\n    if (selecting === \"TK1\") {\n      a1 = address;\n      if (address === \"BNB\") {\n        oneBalance = await ContractServices.getBNBBalance(isUserConnected);\n        setTokenOneApproved(true);\n      } else {\n        setTokenOneApproved(false);\n        oneBalance = await ContractServices.getTokenBalance(\n          address,\n          isUserConnected\n        );\n      }\n      setTokenOne(token);\n      setCurrencyNameForTokenOne(symbol);\n      setTokenOneBalance(oneBalance);\n      setTokenOneIcon(icon);\n      setTokenOneValue(0.0);\n      setTokenTwoValue(0.0);\n      setMax(true);\n      if (tokenTwo.address) {\n        a2 = tokenTwo.address;\n      }\n      if (tokenOneValue > 0) {\n        const r = await getAllowance(tokenOneValue, \"TK1\");\n      }\n    }\n    if (selecting === \"TK2\") {\n      a2 = address;\n      if (address === \"BNB\") {\n        setTokenTwoApproved(true);\n        twoBalance = await ContractServices.getBNBBalance(isUserConnected);\n      } else {\n        setTokenTwoApproved(false);\n        twoBalance = await ContractServices.getTokenBalance(\n          address,\n          isUserConnected\n        );\n      }\n      setTokenTwo(token);\n      setCurrencyNameForTokenTwo(symbol);\n      setTokenTwoBalance(twoBalance);\n      setTokenTwoIcon(icon);\n      setTokenOneValue(0.0);\n      setTokenTwoValue(0.0);\n      if (tokenOne.address) {\n        a1 = tokenOne.address;\n      }\n      if (tokenTwoValue > 0) {\n        const r = await getAllowance(tokenTwoValue, \"TK2\");\n      }\n    }\n    setModalCurrency(!modalCurrency);\n    setSearch(\"\");\n    setFilteredTokenList(tokenList);\n\n    if (a1 && a2) {\n      let currentPairAddress;\n      if (a1 === \"BNB\") {\n        a1 = WETH; //WETH\n        currentPairAddress = await ExchangeService.getPair(a1, a2);\n      } else if (a2 === \"BNB\") {\n        a2 = WETH; //WETH\n        currentPairAddress = await ExchangeService.getPair(a1, a2);\n      } else {\n        currentPairAddress = await ExchangeService.getPair(a1, a2);\n      }\n\n      if (currentPairAddress !== \"0x0000000000000000000000000000000000000000\") {\n        setCurrentPairAddress(currentPairAddress);\n        const lpTokenBalance = await ContractServices.getTokenBalance(\n          currentPairAddress,\n          isUserConnected\n        );\n        setLpTokenBalance(lpTokenBalance);\n        setFirstProvider(false);\n        setShowPoolShare(true);\n        setBtnText(\"Enter an amount\");\n        setDisabled(true);\n      } else {\n        setCurrentPairAddress(\"\");\n        setFirstProvider(true);\n        setShowPoolShare(true);\n        setLpTokenBalance(0);\n        setDisabled(true);\n        setBtnText(\"Insufficient liquidity for this trade.\");\n      }\n    }\n  };\n\n  const getAllowance = async (amount, tokenType) => {\n    if (tokenType === \"TK1\") {\n      if (isUserConnected && tokenOne.address !== \"BNB\") {\n        let allowance = await ContractServices.allowanceToken(\n          tokenOne.address,\n          MAIN_CONTRACT_LIST.router.address,\n          isUserConnected\n        );\n        allowance = Number(allowance) / 10 ** Number(tokenOne.decimals);\n        if (amount > allowance) {\n          setTokenOneApproval(true);\n        } else {\n          setTokenOneApproved(true);\n        }\n      } else {\n        setTokenOneApproved(true);\n      }\n    }\n    if (tokenType === \"TK2\") {\n      if (isUserConnected && tokenTwo.address !== \"BNB\") {\n        let allowance = await ContractServices.allowanceToken(\n          tokenTwo.address,\n          MAIN_CONTRACT_LIST.router.address,\n          isUserConnected\n        );\n        allowance = Number(allowance) / 10 ** Number(tokenTwo.decimals);\n        if (amount > allowance) {\n          setTokenTwoApproval(true);\n        } else {\n          setTokenTwoApproved(true);\n        }\n      } else {\n        setTokenTwoApproved(true);\n      }\n    }\n    return true;\n  };\n  const handleMaxBalance = async (amountIn) => {\n    if (!isUserConnected) {\n      return toast.error(\"Connect wallet first!\");\n    }\n    if (tokenOne.address === \"BNB\") {\n      // .002 BNB is reserved for saving gas fee\n      const bnbBalance =\n        (await ContractServices.getBNBBalance(isUserConnected)) - 0.1;\n      handleTokenValue(bnbBalance, amountIn);\n      setMax(false);\n    } else {\n      // __ amount of particular token must be reserved for saving -needs to be fixed\n      const tokenBalance = await ContractServices.getTokenBalance(\n        tokenOne.address,\n        isUserConnected\n      );\n      handleTokenValue(tokenBalance, amountIn);\n      setMax(false);\n    }\n  };\n\n  const checkPairWithBNBOrUSDT = async (token1, token2) => {\n    // const pOne = await ExchangeService.getPair(token1, Saitama);\n    // const pTwo = await ExchangeService.getPair(token2, Saitama);\n    // if (\n    //   pOne !== \"0x0000000000000000000000000000000000000000\" &&\n    //   pTwo !== \"0x0000000000000000000000000000000000000000\"\n    // ) {\n    //   return [token1, Saitama, token2];\n    // }\n    // const pair1 = await ExchangeService.getPair(token1, WETH);\n    // const pair2 = await ExchangeService.getPair(token2, WETH);\n    // if (\n    //   pair1 !== \"0x0000000000000000000000000000000000000000\" &&\n    //   pair2 !== \"0x0000000000000000000000000000000000000000\"\n    // ) {\n    //   return [token1, WETH, token2];\n    // }\n    // const pairOne = await ExchangeService.getPair(token1, USD);\n    // const pairTwo = await ExchangeService.getPair(token2, USD);\n    // if (\n    //   pairOne !== \"0x0000000000000000000000000000000000000000\" &&\n    //   pairTwo !== \"0x0000000000000000000000000000000000000000\"\n    // ) {\n    //   return [token1, USD, token2];\n    // }\n    const pOne = await ExchangeService.getPair(token1, Saitama);\n    const pTwo = await ExchangeService.getPair(token2, Saitama);\n    const pair1 = await ExchangeService.getPair(token1, WETH);\n    const pair2 = await ExchangeService.getPair(token2, WETH);\n    const pairOne = await ExchangeService.getPair(token1, USD);\n    const pairTwo = await ExchangeService.getPair(token2, USD);\n    console.log(\"pOne\", pOne, \"pTwo\", pTwo, \"pair1\", pair1, \"pair2\", pair2);\n    if (\n      pOne !== \"0x0000000000000000000000000000000000000000\" &&\n      pTwo !== \"0x0000000000000000000000000000000000000000\"\n    ) {\n      alert(\"saitama\");\n      return [token1, Saitama, token2];\n    } else if (\n      pair1 !== \"0x0000000000000000000000000000000000000000\" &&\n      pair2 !== \"0x0000000000000000000000000000000000000000\"\n    ) {\n      alert(\"weth\");\n      return [token1, WETH, token2];\n    }\n\n    return false;\n  };\n\n  const handleTokenValue = async (amount, tokenType) => {\n    try {\n      if (!isUserConnected) {\n        return;\n      }\n      // if (\n      //   tokenOne.address.toLowerCase() !==\n      //     TOKEN_LIST[0].address.toLowerCase() &&\n      //   tokenOne.address.toLowerCase() !==\n      //     TOKEN_LIST[1].address.toLowerCase() &&\n      //   tokenTwo.address.toLowerCase() !==\n      //     TOKEN_LIST[0].address.toLowerCase() &&\n      //   tokenTwo.address.toLowerCase() !== TOKEN_LIST[1].address.toLowerCase()\n      // ) {\n      //   toast.error(\"One token should be either Eth or Saitama\");\n      //   return;\n      // }\n      // const acc = await ContractServices.getDefaultAccount();\n\n      const acc = isUserConnected;\n      console.log(\"ASDAC\", acc);\n      if (acc && acc.toLowerCase() !== isUserConnected.toLowerCase()) {\n        return toast.error(\"Wallet address doesn`t match!\");\n      }\n      let add1ForPriceImpact, add2ForPriceImpact;\n      if (tokenType === \"TK1\") {\n        setTokenOneValue(amount);\n        if (tokenTwoCurrency === \"Select a token\") {\n          setBtnText(\"Select token\");\n          return;\n        }\n        const balance = await checkTokenORCurrencyBalance(tokenOne.address);\n        if (amount > balance) {\n          setDisabled(true);\n          setBtnText(`Insufficient ${tokenOne.symbol} balance`);\n          return;\n        }\n        setDisabled(false);\n        const r = await getAllowance(amount, tokenType);\n        if (r && tokenOne.address && tokenTwo.address && amount > 0) {\n          let tokenTwoAddress = tokenTwo.address;\n          let tokenOneAddress = tokenOne.address;\n\n          if (tokenTwo.address === \"BNB\") {\n            tokenTwoAddress = WETH;\n          }\n          if (tokenOne.address === \"BNB\") {\n            tokenOneAddress = WETH;\n          }\n          let result;\n          let isPriceImpact = false;\n          const checkPair = await ExchangeService.getPair(\n            tokenOneAddress,\n            tokenTwoAddress\n          );\n          if (checkPair !== \"0x0000000000000000000000000000000000000000\") {\n            console.log(\"checkPair\", checkPair);\n            // alert(\"c\");\n            console.log(\n              \"tokenOneAddress\",\n              tokenOneAddress,\n              \"tokenTwoAddress\",\n              tokenTwoAddress,\n              \"amount\",\n              amount\n            );\n            result = await ExchangeService.getAmountsOut(amount, [\n              tokenOneAddress,\n              tokenTwoAddress,\n            ]);\n            add1ForPriceImpact = tokenOneAddress;\n            add2ForPriceImpact = tokenTwoAddress;\n          } else {\n            alert(\"in for pair\");\n            const pair = await checkPairWithBNBOrUSDT(\n              tokenOneAddress,\n              tokenTwoAddress\n            );\n            console.log(\"pair\", pair);\n            if (pair) {\n              if (!result) {\n                alert(\"x\");\n                try {\n                  result = await ExchangeService.getAmountsOut(amount, pair);\n\n                  add1ForPriceImpact = pair[0];\n                  add2ForPriceImpact = pair[1];\n                  isPriceImpact = true;\n                } catch (err) {\n                  console.log(\"this iiiiii\", err);\n                }\n              }\n            }\n          }\n          console.log(\"resultresultresult\", result);\n          if (result?.length > 0) {\n            const a = Number(result[result.length - 1].toFixed(5));\n            const ratio = Number(amount) / Number(a);\n            setSharePoolValue(ratio.toFixed(10));\n            setTokenTwoValue(a);\n            setAmountIn(\"TK1\");\n            let amountOut = BigNumber(a * 10 ** tokenTwo.decimals).toFixed();\n            const minimumReceived =\n              Number(amountOut) -\n              (Number(amountOut) * slippagePercentage) / 100;\n            setMinReceived(minimumReceived);\n            calculatePriceImpact(\n              tokenType,\n              amount,\n              add1ForPriceImpact,\n              add2ForPriceImpact,\n              isPriceImpact\n            );\n          }\n        }\n      }\n      if (tokenType === \"TK2\") {\n        setTokenTwoValue(amount);\n        if (tokenOneCurrency === \"Select a token\") {\n          setBtnText(\"Select token\");\n          return;\n        }\n        const balance = await checkTokenORCurrencyBalance(tokenTwo.address);\n        if (amount > balance) {\n          setDisabled(true);\n          setBtnText(`Insufficient ${tokenTwo.symbol} balance`);\n          return;\n        }\n        setDisabled(false);\n        const r = await getAllowance(amount, tokenType);\n        if (r && tokenOne.address && tokenTwo.address && amount > 0) {\n          let tokenTwoAddress = tokenTwo.address;\n          let tokenOneAddress = tokenOne.address;\n\n          if (tokenTwo.address === \"BNB\") {\n            tokenTwoAddress = WETH;\n          }\n          if (tokenOne.address === \"BNB\") {\n            tokenOneAddress = WETH;\n          }\n          let result;\n          let isPriceImpact = false;\n          const checkPair = await ExchangeService.getPair(\n            tokenTwoAddress,\n            tokenOneAddress\n          );\n          if (checkPair !== \"0x0000000000000000000000000000000000000000\") {\n            result = await ExchangeService.getAmountsIn(amount, [\n              tokenOneAddress,\n              tokenTwoAddress,\n            ]);\n            add1ForPriceImpact = tokenOneAddress;\n            add2ForPriceImpact = tokenTwoAddress;\n          } else {\n            const pair = await checkPairWithBNBOrUSDT(\n              tokenTwoAddress,\n              tokenOneAddress\n            );\n            if (pair) {\n              result = await ExchangeService.getAmountsIn(amount, pair);\n              add1ForPriceImpact = pair[0];\n              add2ForPriceImpact = pair[1];\n              isPriceImpact = true;\n            }\n          }\n          if (result) {\n            const a = Number(result).toFixed(9);\n            setTokenOneValue(a);\n            const ratio = Number(amount) / Number(a);\n            setSharePoolValue(ratio.toFixed(10));\n            setAmountIn(\"TK2\");\n            let amountOut = BigNumber(a * 10 ** tokenTwo.decimals).toFixed();\n            const minimumReceived =\n              Number(amountOut) -\n              (Number(amountOut) * slippagePercentage) / 100;\n            setMinReceived(minimumReceived);\n            await calculatePriceImpact(\n              tokenType,\n              a,\n              add2ForPriceImpact,\n              add1ForPriceImpact,\n              isPriceImpact\n            );\n          }\n        }\n      }\n      if (tokenOne.address && tokenTwo.address) {\n        let a1 = add1ForPriceImpact,\n          a2 = add2ForPriceImpact;\n        let currentPairAddress;\n        if (a1 === \"BNB\") {\n          a1 = WETH; //WETH\n          currentPairAddress = await ExchangeService.getPair(a1, a2);\n        } else if (a2 === \"BNB\") {\n          a2 = WETH; //WETH\n          currentPairAddress = await ExchangeService.getPair(a1, a2);\n        } else {\n          currentPairAddress = await ExchangeService.getPair(a1, a2);\n        }\n        if (\n          currentPairAddress !== \"0x0000000000000000000000000000000000000000\"\n        ) {\n          setCurrentPairAddress(currentPairAddress);\n          const lpTokenBalance = await ContractServices.getTokenBalance(\n            currentPairAddress,\n            isUserConnected\n          );\n          setLpTokenBalance(lpTokenBalance);\n          //const reserves = await ExchangeService.getReserves(currentPairAddress);\n          //setSharePoolValue(ratio.toFixed(2));\n          setFirstProvider(false);\n          setShowPoolShare(true);\n          setDisabled(false);\n        } else {\n          setCurrentPairAddress(\"\");\n          setFirstProvider(true);\n          setShowPoolShare(true);\n          setLpTokenBalance(0);\n          setDisabled(true);\n        }\n      }\n    } catch (e) {\n      console.log(e);\n      toast.error(\"Something went wrong!\");\n    }\n  };\n\n  const calculatePriceImpact = async (\n    tokenType,\n    amount,\n    a1,\n    a2,\n    isPriceImpact\n  ) => {\n    let calPriceImpact;\n    let priceImpact;\n\n    const currentPairAddress = await ExchangeService.getPair(a1, a2);\n    const reserve = await ExchangeService.getReserves(currentPairAddress);\n    const tokenZero = await ExchangeService.getTokenZero(currentPairAddress);\n    const tokenOne = await ExchangeService.getTokenOne(currentPairAddress);\n    const decimalZero = await ContractServices.getDecimals(tokenZero);\n    const decimalOne = await ContractServices.getDecimals(tokenOne);\n    if (tokenZero.toLowerCase() === a1.toLowerCase()) {\n      const res = Number(reserve[0]) / 10 ** decimalZero;\n\n      calPriceImpact = (amount / res) * 100;\n      priceImpact =\n        calPriceImpact - (calPriceImpact * LIQUIDITY_PROVIDER_FEE) / 100;\n      if (isPriceImpact) {\n        Number(priceImpact * 2);\n      }\n      setPriceImpact(priceImpact.toFixed(5));\n    }\n    if (tokenOne.toLowerCase() === a1.toLowerCase()) {\n      const res = Number(reserve[1]) / 10 ** decimalOne;\n\n      calPriceImpact = (amount / res) * 100;\n      priceImpact =\n        calPriceImpact - (calPriceImpact * LIQUIDITY_PROVIDER_FEE) / 100;\n      if (isPriceImpact) {\n        Number(priceImpact * 2);\n      }\n      setPriceImpact(priceImpact.toFixed(5));\n    }\n  };\n\n  const handleSearchToken = async (data) => {\n    try {\n      const res = await dispatch(searchTokenByNameOrAddress(data));\n      setFilteredTokenList(res);\n    } catch (error) {\n      toast.error(\"Something went wrong!\");\n    }\n  };\n  const handleCloseSettings = () => setShowSettings(false);\n  const handleCloseRecent = () => setShowRecent(false);\n  const handleBalance = async () => {\n    const address = amountIn === \"TK1\" ? tokenTwo.address : tokenOne.address;\n\n    let balance;\n\n    if (address === \"BNB\") {\n      balance = await ContractServices.getBNBBalance(isUserConnected);\n    } else {\n      balance = await ContractServices.getTokenBalance(\n        address,\n        isUserConnected\n      );\n    }\n    if (amountIn === \"TK1\") {\n      setTokenTwoBalance(balance);\n    }\n    if (amountIn === \"TK2\") {\n      setTokenOneBalance(balance);\n    }\n  };\n  const handleSwap = async () => {\n    // const acc = await ContractServices.getDefaultAccount();\n    const acc = isUserConnected;\n    if (acc && acc.toLowerCase() !== isUserConnected.toLowerCase()) {\n      return toast.error(\"Wallet address doesn`t match!\");\n    }\n    setSwapModal(false);\n    let value = 0,\n      checkBNBforTK1 = false,\n      checkBNBforTK2 = false;\n\n    let dl = Math.floor(new Date().getTime() / 1000);\n    dl = dl + deadline * 60;\n\n    let a1 = tokenOne.address,\n      a2 = tokenTwo.address;\n\n    if (tokenOne.address === \"BNB\") {\n      a1 = WETH;\n      checkBNBforTK1 = true;\n      value = tokenOneValue;\n    }\n    if (tokenTwo.address === \"BNB\") {\n      a2 = WETH;\n      checkBNBforTK2 = true;\n      value = tokenTwoValue;\n    }\n    if (value > 0) {\n      value = BigNumber(value * 10 ** 18).toFixed();\n    }\n    if (checkBNBforTK1) {\n      dispatch(startLoading());\n      const data = await handleBNBSwapForTK1(dl, value);\n      try {\n        debugger;\n        // console.log(\"ww\", isUserConnected.toString());\n\n        const result =\n          amountIn === \"TK1\"\n            ? await ExchangeService.swapExactETHForTokens(\n                data,\n                handleBalance,\n                a1,\n                a2\n              )\n            : await ExchangeService.swapETHForExactTokens(data);\n\n        dispatch(stopLoading());\n        if (result) {\n          setTxHash(result);\n          setShowTransactionModal(true);\n          setShowSupplyModal(false);\n\n          const data = {\n            message: `Swap ${tokenOne.symbol} and ${tokenTwo.symbol}`,\n            tx: result,\n          };\n\n          dispatch(addTransaction(data));\n        }\n        setLiquidityConfirmation(false);\n      } catch (err) {\n        dispatch(stopLoading());\n        const message = await ContractServices.web3ErrorHandle(err);\n        toast.error(message);\n        setLiquidityConfirmation(false);\n      }\n    } else if (checkBNBforTK2) {\n      dispatch(startLoading());\n      const data = await handleBNBSwapForTK2(value);\n      try {\n        const result =\n          amountIn === \"TK1\"\n            ? await ExchangeService.swapExactTokensForETH(data, a1, a2)\n            : await ExchangeService.swapTokensForExactETH(data, a1, a2);\n\n        dispatch(stopLoading());\n\n        if (result) {\n          setTxHash(result);\n          setShowTransactionModal(true);\n          setShowSupplyModal(false);\n          const data = {\n            message: `Swap ${tokenOne.symbol} and ${tokenTwo.symbol}`,\n            tx: result,\n          };\n          dispatch(addTransaction(data));\n        }\n        setLiquidityConfirmation(false);\n      } catch (err) {\n        dispatch(stopLoading());\n        const message = await ContractServices.web3ErrorHandle(err);\n        toast.error(message);\n        setLiquidityConfirmation(false);\n      }\n    } else {\n      dispatch(startLoading());\n      let pair;\n      const checkPair = await ExchangeService.getPair(a1, a2);\n\n      if (checkPair !== \"0x0000000000000000000000000000000000000000\") {\n        pair = [a1, a2];\n      } else {\n        const pairs = await checkPairWithBNBOrUSDT(a1, a2);\n        if (pairs) {\n          pair = pairs;\n        }\n      }\n      let data = await handleSwapAmoutnIn(value);\n      data.path = pair;\n      try {\n        const result =\n          amountIn === \"TK1\"\n            ? await ExchangeService.swapExactTokensForTokens(data, a1, a2)\n            : await ExchangeService.swapTokensForExactTokens(data, a1, a2);\n\n        dispatch(stopLoading());\n\n        if (result) {\n          setTxHash(result);\n          setShowTransactionModal(true);\n          setShowSupplyModal(false);\n\n          const data = {\n            message: `Swap ${tokenOne.symbol} and ${tokenTwo.symbol}`,\n            tx: result,\n          };\n          dispatch(addTransaction(data));\n        }\n        setLiquidityConfirmation(false);\n      } catch (err) {\n        dispatch(stopLoading());\n        const message = await ContractServices.web3ErrorHandle(err);\n        toast.error(message);\n        setLiquidityConfirmation(false);\n      }\n    }\n  };\n\n  const handleSwapAmoutnIn = async (value) => {\n    let amountAMin;\n    let amountBMin;\n\n    if (amountIn == \"TK1\") {\n      let amountADesired = tokenOneValue * 10 ** tokenOne.decimals;\n      let amountBDesired = tokenTwoValue * 10 ** tokenTwo.decimals;\n\n      amountAMin = BigNumber(amountADesired).toFixed();\n      amountBMin = BigNumber(\n        amountBDesired - (amountBDesired * slippagePercentage) / 100\n      ).toFixed();\n    }\n\n    if (amountIn == \"TK2\") {\n      let amountADesired = tokenOneValue * 10 ** tokenOne.decimals;\n      let amountBDesired = tokenTwoValue * 10 ** tokenTwo.decimals;\n\n      amountAMin = BigNumber(amountADesired).toFixed();\n      amountBMin = BigNumber(\n        amountBDesired + (amountBDesired * slippagePercentage) / 100\n      ).toFixed();\n    }\n\n    let dl = Math.floor(new Date().getTime() / 1000);\n    dl = dl + deadline * 60;\n\n    return {\n      amountIn: amountAMin.toString(),\n      amountOutMin: amountBMin.toString(),\n      path: [tokenOne.address, tokenTwo.address],\n      to: isUserConnected,\n      deadline: dl,\n      value: value.toString(),\n    };\n  };\n  const handleBNBSwapForTK1 = async (dl, value) => {\n    let amountOutMin;\n    if (amountIn === \"TK1\") {\n      let amountOut = BigNumber(\n        Math.floor(tokenTwoValue * 10 ** tokenTwo.decimals)\n      ).toFixed();\n\n      amountOutMin = BigNumber(\n        Math.floor(\n          Number(amountOut) - (Number(amountOut) * slippagePercentage) / 100\n        )\n      ).toFixed();\n      amountOutMin = amountOutMin.toString();\n    }\n\n    if (amountIn === \"TK2\") {\n      let amountOut = BigNumber(\n        Math.floor(tokenOneValue * 10 ** tokenOne.decimals)\n      ).toFixed();\n      amountOutMin = BigNumber(Math.floor(amountOut)).toFixed();\n      amountOutMin = amountOutMin.toString();\n    }\n\n    return {\n      amountOutMin: amountOutMin?.toString(),\n      path: [WETH, tokenTwo.address],\n      to: isUserConnected,\n      deadline: dl,\n      value,\n    };\n  };\n\n  const handleBNBSwapForTK2 = async (value) => {\n    let dl = Math.floor(new Date().getTime() / 1000);\n    dl = dl + deadline * 60;\n\n    if (amountIn === \"TK1\") {\n      let amountOut = tokenTwoValue * 10 ** tokenOne.decimals;\n      let amountIn = BigNumber(\n        Math.floor(tokenOneValue * 10 ** tokenOne.decimals)\n      ).toFixed();\n      let amountOutMin = BigNumber(\n        Math.floor(amountOut - (amountOut * slippagePercentage) / 100)\n      ).toFixed();\n      // const amount = Math.floor(value);\n      return {\n        amountIn,\n        amountOutMin,\n        path: [tokenOne.address, WETH],\n        to: isUserConnected,\n        deadline: dl,\n        value,\n      };\n    }\n\n    if (amountIn === \"TK2\") {\n      let amountIn = tokenTwoValue * 10 ** tokenTwo.decimals;\n      let amountOut = BigNumber(\n        Math.floor(tokenOneValue * 10 ** tokenOne.decimals)\n      ).toFixed();\n      let amountInMax = BigNumber(\n        Math.floor(amountIn + (amountIn * slippagePercentage) / 100)\n      ).toFixed();\n      // const amount = Math.floor(value);\n      return {\n        amountOut: amountOut.toString(),\n        amountInMax: amountInMax.toString(),\n        path: [tokenOne.address, WETH],\n        to: isUserConnected,\n        deadline: dl,\n        value,\n      };\n    }\n  };\n  const handleSwitchCurrencies = () => {\n    setTokenOneValue(tokenTwoValue);\n    setTokenTwoValue(tokenOneValue);\n    setCurrencyNameForTokenOne(tokenTwoCurrency);\n    setCurrencyNameForTokenTwo(tokenOneCurrency);\n    setTokenOneBalance(tokenTwoBalance);\n    setTokenTwoBalance(tokenOneBalance);\n    setTokenOneIcon(tokenTwoIcon);\n    setTokenTwoIcon(tokenOneIcon);\n    setTokenOne(tokenTwo);\n    setTokenTwo(tokenOne);\n    amountIn == \"TK1\" ? setAmountIn(\"TK2\") : setAmountIn(\"TK1\");\n  };\n  //call web3 approval function\n  const handleTokenApproval = async (tokenType) => {\n    if (approvalConfirmation) {\n      return toast.info(\"Token approval is processing\");\n    }\n    // const value = (2*256 - 1).toString();\n    const value =\n      \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n    let tokenAddress = \"BNB\";\n    if (tokenType === \"TK1\") {\n      tokenAddress = tokenOne.address;\n    }\n    if (tokenType === \"TK2\") {\n      tokenAddress = tokenTwo.address;\n    }\n    try {\n      dispatch(startLoading());\n      const r = await ContractServices.approveToken(\n        isUserConnected,\n        value,\n        MAIN_CONTRACT_LIST.router.address,\n        tokenAddress\n      );\n      if (r.code === 4001) {\n        toast.error(\"User denied transaction signature.\");\n      } else {\n        setApprovalConfirmation(true);\n        let data = {\n          message: `Approve`,\n          tx: r.transactionHash,\n        };\n        if (tokenType === \"TK1\") {\n          setTokenOneApproved(true);\n          setTokenOneApproval(false);\n\n          data.message = `Approve ${tokenOne.symbol}`;\n        }\n        if (tokenType === \"TK2\") {\n          setTokenTwoApproved(true);\n          setTokenTwoApproval(false);\n          data.message = `Approve ${tokenTwo.symbol}`;\n        }\n        dispatch(addTransaction(data));\n        setApprovalConfirmation(false);\n      }\n      dispatch(stopLoading());\n    } catch (err) {\n      setApprovalConfirmation(false);\n      dispatch(stopLoading());\n      console.log(err);\n      toast.error(\"Transaction Reverted!\");\n    }\n  };\n  const handleApprovalButton = (tokenType) => {\n    if (tokenOneApproval && tokenType === \"TK1\") {\n      return (\n        <Col className=\"swapBtn_col\">\n          <ButtonPrimary\n            className=\"swapBtn\"\n            title={`Approve ${tokenOne.symbol}`}\n            onClick={() => handleTokenApproval(tokenType)}\n            disabled={approvalConfirmation}\n          />\n        </Col>\n      );\n    }\n    if (tokenTwoApproval && tokenType === \"TK2\") {\n      return (\n        <Col className=\"swapBtn_col\">\n          <ButtonPrimary\n            className=\"swapBtn\"\n            title={`Approve ${tokenTwo.symbol}`}\n            onClick={() => handleTokenApproval(tokenType)}\n            disabled={approvalConfirmation}\n          />\n        </Col>\n      );\n    }\n    //dead code\n    return null;\n  };\n  const closeTransactionModal = () => {\n    setShowTransactionModal(false);\n    //props.backBtn();\n    //window.location.reload();\n  };\n  const checkTokenORCurrencyBalance = async (address) => {\n    if (address === \"BNB\") {\n      return await ContractServices.getBNBBalance(isUserConnected);\n    } else {\n      return await ContractServices.getTokenBalance(address, isUserConnected);\n    }\n  };\n  const liquidityProviderFee = () => {\n    const value = amountIn === \"TK1\" ? tokenOneValue : tokenTwoValue;\n    const tokenCurrency =\n      amountIn === \"TK1\" ? tokenOneCurrency : tokenTwoCurrency;\n    let lpf = (value * 2) / 1000;\n    lpf = BigNumber(lpf).toFixed();\n    const calLpf = lpf + \" \" + tokenCurrency;\n    return calLpf;\n  };\n  return (\n    <>\n      <Container fluid className=\"swapScreen comnSection\">\n        <CardCustom>\n          <div className=\"settingSec\">\n            <h4>Exchange</h4>\n            <div className=\"settingIcon\">\n              <img\n                src={iconTimer}\n                onClick={() => setShowRecent(true)}\n                className=\"timerImg\"\n              />\n              <img src={SettingIcon} onClick={() => settinghandleShow(true)} />\n            </div>\n          </div>\n          <SelectCoin\n            label={`Balance: ${tokenOneBalance}`}\n            coinImage={tokenOne?.icon}\n            value={tokenOneCurrency}\n            onClick={() => onHandleOpenModal(\"TK1\")}\n            inputLabel=\"Input\"\n            className=\"mb-0\"\n            placeholder=\"0.0\"\n            onChange={(e) => handleTokenValue(e.target.value, \"TK1\")}\n            max={max}\n            onMax={() => handleMaxBalance(\"TK1\")}\n            defaultValue={tokenOneValue}\n          />\n          <div className=\"convert_plus\" onClick={handleSwitchCurrencies}>\n            <img src={ArrowDown} />\n          </div>\n          <SelectCoin\n            label={`Balance: ${tokenTwoBalance}`}\n            coinImage={tokenTwo?.icon}\n            value={tokenTwoCurrency}\n            onClick={() => onHandleOpenModal(\"TK2\")}\n            inputLabel=\"Input\"\n            className=\"mb-0\"\n            placeholder=\"0.0\"\n            onChange={(e) => handleTokenValue(e.target.value, \"TK2\")}\n            max={false}\n            defaultValue={tokenTwoValue}\n          />\n          {slippagePercentage && (\n            <Col className=\"priceSec_col\">\n              <div>\n                {!isDisabled && isUserConnected && <h5>Price</h5>}\n                <h5>Slippage Tolerance</h5>\n              </div>\n              <div className=\"text-end\">\n                <h5>\n                  {!isDisabled && isUserConnected && (\n                    <>\n                      {sharePoolValue} {tokenOneCurrency} per {tokenTwoCurrency}\n                    </>\n                  )}\n                  {/* <img\n                    src={SwitchIcon}\n                    alt=\"swap_icon\"\n                    className=\"ms-2\"\n                  /> */}\n                </h5>\n                <h5>{`${slippagePercentage}%`}</h5>\n              </div>\n            </Col>\n          )}\n          {handleApprovalButton(\"TK1\")}\n          {handleApprovalButton(\"TK2\")}\n          {/* <Col className=\"swapBtn_col\">\n            <ButtonPrimary\n              className=\"swapBtn\"\n              title=\"Approve\"\n              onClick={() => handleShow1(true)}\n            />\n            <ButtonPrimary\n              className=\"swapBtn dismissBtn\"\n              title=\"Dismiss\"\n              onClick={() => handleShow1(true)}\n            />\n          </Col> */}\n          <Col className=\"swapBtn_col\">\n            {isDisabled && !isUserConnected && (\n              <ButtonPrimary\n                className=\"swapBtn\"\n                onClick={() => setWalletShow(true)}\n                title={\"Unlock Wallet\"}\n              />\n            )}\n            {/* ******* delete below button while enabling swap ******* */}\n            {/* {<ButtonPrimary disabled className=\"swapBtn\" title={'Swap'} />} */}\n            {/* ******* uncomment both of the below buttons while enabling swap ******* */}\n            {isDisabled && isUserConnected && (\n              <ButtonPrimary disabled className=\"swapBtn\" title={btnText} />\n            )}\n            {!isDisabled && isUserConnected && (\n              <ButtonPrimary\n                className=\"swapBtn\"\n                onClick={() => setSwapModal(!openSwapModal)}\n                title={\"Swap\"}\n              />\n            )}\n          </Col>\n        </CardCustom>\n        {!isDisabled && isUserConnected && (\n          <div className=\"card_style card_style_bottom\">\n            <ul>\n              <li>\n                Minimum received:<sapn>{minimumReceived / 10 ** 9}</sapn>\n              </li>\n              <li>\n                Price impact:<sapn>{priceImpact}%</sapn>\n              </li>\n              <li>\n                Liquidity provider fee:<sapn>{liquidityProviderFee()}</sapn>\n              </li>\n            </ul>\n          </div>\n        )}\n      </Container>\n      <ModalCurrency\n        show={modalCurrency}\n        handleShow={setModalCurrency}\n        handleClose={setModalCurrency}\n        tokenList={filteredTokenList}\n        selectCurrency={onHandleSelectCurrency}\n        searchToken={handleSearchToken}\n        searchByName={setSearch}\n        tokenType={tokenType}\n        handleOrder={setFilteredTokenList}\n        currencyName={selectedCurrency}\n      />\n      <ConnectWallet\n        show={walletShow}\n        handleShow={handleShow1}\n        handleClose={handleClose1}\n      />\n      <SettingModal\n        show={settingShow}\n        handleShow={settinghandleShow}\n        handleClose={settingClose}\n      />\n      {openSwapModal && (\n        <SwapModal\n          handleSwap={handleSwap}\n          closeModal={() => setSwapModal(!openSwapModal)}\n          tokenOneCurrency={tokenOneCurrency}\n          tokenTwoCurrency={tokenTwoCurrency}\n          tokenOneValue={tokenOneValue}\n          tokenTwoValue={tokenTwoValue}\n          tokenOneIcon={tokenOne?.icon}\n          tokenTwoIcon={tokenTwo?.icon}\n          sharePoolValue={sharePoolValue}\n          priceImpact={priceImpact}\n          liquidityProviderFee={liquidityProviderFee()}\n          show={openSwapModal}\n        />\n      )}\n      <RecentTransactions show={showRecent} handleClose={handleCloseRecent} />\n      <TransactionalModal\n        show={showTransactionModal}\n        handleClose={closeTransactionModal}\n        txHash={txHash}\n      />\n    </>\n  );\n};\n\nexport default Exchange;\n","/data/nm/SaitaSwap/src/components/cardCustom/CardCustom.js",[],"/data/nm/SaitaSwap/src/services/SecurityService.js",[],"/data/nm/SaitaSwap/src/components/Timer/Timer.js",[],"/data/nm/SaitaSwap/src/components/FarmCard/FarmCard.js",["750","751"],"import React from 'react'\nimport { Card } from 'react-bootstrap'\nimport ButtonLink from \"../buttonLink/ButtonLink\";\nimport { rootName } from \"../../constant\";\nimport farmicon from \"../../assets/images/farm-button-icon.png\";\nimport './FarmCard.scss'\nimport { useHistory } from 'react-router';\n\nconst FarmCard = props => {\n    const history = useHistory();\n\n    return (\n       <Card className=\"farmcard\">\n           <div className=\"d-flex\">\n                <div className=\"cions\">\n                    <span className=\"coin_imgs uppr\"><img src={props.icon1} alt={\"icon\"}/></span>\n                    <span className=\"coin_imgs dwn\"><img src={props.icon2} alt={\"icon\"}/></span>\n                </div>\n                <div className=\"coin_name\">\n                    <h3 className=\"coin_title\">{props.title}-{props.title1}</h3>\n                    <span>Liquidity {props.liquidity}</span>\n                </div>\n            </div> \n            <div className=\"direction\">\n                <h3>APR {props.apy}</h3>\n                <ButtonLink title=\"Farm\" icon={farmicon} link=\"/farmplanets/active\" />\n            </div>\n       </Card>\n    )\n}\n\nexport default FarmCard;","/data/nm/SaitaSwap/src/Helpers/storageHelper.js",[],"/data/nm/SaitaSwap/src/pages/Trade/TokenBalance.js",["752"],"import React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { ContractServices } from '../../services/ContractServices';\n\nconst TokenBalance = ({ address }) => {\n\n      const [balance, setBalance] = useState('');\n      const isUserConnected = useSelector(state => state.persist.isUserConnected);\n\n      useEffect(() => {\n            init();\n      }, [isUserConnected, address]);\n\n      const init = async () => {\n            try {\n                  let res = 0;\n                  if (address === 'BNB') {\n                        res = await ContractServices.getBNBBalance(isUserConnected);\n                        setBalance(res);\n                  } else {\n                        res = await ContractServices.getTokenBalance(address, isUserConnected);\n                        setBalance(res);\n                  }\n            } catch (error) {\n                  console.log(error);\n            }\n      }\n\n      return <span className=\"tokenName_textStyle\">{balance}</span>\n\n}\n\nexport default TokenBalance;","/data/nm/SaitaSwap/src/components/coinItem/CoinItem.js",["753","754"],"import React from \"react\";\nimport { Col, Row } from \"react-bootstrap\";\nimport \"./CoinItemStyle.scss\";\n\nconst CoinItem = (props) => {\n  \n  return (\n    <>\n    <Col {...props} className={`coinItem_style ${props.className}`}>\n      <img src={props.iconImage} />\n      <p className=\"titleStyle\">{props.title}</p>\n    </Col>\n    </>\n  );\n};\nexport default CoinItem;","/data/nm/SaitaSwap/src/components/SwapModal/SwapModal.js",["755","756","757","758","759"],"import './SwapModal.scss'\nimport { Link } from \"react-router-dom\";\nimport Card from \"../Card/Card\";\nimport closeBtn from \"../../assets/images/ionic-md-close.svg\";\nimport { Col, Row, Modal, Button } from \"react-bootstrap\";\n\nconst SwapModal = ({\n  closeModal,\n  tokenOneCurrency,\n  tokenTwoCurrency,\n  tokenOneValue,\n  tokenTwoValue,\n  tokenOneIcon,\n  tokenTwoIcon,\n  sharePoolValue,\n  handleSwap,\n  priceImpact,\n  liquidityProviderFee,\n  show,\n}) => {\n  return (\n    <>\n      <Modal\n        centered\n        scrollable={true}\n        className=\"connect_wallet supply_mode\"\n        show={show}\n        onHide={closeModal}\n      >\n        <Modal.Header closeButton>\n          <Modal.Title>You are creating a pool</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Row>\n            <ul className=\"swap_confirmation\">\n              <li>\n                <p>\n                  <img src={tokenOneIcon} alt=\"icon\" className='me-2' />\n                  {tokenOneValue}\n                </p>{\" \"}\n                <span> {tokenOneCurrency}</span>\n              </li>\n              <li>\n                <p>\n                  <img src={tokenTwoIcon} alt=\"icon\" className=\"me-2\" />\n                  {tokenTwoValue}\n                </p>{\" \"}\n                <span> {tokenTwoCurrency}</span>\n              </li>\n              <li>\n                Price:{\" \"}\n                <span>\n                  {\" \"}\n                  {sharePoolValue} {tokenOneCurrency}/ {tokenTwoCurrency}\n                </span>\n              </li>\n              <li>\n                Price Impact: <span>{priceImpact}%</span>\n              </li>\n              <li>\n                Liquidity provider fee: <span>{liquidityProviderFee}</span>\n              </li>\n            </ul>\n            <div className=\"col modal_headerStyle__rowC_colRight Confirm_btn\">\n              <button className=\"btn buttonStyle full\" onClick={() => handleSwap()}>\n                Confirm\n              </button>\n            </div>\n          </Row>\n        </Modal.Body>\n      </Modal>\n    </>\n  );\n};\n\nexport default SwapModal;\n","/data/nm/SaitaSwap/src/components/buttonLink/ButtonLink.js",[],"/data/nm/SaitaSwap/src/components/Modal/RemoveLiquidity/RemoveLiquidity.js",["760","761","762","763","764","765","766","767","768"],"import React, { useEffect, useState } from \"react\";\nimport { Col, Row, Modal } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport DownArrow from \"../../../assets/images/down-arrow.png\";\nimport NiobIcon from \"../../../assets/images/saitaswap.png\";\nimport BnbIcon from \"../../../assets/images/WBNB-Token-Icon.svg\";\nimport { MAIN_CONTRACT_LIST, TOKEN_LIST, WETH } from \"../../../assets/tokens\";\nimport {\n  addTransaction,\n  searchTokenByNameOrAddress,\n  startLoading,\n  stopLoading,\n  saveUserLpTokens,\n  updateLpToken,\n} from \"../../../redux/actions\";\nimport { ContractServices } from \"../../../services/ContractServices\";\nimport { ExchangeService } from \"../../../services/ExchangeService\";\nimport Button from \"../../Button/Button\";\nimport { toast } from \"../../Toast/Toast\";\nimport \"./RemoveLiquidity.scss\";\nimport { BigNumber } from \"bignumber.js\";\nimport RangeSlider from \"../../../pages/Trade/RangeSlider\";\nimport ModalCurrency from \"../ModalCurrency/ModalCurrency\";\nimport TransactionalModal from \"../../TransactionalModal/TransactionalModal\";\nimport Plusicon from \"../../../assets/images/plus_ico.png\";\nimport iconDropDown from \"../../../assets/images/down-arrow.png\";\nimport SelectCoin from \"../../selectCoin/SelectCoin\";\n\nconst RemoveLiquidity = (props) => {\n  const dispatch = useDispatch();\n\n  const isUserConnected = useSelector((state) => state.persist.isUserConnected);\n  const tokenList = useSelector((state) => state.persist.tokenList);\n  const deadline = useSelector((state) => state.persist.deadline);\n  const slippagePercentage = useSelector(\n    (state) => state.persist.slippagePercentage\n  );\n  const userLpTokens = useSelector((state) => state.persist.userLpTokens);\n\n  const [modalCurrency, setModalCurrency] = useState(false);\n  const [tokenOne, setTokenOne] = useState(TOKEN_LIST[0]);\n  const [tokenTwo, setTokenTwo] = useState({});\n  const [tokenOneValue, setTokenOneValue] = useState(0);\n  const [tokenTwoValue, setTokenTwoValue] = useState(0);\n  const [sharePoolValue, setSharePoolValue] = useState(100);\n  const [tokenOneCurrency, setCurrencyNameForTokenOne] = useState(\n    TOKEN_LIST[0].symbol\n  );\n  const [tokenTwoCurrency, setCurrencyNameForTokenTwo] =\n    useState(\"Select a currency\");\n  const [tokenOneBalance, setTokenOneBalance] = useState(0);\n  const [tokenTwoBalance, setTokenTwoBalance] = useState(0);\n  const [tokenOneDeposit, setTokenOneDeposit] = useState(0);\n  const [tokenTwoDeposit, setTokenTwoDeposit] = useState(0);\n\n  const [liquidity, setLiquidity] = useState(0);\n  const [liquidityTemp, setLiquidityTemp] = useState(0);\n  const [tokenType, setTokenType] = useState(\"TK1\");\n  const [showSupplyModal, setShowSupplyModal] = useState(false);\n\n  const [search, setSearch] = useState(\"\");\n  const [filteredTokenList, setFilteredTokenList] = useState([]);\n  const [liquidityConfirmation, setLiquidityConfirmation] = useState(false);\n\n  const [selectedCurrency, setSelectedCurrency] = useState(\"\");\n\n  const [currentPairAddress, setCurrentPairAddress] = useState(\"\");\n  const [showTransactionModal, setShowTransactionModal] = useState(false);\n  const [txHash, setTxHash] = useState(\"\");\n\n  const [screenType, setScreenType] = useState(true); //detailed/simple\n  const [rangeValue, setRangeValue] = useState(0);\n  const [approve, setApprove] = useState(false);\n  const [error, setError] = useState(\"Enter an amount\");\n  const [signedData, setSignedData] = useState(null);\n  const [dl, setDl] = useState(0);\n  const [receiveBNB, setReceiveBNB] = useState(true);\n  const [checkBNB, setCheckBNB] = useState(false);\n  const [checkSignature, setCheckSignature] = useState(true);\n\n  const [approvalConfirmation, setApprovalConfirmation] = useState(false);\n\n  const [symbolsArr] = useState([\"e\", \"E\", \"+\", \"-\"]);\n\n  useEffect(() => {\n    setFilteredTokenList(\n      tokenList?.filter((token) =>\n        token?.name.toLowerCase().includes(search.toLowerCase())\n      )\n    );\n    init();\n  }, [search, tokenList, props.show]);\n\n  const init = async () => {\n    if (isUserConnected) {\n      const oneBalance = await ContractServices.getBNBBalance(isUserConnected);\n      setTokenOneBalance(oneBalance);\n\n      const { lptoken } = props;\n      if (lptoken) {\n        setCurrentPairAddress(lptoken.pair);\n        setLiquidity(lptoken.balance);\n        setSharePoolValue(lptoken.poolShare);\n        if (lptoken.token0Obj) {\n          setTokenOne(lptoken.token0Obj);\n          setCurrencyNameForTokenOne(lptoken.token0Obj.symbol);\n          setTokenOneDeposit(lptoken.token0Deposit);\n          let tokenBal = 0;\n          if (lptoken.token0Obj.address === \"BNB\") {\n            tokenBal = oneBalance;\n            setCheckBNB(true);\n          } else {\n            tokenBal = await ContractServices.getTokenBalance(\n              lptoken.token0Obj.address,\n              isUserConnected\n            );\n          }\n          setTokenOneBalance(tokenBal);\n        }\n        if (lptoken.token1Obj) {\n          setTokenTwo(lptoken.token1Obj);\n          setCurrencyNameForTokenTwo(lptoken.token1Obj.symbol);\n          setTokenTwoDeposit(lptoken.token1Deposit);\n          let tokenBal = 0;\n          if (lptoken.token1Obj.address === \"BNB\") {\n            tokenBal = oneBalance;\n            setCheckBNB(true);\n          } else {\n            tokenBal = await ContractServices.getTokenBalance(\n              lptoken.token1Obj.address,\n              isUserConnected\n            );\n          }\n          setTokenTwoBalance(tokenBal);\n        }\n      }\n    }\n  };\n\n  const closeTransactionModal = () => {\n    setShowTransactionModal(false);\n    props.backBtn();\n    window.location.reload();\n  };\n\n  const onHandleOpenModal = (tokenType) => {\n    if (!isUserConnected) {\n      return toast.error(\"Connect wallet first!\");\n    }\n    setSelectedCurrency(\n      tokenType === \"TK1\" ? tokenTwoCurrency : tokenOneCurrency\n    );\n    setModalCurrency({\n      modalCurrency: true,\n    });\n    setTokenType(tokenType);\n  };\n  const onHandleSelectCurrency = async (token, selecting) => {\n    const { address, symbol } = token;\n    if (!isUserConnected) {\n      return toast.error(\"Connect wallet first!\");\n    }\n    let a1,\n      a2,\n      oneBalance = 0,\n      twoBalance = 0;\n    if (selecting === \"TK1\") {\n      a1 = address;\n      if (address === \"BNB\") {\n        oneBalance = await ContractServices.getBNBBalance(isUserConnected);\n      } else {\n        oneBalance = await ContractServices.getTokenBalance(\n          address,\n          isUserConnected\n        );\n      }\n      setTokenOne(token);\n      setCurrencyNameForTokenOne(symbol);\n      setTokenOneBalance(oneBalance);\n      if (tokenTwo.address) {\n        a2 = tokenTwo.address;\n      }\n    }\n    if (selecting === \"TK2\") {\n      a2 = address;\n      if (address === \"BNB\") {\n        twoBalance = await ContractServices.getBNBBalance(isUserConnected);\n      } else {\n        twoBalance = await ContractServices.getTokenBalance(\n          address,\n          isUserConnected\n        );\n      }\n      setTokenTwo(token);\n      setCurrencyNameForTokenTwo(symbol);\n      setTokenTwoBalance(twoBalance);\n      if (tokenOne.address) {\n        a1 = tokenOne.address;\n      }\n    }\n    setModalCurrency(!modalCurrency);\n    setSearch(\"\");\n    setFilteredTokenList(tokenList);\n\n    if (a1 && a2) {\n      let currentPairAddress;\n      if (a1 === \"BNB\") {\n        a1 = WETH; //WETH\n        currentPairAddress = await ExchangeService.getPair(a1, a2);\n      } else if (a2 === \"BNB\") {\n        a2 = WETH; //WETH\n        currentPairAddress = await ExchangeService.getPair(a1, a2);\n      } else {\n        currentPairAddress = await ExchangeService.getPair(a1, a2);\n      }\n      if (currentPairAddress !== \"0x0000000000000000000000000000000000000000\") {\n        setCurrentPairAddress(currentPairAddress);\n        const lpTokenBalance = await ContractServices.getTokenBalance(\n          currentPairAddress,\n          isUserConnected\n        );\n        setLiquidity(lpTokenBalance);\n        setLiquidityTemp(0);\n\n        const totalSupply = await ContractServices.getTotalSupply(\n          currentPairAddress\n        );\n        const ratio = lpTokenBalance / totalSupply;\n\n        const reserves = await ExchangeService.getReserves(currentPairAddress);\n\n        //lp deposit\n        let token0Deposit =\n          ratio * (reserves[\"_reserve0\"] / 10 ** tokenOne.decimals);\n        let token1Deposit =\n          ratio * (reserves[\"_reserve1\"] / 10 ** tokenTwo.decimals);\n\n        setTokenOneDeposit(token0Deposit);\n        setTokenTwoDeposit(token1Deposit);\n      } else {\n        setCurrentPairAddress(\"\");\n        setLiquidity(0);\n        setLiquidityTemp(0);\n        setTokenOneValue(0);\n        setTokenTwoValue(0);\n      }\n    }\n  };\n\n  const handleSearchToken = async (data) => {\n    try {\n      const res = await dispatch(searchTokenByNameOrAddress(data));\n      setFilteredTokenList(res);\n    } catch (error) {\n      toast.error(\"Something went wrong!\");\n    }\n  };\n  const handleLiquidityChange = (value, totalValue, type) => {\n    if (value > 0) {\n      if (value >= totalValue) {\n        value = totalValue;\n      }\n      const percentage = Number(((value / totalValue) * 100).toFixed(2));\n      handleChange(percentage, type, value);\n    }\n  };\n\n  const handleChange2 = (value) => {\n    if (value > 0) {\n      setRangeValue(value);\n\n      // console.log('value, tokenOneDeposit, tokenTwoDeposit', value, tokenOneDeposit, tokenTwoDeposit);\n\n      const liquidityTemp = (value / 100) * liquidity;\n      setLiquidityTemp(liquidityTemp);\n\n      const tokenOneValue = (value / 100) * tokenOneDeposit;\n      setTokenOneValue(tokenOneValue);\n\n      const tokenTwoValue = (value / 100) * tokenTwoDeposit;\n      setTokenTwoValue(tokenTwoValue);\n\n      //enable approve button\n      setApprove(true);\n      setError(\"Remove\");\n    } else {\n      setApprove(false);\n    }\n  };\n\n  const handleChange = (value, type, oldValue) => {\n    if (value > 0) {\n      setRangeValue(value);\n      if (type === \"pair\") {\n        setLiquidityTemp(oldValue);\n        const tokenTwoValue = (value / 100) * tokenTwoDeposit;\n        setTokenTwoValue(tokenTwoValue);\n        const tokenOneValue = (value / 100) * tokenOneDeposit;\n        setTokenOneValue(tokenOneValue);\n      }\n      if (type === \"TK1\") {\n        const liquidityTemp = (value / 100) * liquidity;\n        setLiquidityTemp(liquidityTemp);\n        const tokenTwoValue = (value / 100) * tokenTwoDeposit;\n        setTokenTwoValue(tokenTwoValue);\n        setTokenOneValue(oldValue);\n      }\n      if (type === \"TK2\") {\n        const liquidityTemp = (value / 100) * liquidity;\n        setLiquidityTemp(liquidityTemp);\n        const tokenOneValue = (value / 100) * tokenOneDeposit;\n        setTokenOneValue(tokenOneValue);\n        setTokenTwoValue(oldValue);\n      }\n\n      //enable approve button\n      setApprove(true);\n      setError(\"Remove\");\n    } else {\n      setApprove(false);\n    }\n  };\n  //sign signature\n  const approveTransaction = async () => {\n    setApprove(false);\n    let value = Math.floor(liquidityTemp * 10 ** 18);\n    value = BigNumber(value).toFixed();\n\n    if (rangeValue === 100) {\n      //fixing for 100%\n      value = await ContractServices.getLiquidity100Value(\n        currentPairAddress,\n        isUserConnected\n      );\n    }\n\n    let dl = Math.floor(new Date().getTime() / 1000);\n    dl = dl + deadline * 60;\n    setDl(dl);\n\n    const data = {\n      owner: isUserConnected,\n      spender: MAIN_CONTRACT_LIST.router.address,\n      value,\n      deadline: dl,\n    };\n    try {\n      const res = await ExchangeService.signRemoveTransaction(\n        data,\n        currentPairAddress\n      );\n      if (res.message) {\n        if (res.message.indexOf(\"eth_signTypedData_v4\") > -1) {\n          setCheckSignature(false);\n          setError(\"Remove\");\n          await handleTokenApproval();\n          return;\n        }\n        if (res.message.indexOf(\"User denied\") > -1) {\n          setApprove(false);\n          return toast.error(\"User denied for approval.\");\n        }\n        return toast.error(res.message);\n      }\n      setSignedData(res);\n      setError(null);\n    } catch (err) {\n      setApprove(true);\n      setError(err.message);\n    }\n  };\n  const confirmRemoveLiquidity = () => {\n    if (!error) {\n      setShowSupplyModal(true);\n    }\n  };\n  //for non signature remove liquidity\n  const handleTokenApproval = async () => {\n    const acc = await ContractServices.getDefaultAccount();\n    if (acc && acc.toLowerCase() !== isUserConnected.toLowerCase()) {\n      return toast.error(\"Wallet address doesn`t match!\");\n    }\n    if (approvalConfirmation) {\n      return toast.info(\"Token approval is processing\");\n    }\n    // const value = (2*256 - 1).toString();\n    const value =\n      \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n    const { lptoken } = props;\n    if (lptoken) {\n      try {\n        dispatch(startLoading());\n        let allowance = await ContractServices.allowanceToken(\n          lptoken.pair,\n          MAIN_CONTRACT_LIST.router.address,\n          isUserConnected\n        );\n        allowance = Number(allowance);\n        if (!(allowance > 0)) {\n          const r = await ContractServices.approveToken(\n            isUserConnected,\n            value,\n            MAIN_CONTRACT_LIST.router.address,\n            lptoken.pair\n          );\n          if (r.message.indexOf(\"Rejected\") > -1) {\n            toast.error(\"User denied transaction signature.\");\n            setError(\"Remove\");\n            setApprove(true);\n          } else if (r.code == 4001) {\n            toast.error(\"User denied transaction signature.\");\n            setError(\"Remove\");\n          } else {\n            setApprovalConfirmation(true);\n            let data = {\n              message: `Approve ${lptoken.symbol}`,\n              tx: r.transactionHash,\n            };\n            dispatch(addTransaction(data));\n            setApprovalConfirmation(false);\n            setError(null);\n          }\n        } else {\n          setApprove(false);\n          setError(null);\n        }\n        dispatch(stopLoading());\n      } catch (err) {\n        setApprovalConfirmation(false);\n        dispatch(stopLoading());\n        toast.error(\"Transaction Reverted!\");\n        setError(\"Error\");\n        setApprove(true);\n      }\n    }\n  };\n  const handleLpTokens = async () => {\n    const result = userLpTokens.filter(\n      (lpToken) => lpToken.pair !== props.lptoken.pair\n    );\n    dispatch(saveUserLpTokens(result));\n  };\n\n  const updateLpTokens = async () => {\n    const { lptoken } = props;\n    const lpdata = {\n      pair: lptoken.pair,\n      decimals: lptoken.decimals,\n      name: \"Import LPs\",\n      pairName: lptoken.pairName,\n      symbol: lptoken.symbol,\n      token0: lptoken.token0,\n      token1: lptoken.token1,\n    };\n    dispatch(updateLpToken(lpdata));\n  };\n  const removeLiquidity = async () => {\n    debugger;\n\n    // console.log(\"hi\");\n    const acc = isUserConnected;\n    if (acc && acc.toLowerCase() !== isUserConnected.toLowerCase()) {\n      return toast.error(\"Wallet address doesn`t match!\");\n    }\n    if (liquidityConfirmation) {\n      return toast.info(\"Transaction is processing!\");\n    }\n    setLiquidityConfirmation(true);\n    dispatch(startLoading());\n\n    let value = 0,\n      checkBNB = false,\n      token;\n\n    if (tokenOne.address === \"BNB\") {\n      checkBNB = true;\n      value = tokenOneValue;\n      token = tokenTwo.address;\n    }\n    if (tokenTwo.address === \"BNB\") {\n      checkBNB = true;\n      value = tokenTwoValue;\n      token = tokenOne.address;\n    }\n    if (value > 0) {\n      value = Math.floor(value * 10 ** 18);\n      value = BigNumber(value).toFixed();\n    }\n    if (checkBNB) {\n      let amountETHMin = BigNumber(\n        Math.floor(Number(value) - (Number(value) * slippagePercentage) / 100)\n      ).toFixed();\n\n      let amountTokenMin = \"\";\n      if (tokenOne.address === \"BNB\") {\n        let a = tokenTwoValue - (tokenTwoValue * slippagePercentage) / 100;\n        a = a * 10 ** tokenTwo.decimals;\n        amountTokenMin = BigNumber(Math.floor(a)).toFixed();\n      }\n      if (tokenTwo.address === \"BNB\") {\n        let a = tokenOneValue - (tokenOneValue * slippagePercentage) / 100;\n        a = a * 10 ** tokenOne.decimals;\n        amountTokenMin = BigNumber(Math.floor(a)).toFixed();\n      }\n\n      let liquidity = Math.floor(liquidityTemp * 10 ** 18);\n      liquidity = BigNumber(liquidity).toFixed();\n\n      if (rangeValue === 100) {\n        //fixing for 100%\n        liquidity = await ContractServices.getLiquidity100Value(\n          currentPairAddress,\n          isUserConnected\n        );\n      }\n\n      let r, s, v;\n      if (signedData) {\n        console.log(signedData, \"signedData\");\n        r = signedData.r;\n        s = signedData.s;\n        v = signedData.v;\n      }\n\n      console.log(\"before data\");\n      const data = {\n        token,\n        liquidity,\n        amountTokenMin,\n        amountETHMin,\n        to: isUserConnected,\n        deadline: dl,\n        value,\n        approveMax: false,\n        r,\n        s,\n        v,\n        checkSignature,\n      };\n\n      try {\n        const result = await ExchangeService.removeLiquidityETHWithPermit(\n          data,\n          updateLpTokens\n        );\n\n        // console.log(result, 'remove liquidity transaction');\n        dispatch(stopLoading());\n\n        if (result) {\n          setTxHash(result);\n          setShowTransactionModal(true);\n          setShowSupplyModal(false);\n          if (rangeValue === 100) handleLpTokens();\n          const data = {\n            message: `Remove ${tokenOne.symbol} and ${tokenTwo.symbol}`,\n            tx: result,\n          };\n          dispatch(addTransaction(data));\n        }\n        setLiquidityConfirmation(false);\n      } catch (err) {\n        console.log(err);\n        dispatch(stopLoading());\n        const message = await ContractServices.web3ErrorHandle(err);\n        toast.error(message);\n        setLiquidityConfirmation(false);\n      }\n    } else {\n      let amountADesired = tokenOneValue;\n      let amountBDesired = tokenTwoValue;\n\n      let amountAMin =\n        amountADesired - (amountADesired * slippagePercentage) / 100;\n      let amountBMin =\n        amountBDesired - (amountBDesired * slippagePercentage) / 100;\n\n      amountADesired = BigNumber(\n        Math.floor(amountADesired * 10 ** tokenOne.decimals)\n      ).toFixed();\n      amountBDesired = BigNumber(\n        Math.floor(amountBDesired * 10 ** tokenTwo.decimals)\n      ).toFixed();\n      amountAMin = BigNumber(\n        Math.floor(amountAMin * 10 ** tokenOne.decimals)\n      ).toFixed();\n      amountBMin = BigNumber(\n        Math.floor(amountBMin * 10 ** tokenTwo.decimals)\n      ).toFixed();\n\n      let liquidity = Math.floor(liquidityTemp * 10 ** 18);\n      liquidity = BigNumber(liquidity).toFixed();\n\n      if (rangeValue === 100) {\n        //fixing for 100%\n        liquidity = await ContractServices.getLiquidity100Value(\n          currentPairAddress,\n          isUserConnected\n        );\n      }\n\n      let r, s, v;\n      if (signedData) {\n        r = signedData.r;\n        s = signedData.s;\n        v = signedData.v;\n      }\n\n      const data = {\n        tokenA: tokenOne.address,\n        tokenB: tokenTwo.address,\n        liquidity,\n        amountAMin,\n        amountBMin,\n        to: isUserConnected,\n        deadline: dl,\n        value,\n        approveMax: false,\n        r,\n        s,\n        v,\n        checkSignature,\n      };\n\n      try {\n        const result = await ExchangeService.removeLiquidityWithPermit(data);\n        // console.log(result, 'remove liquidity transaction');\n\n        dispatch(stopLoading());\n        if (result) {\n          setTxHash(result);\n          setShowTransactionModal(true);\n          setShowSupplyModal(false);\n          if (rangeValue === 100) handleLpTokens();\n          const data = {\n            message: `Remove ${tokenOne.symbol} and ${tokenTwo.symbol}`,\n            tx: result,\n          };\n          dispatch(addTransaction(data));\n        }\n        setLiquidityConfirmation(false);\n      } catch (err) {\n        console.log(err);\n        dispatch(stopLoading());\n        const message = await ContractServices.web3ErrorHandle(err);\n        toast.error(message);\n        setLiquidityConfirmation(false);\n      }\n    }\n  };\n\n  const calculateFractionRow = (tokenType) => {\n    let r = 0;\n    let symbol1 = tokenOne.symbol,\n      symbol2 = tokenTwo.symbol;\n    if (symbol1 === \"BNB\") {\n      if (receiveBNB) {\n        symbol1 = \"BNB\";\n      } else {\n        symbol1 = \"WBNB\";\n      }\n    }\n    if (symbol2 === \"BNB\") {\n      if (receiveBNB) {\n        symbol2 = \"BNB\";\n      } else {\n        symbol2 = \"WBNB\";\n      }\n    }\n    if (tokenType === \"TK1\") {\n      if (tokenOneDeposit === 0) return 0;\n      r = tokenTwoDeposit / tokenOneDeposit;\n      r = Number(r.toFixed(5));\n\n      return (\n        <>\n          1 {symbol1} = {r} {symbol2}\n        </>\n      );\n    }\n    if (tokenType === \"TK2\") {\n      if (tokenTwoDeposit === 0) return 0;\n      r = tokenOneDeposit / tokenTwoDeposit;\n      r = Number(r.toFixed(5));\n      return (\n        <>\n          1 {symbol2} = {r} {symbol1}\n        </>\n      );\n    }\n  };\n\n  useEffect(() => {}, [tokenTwoValue]);\n\n  return (\n    <Modal\n      scrollable={true}\n      className=\"selectCurrency_modal removeLiq_Modal\"\n      show={props.show}\n      onHide={props.handleClose}\n      centered\n    >\n      <Modal.Header closeButton>\n        <Modal.Title>Remove Liquidity</Modal.Title>\n      </Modal.Header>\n      <div className=\"tokenName\">\n        <hr />\n      </div>\n      <Modal.Body>\n        <Col className=\"removeAmnt comnBrdr\">\n          <h6 className=\"d-flex\">\n            Amount{\" \"}\n            <span\n              className=\"ms-auto\"\n              onClick={() => setScreenType(!screenType)}\n            >\n              {screenType ? \"Detailed\" : \"Simple\"}\n            </span>\n          </h6>\n\n          {screenType ? (\n            <>\n              <div class=\"slidecontainer\">\n                {/* <input type=\"range\" className=\"slider\" /> */}\n                <RangeSlider\n                  rangeValue={rangeValue}\n                  handleChange={handleChange2}\n                />\n              </div>\n\n              <div className=\"amountSelect\">\n                <button type=\"button\" onClick={() => handleChange2(25)}>\n                  25%\n                </button>\n                <button\n                  type=\"button\"\n                  className=\"mx-1\"\n                  onClick={() => handleChange2(50)}\n                >\n                  50%\n                </button>\n                <button\n                  type=\"button\"\n                  className=\"me-1\"\n                  onClick={() => handleChange2(75)}\n                >\n                  75%\n                </button>\n                <button type=\"button\" onClick={() => handleChange2(100)}>\n                  Max\n                </button>\n              </div>\n            </>\n          ) : (\n            <h2>{rangeValue} %</h2>\n          )}\n        </Col>\n\n        {screenType ? (\n          <>\n            <Col className=\"text-center downArrow\">\n              <img src={DownArrow} alt=\"down_icon\" />\n            </Col>\n\n            <Col className=\"receiveAmnt comnBrdr\">\n              <ul className=\"text-start\">\n                <li>{tokenOneValue.toFixed(5)}</li>\n                <li>{tokenTwoValue.toFixed(5)}</li>\n              </ul>\n              <ul className=\"text-end leftSide\">\n                <li>\n                  {/* <img src={NiobIcon} alt=\"coin_icon\" /> */}\n                  {tokenOne.symbol}\n                </li>\n                <li>\n                  {/* <img src={BnbIcon} alt=\"coin_icon\" /> */}\n                  {tokenTwo.symbol}\n                </li>\n                {checkBNB && (\n                  <h6 className=\"text-end\">\n                    <span onClick={() => setReceiveBNB(!receiveBNB)}>\n                      {receiveBNB ? \"Receive WBNB\" : \"Receive BNB\"}\n                    </span>\n                  </h6>\n                )}\n              </ul>\n            </Col>\n          </>\n        ) : (\n          <>\n            {currentPairAddress && (\n              <Col className={`selectCoin_style ${props.className}`}>\n                <Row className=\"mx-0\">\n                  <Col className=\"selectCoin_left_style\">\n                    <label>Input</label>\n                    <input\n                      type=\"number\"\n                      onKeyDown={(evt) => {\n                        symbolsArr.includes(evt.key) && evt.preventDefault();\n                      }}\n                      onChange={(e) =>\n                        handleLiquidityChange(\n                          Number(e.target.value),\n                          liquidity,\n                          \"pair\"\n                        )\n                      }\n                      min={0}\n                      placeholder=\"0.0\"\n                      value={liquidityTemp}\n                      // min={0}\n                      minLength={1}\n                      maxLength={79}\n                      autoCorrect=\"off\"\n                      autoComplete=\"off\"\n                    />\n                  </Col>\n                  <Col className=\"selectCoin_right_style\">\n                    <label>Balance: {liquidity}</label>\n                    <Col className=\"select_buttonStyle\">\n                      <button onClick={props.onClick}>\n                        {props.max && (\n                          <strong onClick={props.onMax}>MAX</strong>\n                        )}\n\n                        <div>\n                          {\" \"}\n                          {props.coinImage && (\n                            <img src={props.coinImage} className=\"coin_Img\" />\n                          )}\n                          <strong\n                            style={{\n                              fontSize: props.selectTokenText ? \"\" : \"\",\n                            }}\n                          >\n                            {props.value}\n                          </strong>\n                        </div>\n                        <img\n                          className=\"selectDropDownStyle\"\n                          src={tokenOne.icon}\n                        />\n                        <img\n                          className=\"selectDropDownStyle\"\n                          src={tokenTwo.icon}\n                        />\n                        <span className=\"currencyName_textStyle\">\n                          {tokenOne.symbol}:{tokenTwo.symbol}\n                        </span>\n                      </button>\n                    </Col>\n                  </Col>\n                </Row>\n              </Col>\n            )}\n\n            <Col className=\"text-center downArrow\">\n              <img src={DownArrow} alt=\"down_icon\" />\n            </Col>\n\n            {\n              <SelectCoin\n                label={`Balance: ${tokenOneBalance}`}\n                coinImage={tokenOne?.icon}\n                value={tokenOneCurrency}\n                onClick={() => onHandleOpenModal(\"TK1\")}\n                inputLabel=\"Output\"\n                className=\"mb-0\"\n                placeholder=\"0.0\"\n                onChange={(e) =>\n                  handleLiquidityChange(\n                    Number(e.target.value),\n                    tokenOneDeposit,\n                    \"TK1\"\n                  )\n                }\n                max={false}\n                defaultValue={tokenOneValue}\n              />\n            }\n\n            <Col className=\"text-center downArrow\">\n              <img src={Plusicon} alt=\"down_icon\" />\n            </Col>\n\n            {\n              <SelectCoin\n                label={`Balance: ${tokenTwoBalance}`}\n                coinImage={tokenTwo?.icon}\n                value={tokenTwoCurrency}\n                onClick={() => onHandleOpenModal(\"TK2\")}\n                inputLabel=\"Output\"\n                className=\"mb-0\"\n                placeholder=\"0.0\"\n                onChange={(e) =>\n                  handleLiquidityChange(\n                    Number(e.target.value),\n                    tokenTwoDeposit,\n                    \"TK2\"\n                  )\n                }\n                max={false}\n                defaultValue={tokenTwoValue}\n              />\n            }\n          </>\n        )}\n\n        {/* <Col className=\"totalPrice\">\n          <ul className=\"text-start\">\n            <li>Price:</li>\n          </ul>\n          <ul className=\"text-end\">\n            <li>1 NIOB = 0.00035815 BNB</li>\n            <li>1 BNB = 3870.84 NIOB</li>\n          </ul>\n        </Col> */}\n        <br></br>\n        <Col className=\"btnCol\">\n          <Button\n            className=\"approveBtn\"\n            title=\"Approve\"\n            onClick={() => approveTransaction()}\n            disabled={!approve}\n          />\n          <Button\n            className=\"approveBtn\"\n            title={error ? error : \"Remove\"}\n            onClick={() => confirmRemoveLiquidity()}\n            disabled={error}\n          />\n        </Col>\n\n        <ModalCurrency\n          show={modalCurrency}\n          tokenList={filteredTokenList}\n          handleClose={() => setModalCurrency(!modalCurrency)}\n          selectCurrency={onHandleSelectCurrency}\n          searchToken={handleSearchToken}\n          searchByName={setSearch}\n          tokenType={tokenType}\n          currencyName={selectedCurrency}\n        />\n        <ModalCurrency\n          show={modalCurrency}\n          tokenList={filteredTokenList}\n          handleClose={() => setModalCurrency(!modalCurrency)}\n          selectCurrency={onHandleSelectCurrency}\n          searchToken={handleSearchToken}\n          searchByName={setSearch}\n          tokenType={tokenType}\n          currencyName={selectedCurrency}\n        />\n\n        {/* Approve confirm Modal Start */}\n        <Modal\n          centered\n          scrollable={true}\n          className=\"connect_wallet\"\n          show={showSupplyModal}\n          onHide={() => setShowSupplyModal(false)}\n        >\n          <Modal.Header closeButton>\n            <Modal.Title>You will receive</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Row>\n              <Col className=\"baseToken_style\">\n                <ul>\n                  <li>\n                    <div className=\"row\">\n                      <h2>{tokenOneValue.toFixed(5)}</h2>\n                      <span>\n                        <img src={tokenOne.icon} alt=\"icon\" />\n                        <h2>{tokenOne.symbol}</h2>\n                      </span>\n                    </div>\n                    <div className=\"row\">\n                      <h2 className=\"plus\">+</h2>\n                    </div>\n                    <div className=\"row\">\n                      <h2>{tokenTwoValue.toFixed(5)}</h2>\n                      <span>\n                        <img src={tokenTwo.icon} alt=\"icon\" />\n                        <h2>{tokenTwo.symbol}</h2>\n                      </span>\n                    </div>\n                    <p>\n                      Output is estimated. If the price changes by more than{\" \"}\n                      {slippagePercentage}% your transaction will revert.\n                    </p>\n                  </li>\n                  <li>\n                    <li>\n                      {tokenOneCurrency} Deposit: <span> {tokenOneValue}</span>\n                    </li>\n                    <li>\n                      {tokenTwoCurrency} Deposit:<span>{tokenTwoValue}</span>{\" \"}\n                    </li>\n                    <li>\n                      Price\n                      <p>\n                        {1}&nbsp;{tokenOneCurrency} ={\" \"}\n                        {calculateFractionRow(\"TK1\")} <br />\n                        {1}&nbsp;{tokenTwoCurrency} ={\" \"}\n                        {calculateFractionRow(\"TK2\")}\n                      </p>\n                    </li>\n                  </li>\n\n                  <Button\n                    title={isUserConnected ? \"Confirm\" : \"Unlock Wallet\"}\n                    className=\"remove_liq_btn\"\n                    disabled={liquidityConfirmation}\n                    onClick={() => removeLiquidity()}\n                  />\n                </ul>\n              </Col>\n            </Row>\n          </Modal.Body>\n        </Modal>\n        {/* Approve confirm Modal End */}\n\n        {showTransactionModal && (\n          <TransactionalModal\n            closeTransactionModal={closeTransactionModal}\n            txHash={txHash}\n          />\n        )}\n\n        {currentPairAddress && (\n          <Col className=\"totalPrice\">\n            <ul className=\"text-start\">\n              <li>\n                {\" \"}\n                <h5>LP TOKENS IN YOUR WALLET</h5>{\" \"}\n              </li>\n            </ul>\n            <ul className=\"text-end\">\n              <li>\n                <p>\n                  <img src={tokenOne.icon} alt=\"icon\" />{\" \"}\n                  <img src={tokenTwo.icon} alt=\"icon\" /> {tokenOne.symbol}/\n                  {tokenTwo?.symbol}\n                </p>{\" \"}\n                <span>{liquidity}</span>\n              </li>\n              <li>\n                <p>{tokenOne.symbol}: </p>\n                <span>{tokenOneDeposit.toFixed(5)} </span>\n              </li>\n              <li>\n                <p>{tokenTwo?.symbol}:</p>{\" \"}\n                <span>{tokenTwoDeposit.toFixed(5)}</span>\n              </li>\n            </ul>\n          </Col>\n        )}\n      </Modal.Body>\n    </Modal>\n  );\n};\n\nexport default RemoveLiquidity;\n","/data/nm/SaitaSwap/src/pages/Trade/RangeSlider.js",[],{"ruleId":"769","replacedBy":"770"},{"ruleId":"771","replacedBy":"772"},{"ruleId":"773","severity":1,"message":"774","line":1,"column":17,"nodeType":"775","messageId":"776","endLine":1,"endColumn":26},{"ruleId":"773","severity":1,"message":"777","line":6,"column":8,"nodeType":"775","messageId":"776","endLine":6,"endColumn":20},{"ruleId":"773","severity":1,"message":"778","line":7,"column":10,"nodeType":"775","messageId":"776","endLine":7,"endColumn":21},{"ruleId":"773","severity":1,"message":"779","line":42,"column":13,"nodeType":"775","messageId":"776","endLine":42,"endColumn":18},{"ruleId":"773","severity":1,"message":"780","line":55,"column":15,"nodeType":"775","messageId":"776","endLine":55,"endColumn":23},{"ruleId":"781","severity":1,"message":"782","line":91,"column":31,"nodeType":"783","messageId":"784","endLine":91,"endColumn":32},{"ruleId":"781","severity":1,"message":"782","line":91,"column":37,"nodeType":"783","messageId":"784","endLine":91,"endColumn":38},{"ruleId":"773","severity":1,"message":"778","line":2,"column":23,"nodeType":"775","messageId":"776","endLine":2,"endColumn":34},{"ruleId":"773","severity":1,"message":"785","line":2,"column":17,"nodeType":"775","messageId":"776","endLine":2,"endColumn":25},{"ruleId":"773","severity":1,"message":"786","line":7,"column":8,"nodeType":"775","messageId":"776","endLine":7,"endColumn":16},{"ruleId":"773","severity":1,"message":"787","line":11,"column":8,"nodeType":"775","messageId":"776","endLine":11,"endColumn":20},{"ruleId":"773","severity":1,"message":"788","line":12,"column":10,"nodeType":"775","messageId":"776","endLine":12,"endColumn":18},{"ruleId":"773","severity":1,"message":"789","line":13,"column":8,"nodeType":"775","messageId":"776","endLine":13,"endColumn":18},{"ruleId":"790","severity":1,"message":"791","line":73,"column":9,"nodeType":"792","messageId":"793","endLine":73,"endColumn":39},{"ruleId":"773","severity":1,"message":"794","line":1,"column":10,"nodeType":"775","messageId":"776","endLine":1,"endColumn":21},{"ruleId":"795","severity":1,"message":"796","line":29,"column":8,"nodeType":"797","endLine":29,"endColumn":10,"suggestions":"798"},{"ruleId":"799","severity":1,"message":"800","line":69,"column":33,"nodeType":"801","endLine":69,"endColumn":57},{"ruleId":"799","severity":1,"message":"800","line":77,"column":33,"nodeType":"801","endLine":77,"endColumn":57},{"ruleId":"773","severity":1,"message":"802","line":1,"column":17,"nodeType":"775","messageId":"776","endLine":1,"endColumn":26},{"ruleId":"773","severity":1,"message":"803","line":14,"column":8,"nodeType":"775","messageId":"776","endLine":14,"endColumn":12},{"ruleId":"773","severity":1,"message":"804","line":16,"column":8,"nodeType":"775","messageId":"776","endLine":16,"endColumn":14},{"ruleId":"773","severity":1,"message":"805","line":17,"column":8,"nodeType":"775","messageId":"776","endLine":17,"endColumn":14},{"ruleId":"773","severity":1,"message":"806","line":18,"column":8,"nodeType":"775","messageId":"776","endLine":18,"endColumn":13},{"ruleId":"773","severity":1,"message":"807","line":22,"column":3,"nodeType":"775","messageId":"776","endLine":22,"endColumn":17},{"ruleId":"773","severity":1,"message":"808","line":23,"column":3,"nodeType":"775","messageId":"776","endLine":23,"endColumn":8},{"ruleId":"773","severity":1,"message":"809","line":24,"column":3,"nodeType":"775","messageId":"776","endLine":24,"endColumn":7},{"ruleId":"773","severity":1,"message":"810","line":25,"column":3,"nodeType":"775","messageId":"776","endLine":25,"endColumn":17},{"ruleId":"773","severity":1,"message":"811","line":26,"column":3,"nodeType":"775","messageId":"776","endLine":26,"endColumn":10},{"ruleId":"773","severity":1,"message":"812","line":27,"column":3,"nodeType":"775","messageId":"776","endLine":27,"endColumn":15},{"ruleId":"773","severity":1,"message":"813","line":28,"column":3,"nodeType":"775","messageId":"776","endLine":28,"endColumn":22},{"ruleId":"773","severity":1,"message":"814","line":29,"column":3,"nodeType":"775","messageId":"776","endLine":29,"endColumn":23},{"ruleId":"815","severity":1,"message":"816","line":49,"column":24,"nodeType":"783","messageId":"817","endLine":49,"endColumn":26},{"ruleId":"815","severity":1,"message":"816","line":96,"column":32,"nodeType":"783","messageId":"817","endLine":96,"endColumn":34},{"ruleId":"799","severity":1,"message":"800","line":268,"column":13,"nodeType":"801","endLine":268,"endColumn":36},{"ruleId":"818","severity":1,"message":"819","line":284,"column":13,"nodeType":"801","messageId":"820","endLine":287,"endColumn":14,"fix":"821"},{"ruleId":"799","severity":1,"message":"800","line":288,"column":15,"nodeType":"801","endLine":288,"endColumn":36},{"ruleId":"818","severity":1,"message":"819","line":297,"column":13,"nodeType":"801","messageId":"820","endLine":297,"endColumn":72,"fix":"822"},{"ruleId":"799","severity":1,"message":"800","line":298,"column":15,"nodeType":"801","endLine":298,"endColumn":36},{"ruleId":"818","severity":1,"message":"819","line":302,"column":13,"nodeType":"801","messageId":"820","endLine":302,"endColumn":70,"fix":"823"},{"ruleId":"799","severity":1,"message":"800","line":303,"column":15,"nodeType":"801","endLine":303,"endColumn":37},{"ruleId":"773","severity":1,"message":"824","line":1,"column":28,"nodeType":"775","messageId":"776","endLine":1,"endColumn":36},{"ruleId":"773","severity":1,"message":"825","line":6,"column":8,"nodeType":"775","messageId":"776","endLine":6,"endColumn":16},{"ruleId":"773","severity":1,"message":"826","line":9,"column":10,"nodeType":"775","messageId":"776","endLine":9,"endColumn":19},{"ruleId":"773","severity":1,"message":"827","line":12,"column":9,"nodeType":"775","messageId":"776","endLine":12,"endColumn":21},{"ruleId":"773","severity":1,"message":"828","line":2,"column":37,"nodeType":"775","messageId":"776","endLine":2,"endColumn":48},{"ruleId":"795","severity":1,"message":"829","line":30,"column":8,"nodeType":"797","endLine":30,"endColumn":10,"suggestions":"830"},{"ruleId":"799","severity":1,"message":"800","line":60,"column":56,"nodeType":"801","endLine":60,"endColumn":77},{"ruleId":"799","severity":1,"message":"800","line":85,"column":55,"nodeType":"801","endLine":85,"endColumn":76},{"ruleId":"799","severity":1,"message":"800","line":86,"column":55,"nodeType":"801","endLine":86,"endColumn":77},{"ruleId":"773","severity":1,"message":"831","line":10,"column":3,"nodeType":"775","messageId":"776","endLine":10,"endColumn":7},{"ruleId":"773","severity":1,"message":"832","line":14,"column":10,"nodeType":"775","messageId":"776","endLine":14,"endColumn":14},{"ruleId":"773","severity":1,"message":"833","line":15,"column":10,"nodeType":"775","messageId":"776","endLine":15,"endColumn":25},{"ruleId":"773","severity":1,"message":"834","line":16,"column":8,"nodeType":"775","messageId":"776","endLine":16,"endColumn":15},{"ruleId":"773","severity":1,"message":"835","line":17,"column":8,"nodeType":"775","messageId":"776","endLine":17,"endColumn":15},{"ruleId":"773","severity":1,"message":"836","line":18,"column":8,"nodeType":"775","messageId":"776","endLine":18,"endColumn":16},{"ruleId":"773","severity":1,"message":"837","line":24,"column":8,"nodeType":"775","messageId":"776","endLine":24,"endColumn":14},{"ruleId":"773","severity":1,"message":"838","line":25,"column":8,"nodeType":"775","messageId":"776","endLine":25,"endColumn":13},{"ruleId":"773","severity":1,"message":"839","line":29,"column":9,"nodeType":"775","messageId":"776","endLine":29,"endColumn":24},{"ruleId":"773","severity":1,"message":"840","line":37,"column":10,"nodeType":"775","messageId":"776","endLine":37,"endColumn":23},{"ruleId":"773","severity":1,"message":"841","line":42,"column":10,"nodeType":"775","messageId":"776","endLine":42,"endColumn":19},{"ruleId":"773","severity":1,"message":"842","line":42,"column":21,"nodeType":"775","messageId":"776","endLine":42,"endColumn":33},{"ruleId":"773","severity":1,"message":"843","line":43,"column":10,"nodeType":"775","messageId":"776","endLine":43,"endColumn":20},{"ruleId":"773","severity":1,"message":"844","line":43,"column":22,"nodeType":"775","messageId":"776","endLine":43,"endColumn":35},{"ruleId":"773","severity":1,"message":"845","line":44,"column":10,"nodeType":"775","messageId":"776","endLine":44,"endColumn":22},{"ruleId":"773","severity":1,"message":"846","line":44,"column":24,"nodeType":"775","messageId":"776","endLine":44,"endColumn":39},{"ruleId":"795","severity":1,"message":"847","line":62,"column":13,"nodeType":"848","endLine":82,"endColumn":4},{"ruleId":"795","severity":1,"message":"849","line":82,"column":6,"nodeType":"797","endLine":82,"endColumn":12,"suggestions":"850"},{"ruleId":"773","severity":1,"message":"851","line":99,"column":11,"nodeType":"775","messageId":"776","endLine":99,"endColumn":18},{"ruleId":"815","severity":1,"message":"816","line":142,"column":28,"nodeType":"783","messageId":"817","endLine":142,"endColumn":30},{"ruleId":"773","severity":1,"message":"852","line":207,"column":13,"nodeType":"775","messageId":"776","endLine":207,"endColumn":19},{"ruleId":"773","severity":1,"message":"853","line":10,"column":8,"nodeType":"775","messageId":"776","endLine":10,"endColumn":12},{"ruleId":"773","severity":1,"message":"854","line":11,"column":8,"nodeType":"775","messageId":"776","endLine":11,"endColumn":12},{"ruleId":"773","severity":1,"message":"855","line":12,"column":8,"nodeType":"775","messageId":"776","endLine":12,"endColumn":14},{"ruleId":"773","severity":1,"message":"856","line":13,"column":8,"nodeType":"775","messageId":"776","endLine":13,"endColumn":12},{"ruleId":"773","severity":1,"message":"857","line":18,"column":8,"nodeType":"775","messageId":"776","endLine":18,"endColumn":17},{"ruleId":"773","severity":1,"message":"858","line":21,"column":3,"nodeType":"775","messageId":"776","endLine":21,"endColumn":15},{"ruleId":"773","severity":1,"message":"859","line":29,"column":3,"nodeType":"775","messageId":"776","endLine":29,"endColumn":17},{"ruleId":"773","severity":1,"message":"860","line":49,"column":10,"nodeType":"775","messageId":"776","endLine":49,"endColumn":20},{"ruleId":"773","severity":1,"message":"861","line":49,"column":22,"nodeType":"775","messageId":"776","endLine":49,"endColumn":35},{"ruleId":"773","severity":1,"message":"862","line":57,"column":10,"nodeType":"775","messageId":"776","endLine":57,"endColumn":17},{"ruleId":"773","severity":1,"message":"863","line":57,"column":19,"nodeType":"775","messageId":"776","endLine":57,"endColumn":28},{"ruleId":"773","severity":1,"message":"864","line":59,"column":10,"nodeType":"775","messageId":"776","endLine":59,"endColumn":25},{"ruleId":"773","severity":1,"message":"865","line":59,"column":27,"nodeType":"775","messageId":"776","endLine":59,"endColumn":45},{"ruleId":"773","severity":1,"message":"866","line":61,"column":10,"nodeType":"775","messageId":"776","endLine":61,"endColumn":20},{"ruleId":"773","severity":1,"message":"867","line":61,"column":22,"nodeType":"775","messageId":"776","endLine":61,"endColumn":35},{"ruleId":"773","severity":1,"message":"868","line":62,"column":10,"nodeType":"775","messageId":"776","endLine":62,"endColumn":20},{"ruleId":"773","severity":1,"message":"869","line":63,"column":10,"nodeType":"775","messageId":"776","endLine":63,"endColumn":15},{"ruleId":"773","severity":1,"message":"870","line":63,"column":17,"nodeType":"775","messageId":"776","endLine":63,"endColumn":25},{"ruleId":"773","severity":1,"message":"871","line":64,"column":10,"nodeType":"775","messageId":"776","endLine":64,"endColumn":23},{"ruleId":"773","severity":1,"message":"872","line":64,"column":25,"nodeType":"775","messageId":"776","endLine":64,"endColumn":41},{"ruleId":"773","severity":1,"message":"873","line":65,"column":10,"nodeType":"775","messageId":"776","endLine":65,"endColumn":21},{"ruleId":"773","severity":1,"message":"874","line":65,"column":23,"nodeType":"775","messageId":"776","endLine":65,"endColumn":37},{"ruleId":"773","severity":1,"message":"875","line":66,"column":10,"nodeType":"775","messageId":"776","endLine":66,"endColumn":19},{"ruleId":"773","severity":1,"message":"876","line":66,"column":21,"nodeType":"775","messageId":"776","endLine":66,"endColumn":33},{"ruleId":"773","severity":1,"message":"877","line":67,"column":10,"nodeType":"775","messageId":"776","endLine":67,"endColumn":20},{"ruleId":"773","severity":1,"message":"878","line":67,"column":22,"nodeType":"775","messageId":"776","endLine":67,"endColumn":35},{"ruleId":"773","severity":1,"message":"879","line":68,"column":10,"nodeType":"775","messageId":"776","endLine":68,"endColumn":18},{"ruleId":"773","severity":1,"message":"880","line":71,"column":10,"nodeType":"775","messageId":"776","endLine":71,"endColumn":21},{"ruleId":"773","severity":1,"message":"881","line":72,"column":10,"nodeType":"775","messageId":"776","endLine":72,"endColumn":22},{"ruleId":"773","severity":1,"message":"882","line":78,"column":10,"nodeType":"775","messageId":"776","endLine":78,"endColumn":24},{"ruleId":"773","severity":1,"message":"883","line":78,"column":26,"nodeType":"775","messageId":"776","endLine":78,"endColumn":43},{"ruleId":"773","severity":1,"message":"884","line":79,"column":10,"nodeType":"775","messageId":"776","endLine":79,"endColumn":25},{"ruleId":"773","severity":1,"message":"885","line":79,"column":27,"nodeType":"775","messageId":"776","endLine":79,"endColumn":45},{"ruleId":"773","severity":1,"message":"886","line":80,"column":10,"nodeType":"775","messageId":"776","endLine":80,"endColumn":18},{"ruleId":"773","severity":1,"message":"887","line":80,"column":20,"nodeType":"775","messageId":"776","endLine":80,"endColumn":31},{"ruleId":"773","severity":1,"message":"888","line":81,"column":10,"nodeType":"775","messageId":"776","endLine":81,"endColumn":19},{"ruleId":"773","severity":1,"message":"889","line":81,"column":21,"nodeType":"775","messageId":"776","endLine":81,"endColumn":33},{"ruleId":"773","severity":1,"message":"890","line":82,"column":10,"nodeType":"775","messageId":"776","endLine":82,"endColumn":17},{"ruleId":"773","severity":1,"message":"891","line":82,"column":19,"nodeType":"775","messageId":"776","endLine":82,"endColumn":36},{"ruleId":"773","severity":1,"message":"892","line":83,"column":10,"nodeType":"775","messageId":"776","endLine":83,"endColumn":17},{"ruleId":"773","severity":1,"message":"893","line":83,"column":19,"nodeType":"775","messageId":"776","endLine":83,"endColumn":29},{"ruleId":"773","severity":1,"message":"894","line":84,"column":10,"nodeType":"775","messageId":"776","endLine":84,"endColumn":22},{"ruleId":"773","severity":1,"message":"895","line":84,"column":24,"nodeType":"775","messageId":"776","endLine":84,"endColumn":40},{"ruleId":"773","severity":1,"message":"896","line":85,"column":10,"nodeType":"775","messageId":"776","endLine":85,"endColumn":21},{"ruleId":"773","severity":1,"message":"897","line":85,"column":23,"nodeType":"775","messageId":"776","endLine":85,"endColumn":31},{"ruleId":"773","severity":1,"message":"898","line":86,"column":10,"nodeType":"775","messageId":"776","endLine":86,"endColumn":19},{"ruleId":"773","severity":1,"message":"899","line":86,"column":21,"nodeType":"775","messageId":"776","endLine":86,"endColumn":33},{"ruleId":"773","severity":1,"message":"900","line":87,"column":10,"nodeType":"775","messageId":"776","endLine":87,"endColumn":16},{"ruleId":"773","severity":1,"message":"901","line":87,"column":18,"nodeType":"775","messageId":"776","endLine":87,"endColumn":27},{"ruleId":"773","severity":1,"message":"902","line":88,"column":10,"nodeType":"775","messageId":"776","endLine":88,"endColumn":29},{"ruleId":"773","severity":1,"message":"903","line":88,"column":31,"nodeType":"775","messageId":"776","endLine":88,"endColumn":46},{"ruleId":"773","severity":1,"message":"904","line":89,"column":10,"nodeType":"775","messageId":"776","endLine":89,"endColumn":21},{"ruleId":"773","severity":1,"message":"905","line":90,"column":10,"nodeType":"775","messageId":"776","endLine":90,"endColumn":17},{"ruleId":"773","severity":1,"message":"906","line":91,"column":10,"nodeType":"775","messageId":"776","endLine":91,"endColumn":27},{"ruleId":"773","severity":1,"message":"907","line":91,"column":29,"nodeType":"775","messageId":"776","endLine":91,"endColumn":48},{"ruleId":"773","severity":1,"message":"908","line":92,"column":10,"nodeType":"775","messageId":"776","endLine":92,"endColumn":30},{"ruleId":"773","severity":1,"message":"909","line":92,"column":32,"nodeType":"775","messageId":"776","endLine":92,"endColumn":55},{"ruleId":"773","severity":1,"message":"910","line":93,"column":10,"nodeType":"775","messageId":"776","endLine":93,"endColumn":16},{"ruleId":"773","severity":1,"message":"911","line":93,"column":18,"nodeType":"775","messageId":"776","endLine":93,"endColumn":27},{"ruleId":"773","severity":1,"message":"912","line":96,"column":10,"nodeType":"775","messageId":"776","endLine":96,"endColumn":17},{"ruleId":"795","severity":1,"message":"847","line":101,"column":13,"nodeType":"848","endLine":120,"endColumn":4},{"ruleId":"815","severity":1,"message":"913","line":111,"column":16,"nodeType":"783","messageId":"817","endLine":111,"endColumn":18},{"ruleId":"795","severity":1,"message":"914","line":120,"column":6,"nodeType":"797","endLine":120,"endColumn":23,"suggestions":"915"},{"ruleId":"815","severity":1,"message":"913","line":161,"column":32,"nodeType":"783","messageId":"817","endLine":161,"endColumn":34},{"ruleId":"815","severity":1,"message":"913","line":296,"column":19,"nodeType":"783","messageId":"817","endLine":296,"endColumn":21},{"ruleId":"815","severity":1,"message":"816","line":362,"column":21,"nodeType":"783","messageId":"817","endLine":362,"endColumn":23},{"ruleId":"815","severity":1,"message":"913","line":411,"column":40,"nodeType":"783","messageId":"817","endLine":411,"endColumn":42},{"ruleId":"815","severity":1,"message":"913","line":428,"column":21,"nodeType":"783","messageId":"817","endLine":428,"endColumn":23},{"ruleId":"773","severity":1,"message":"916","line":433,"column":13,"nodeType":"775","messageId":"776","endLine":433,"endColumn":30},{"ruleId":"773","severity":1,"message":"917","line":437,"column":13,"nodeType":"775","messageId":"776","endLine":437,"endColumn":29},{"ruleId":"773","severity":1,"message":"918","line":442,"column":13,"nodeType":"775","messageId":"776","endLine":442,"endColumn":29},{"ruleId":"773","severity":1,"message":"919","line":443,"column":13,"nodeType":"775","messageId":"776","endLine":443,"endColumn":28},{"ruleId":"815","severity":1,"message":"913","line":508,"column":22,"nodeType":"783","messageId":"817","endLine":508,"endColumn":24},{"ruleId":"815","severity":1,"message":"816","line":518,"column":38,"nodeType":"783","messageId":"817","endLine":518,"endColumn":40},{"ruleId":"815","severity":1,"message":"816","line":520,"column":45,"nodeType":"783","messageId":"817","endLine":520,"endColumn":47},{"ruleId":"815","severity":1,"message":"816","line":524,"column":18,"nodeType":"783","messageId":"817","endLine":524,"endColumn":20},{"ruleId":"815","severity":1,"message":"913","line":525,"column":27,"nodeType":"783","messageId":"817","endLine":525,"endColumn":29},{"ruleId":"815","severity":1,"message":"913","line":528,"column":24,"nodeType":"783","messageId":"817","endLine":528,"endColumn":26},{"ruleId":"815","severity":1,"message":"913","line":542,"column":16,"nodeType":"783","messageId":"817","endLine":542,"endColumn":18},{"ruleId":"815","severity":1,"message":"913","line":546,"column":23,"nodeType":"783","messageId":"817","endLine":546,"endColumn":25},{"ruleId":"818","severity":1,"message":"819","line":558,"column":11,"nodeType":"801","messageId":"820","endLine":564,"endColumn":12,"fix":"920"},{"ruleId":"818","severity":1,"message":"819","line":583,"column":15,"nodeType":"801","messageId":"820","endLine":587,"endColumn":16,"fix":"921"},{"ruleId":"818","severity":1,"message":"819","line":614,"column":15,"nodeType":"801","messageId":"820","endLine":618,"endColumn":16,"fix":"922"},{"ruleId":"815","severity":1,"message":"913","line":824,"column":42,"nodeType":"783","messageId":"817","endLine":824,"endColumn":44},{"ruleId":"773","severity":1,"message":"923","line":19,"column":10,"nodeType":"775","messageId":"776","endLine":19,"endColumn":22},{"ruleId":"773","severity":1,"message":"924","line":33,"column":9,"nodeType":"775","messageId":"776","endLine":33,"endColumn":24},{"ruleId":"773","severity":1,"message":"925","line":52,"column":10,"nodeType":"775","messageId":"776","endLine":52,"endColumn":13},{"ruleId":"773","severity":1,"message":"926","line":52,"column":15,"nodeType":"775","messageId":"776","endLine":52,"endColumn":21},{"ruleId":"773","severity":1,"message":"927","line":29,"column":10,"nodeType":"775","messageId":"776","endLine":29,"endColumn":21},{"ruleId":"773","severity":1,"message":"908","line":93,"column":10,"nodeType":"775","messageId":"776","endLine":93,"endColumn":30},{"ruleId":"773","severity":1,"message":"910","line":94,"column":10,"nodeType":"775","messageId":"776","endLine":94,"endColumn":16},{"ruleId":"795","severity":1,"message":"829","line":103,"column":6,"nodeType":"797","endLine":103,"endColumn":25,"suggestions":"928"},{"ruleId":"773","severity":1,"message":"929","line":152,"column":9,"nodeType":"775","messageId":"776","endLine":152,"endColumn":30},{"ruleId":"773","severity":1,"message":"930","line":201,"column":15,"nodeType":"775","messageId":"776","endLine":201,"endColumn":16},{"ruleId":"773","severity":1,"message":"930","line":224,"column":15,"nodeType":"775","messageId":"776","endLine":224,"endColumn":16},{"ruleId":"773","severity":1,"message":"930","line":370,"column":21,"nodeType":"775","messageId":"776","endLine":370,"endColumn":22},{"ruleId":"773","severity":1,"message":"930","line":415,"column":21,"nodeType":"775","messageId":"776","endLine":415,"endColumn":22},{"ruleId":"773","severity":1,"message":"931","line":461,"column":11,"nodeType":"775","messageId":"776","endLine":461,"endColumn":14},{"ruleId":"815","severity":1,"message":"816","line":488,"column":18,"nodeType":"783","messageId":"817","endLine":488,"endColumn":20},{"ruleId":"773","severity":1,"message":"932","line":605,"column":5,"nodeType":"775","messageId":"776","endLine":605,"endColumn":14},{"ruleId":"799","severity":1,"message":"800","line":877,"column":15,"nodeType":"801","endLine":881,"endColumn":17},{"ruleId":"799","severity":1,"message":"800","line":882,"column":15,"nodeType":"801","endLine":882,"endColumn":80},{"ruleId":"799","severity":1,"message":"800","line":911,"column":15,"nodeType":"801","endLine":911,"endColumn":59},{"ruleId":"773","severity":1,"message":"933","line":31,"column":10,"nodeType":"775","messageId":"776","endLine":31,"endColumn":20},{"ruleId":"773","severity":1,"message":"934","line":36,"column":5,"nodeType":"775","messageId":"776","endLine":36,"endColumn":12},{"ruleId":"773","severity":1,"message":"935","line":51,"column":10,"nodeType":"775","messageId":"776","endLine":51,"endColumn":16},{"ruleId":"773","severity":1,"message":"936","line":51,"column":18,"nodeType":"775","messageId":"776","endLine":51,"endColumn":27},{"ruleId":"773","severity":1,"message":"868","line":58,"column":10,"nodeType":"775","messageId":"776","endLine":58,"endColumn":20},{"ruleId":"815","severity":1,"message":"913","line":106,"column":17,"nodeType":"783","messageId":"817","endLine":106,"endColumn":19},{"ruleId":"773","severity":1,"message":"937","line":122,"column":9,"nodeType":"775","messageId":"776","endLine":122,"endColumn":23},{"ruleId":"815","severity":1,"message":"913","line":128,"column":26,"nodeType":"783","messageId":"817","endLine":128,"endColumn":28},{"ruleId":"795","severity":1,"message":"829","line":141,"column":6,"nodeType":"797","endLine":141,"endColumn":23,"suggestions":"938"},{"ruleId":"773","severity":1,"message":"939","line":158,"column":11,"nodeType":"775","messageId":"776","endLine":158,"endColumn":28},{"ruleId":"773","severity":1,"message":"940","line":159,"column":11,"nodeType":"775","messageId":"776","endLine":159,"endColumn":33},{"ruleId":"815","severity":1,"message":"816","line":168,"column":113,"nodeType":"783","messageId":"817","endLine":168,"endColumn":115},{"ruleId":"773","severity":1,"message":"941","line":223,"column":9,"nodeType":"775","messageId":"776","endLine":223,"endColumn":23},{"ruleId":"799","severity":1,"message":"800","line":397,"column":19,"nodeType":"801","endLine":397,"endColumn":41},{"ruleId":"799","severity":1,"message":"800","line":420,"column":21,"nodeType":"801","endLine":420,"endColumn":45},{"ruleId":"773","severity":1,"message":"942","line":14,"column":3,"nodeType":"775","messageId":"776","endLine":14,"endColumn":29},{"ruleId":"773","severity":1,"message":"855","line":33,"column":8,"nodeType":"775","messageId":"776","endLine":33,"endColumn":14},{"ruleId":"773","severity":1,"message":"943","line":38,"column":8,"nodeType":"775","messageId":"776","endLine":38,"endColumn":24},{"ruleId":"773","severity":1,"message":"935","line":64,"column":10,"nodeType":"775","messageId":"776","endLine":64,"endColumn":16},{"ruleId":"773","severity":1,"message":"936","line":64,"column":18,"nodeType":"775","messageId":"776","endLine":64,"endColumn":27},{"ruleId":"773","severity":1,"message":"944","line":68,"column":10,"nodeType":"775","messageId":"776","endLine":68,"endColumn":17},{"ruleId":"773","severity":1,"message":"945","line":69,"column":10,"nodeType":"775","messageId":"776","endLine":69,"endColumn":22},{"ruleId":"773","severity":1,"message":"868","line":71,"column":10,"nodeType":"775","messageId":"776","endLine":71,"endColumn":20},{"ruleId":"773","severity":1,"message":"946","line":84,"column":10,"nodeType":"775","messageId":"776","endLine":84,"endColumn":19},{"ruleId":"773","severity":1,"message":"947","line":85,"column":10,"nodeType":"775","messageId":"776","endLine":85,"endColumn":24},{"ruleId":"773","severity":1,"message":"948","line":99,"column":9,"nodeType":"775","messageId":"776","endLine":99,"endColumn":23},{"ruleId":"795","severity":1,"message":"829","line":122,"column":6,"nodeType":"797","endLine":122,"endColumn":23,"suggestions":"949"},{"ruleId":"799","severity":1,"message":"800","line":380,"column":21,"nodeType":"801","endLine":380,"endColumn":43},{"ruleId":"799","severity":1,"message":"800","line":405,"column":21,"nodeType":"801","endLine":405,"endColumn":45},{"ruleId":"773","severity":1,"message":"950","line":124,"column":9,"nodeType":"775","messageId":"776","endLine":124,"endColumn":15},{"ruleId":"773","severity":1,"message":"951","line":21,"column":5,"nodeType":"775","messageId":"776","endLine":21,"endColumn":26},{"ruleId":"773","severity":1,"message":"779","line":145,"column":17,"nodeType":"775","messageId":"776","endLine":145,"endColumn":22},{"ruleId":"773","severity":1,"message":"780","line":153,"column":21,"nodeType":"775","messageId":"776","endLine":153,"endColumn":29},{"ruleId":"773","severity":1,"message":"779","line":179,"column":19,"nodeType":"775","messageId":"776","endLine":179,"endColumn":24},{"ruleId":"773","severity":1,"message":"780","line":187,"column":23,"nodeType":"775","messageId":"776","endLine":187,"endColumn":31},{"ruleId":"773","severity":1,"message":"779","line":216,"column":19,"nodeType":"775","messageId":"776","endLine":216,"endColumn":24},{"ruleId":"773","severity":1,"message":"933","line":7,"column":3,"nodeType":"775","messageId":"776","endLine":7,"endColumn":13},{"ruleId":"952","severity":1,"message":"953","line":121,"column":5,"nodeType":"954","messageId":"955","endLine":129,"endColumn":22},{"ruleId":"773","severity":1,"message":"956","line":1291,"column":7,"nodeType":"775","messageId":"776","endLine":1291,"endColumn":12},{"ruleId":"773","severity":1,"message":"956","line":1325,"column":7,"nodeType":"775","messageId":"776","endLine":1325,"endColumn":12},{"ruleId":"815","severity":1,"message":"816","line":1328,"column":44,"nodeType":"783","messageId":"817","endLine":1328,"endColumn":46},{"ruleId":"799","severity":1,"message":"800","line":38,"column":19,"nodeType":"801","endLine":38,"endColumn":46},{"ruleId":"799","severity":1,"message":"800","line":11,"column":35,"nodeType":"801","endLine":11,"endColumn":59},{"ruleId":"773","severity":1,"message":"957","line":8,"column":8,"nodeType":"775","messageId":"776","endLine":8,"endColumn":29},{"ruleId":"773","severity":1,"message":"958","line":11,"column":8,"nodeType":"775","messageId":"776","endLine":11,"endColumn":20},{"ruleId":"773","severity":1,"message":"959","line":13,"column":8,"nodeType":"775","messageId":"776","endLine":13,"endColumn":19},{"ruleId":"773","severity":1,"message":"960","line":14,"column":8,"nodeType":"775","messageId":"776","endLine":14,"endColumn":19},{"ruleId":"773","severity":1,"message":"961","line":15,"column":8,"nodeType":"775","messageId":"776","endLine":15,"endColumn":15},{"ruleId":"773","severity":1,"message":"962","line":16,"column":8,"nodeType":"775","messageId":"776","endLine":16,"endColumn":18},{"ruleId":"795","severity":1,"message":"963","line":73,"column":6,"nodeType":"797","endLine":73,"endColumn":8,"suggestions":"964"},{"ruleId":"799","severity":1,"message":"800","line":94,"column":21,"nodeType":"801","endLine":94,"endColumn":47},{"ruleId":"799","severity":1,"message":"800","line":112,"column":21,"nodeType":"801","endLine":112,"endColumn":45},{"ruleId":"773","severity":1,"message":"965","line":39,"column":13,"nodeType":"775","messageId":"776","endLine":39,"endColumn":23},{"ruleId":"773","severity":1,"message":"966","line":218,"column":13,"nodeType":"775","messageId":"776","endLine":218,"endColumn":16},{"ruleId":"773","severity":1,"message":"967","line":2,"column":27,"nodeType":"775","messageId":"776","endLine":2,"endColumn":33},{"ruleId":"773","severity":1,"message":"968","line":9,"column":9,"nodeType":"775","messageId":"776","endLine":9,"endColumn":27},{"ruleId":"773","severity":1,"message":"969","line":5,"column":10,"nodeType":"775","messageId":"776","endLine":5,"endColumn":15},{"ruleId":"773","severity":1,"message":"970","line":10,"column":12,"nodeType":"775","messageId":"776","endLine":10,"endColumn":28},{"ruleId":"795","severity":1,"message":"971","line":14,"column":8,"nodeType":"797","endLine":14,"endColumn":10,"suggestions":"972"},{"ruleId":"773","severity":1,"message":"973","line":2,"column":18,"nodeType":"775","messageId":"776","endLine":2,"endColumn":23},{"ruleId":"773","severity":1,"message":"974","line":13,"column":3,"nodeType":"775","messageId":"776","endLine":13,"endColumn":14},{"ruleId":"773","severity":1,"message":"975","line":21,"column":8,"nodeType":"775","messageId":"776","endLine":21,"endColumn":18},{"ruleId":"773","severity":1,"message":"976","line":30,"column":5,"nodeType":"775","messageId":"776","endLine":30,"endColumn":10},{"ruleId":"773","severity":1,"message":"977","line":31,"column":5,"nodeType":"775","messageId":"776","endLine":31,"endColumn":17},{"ruleId":"773","severity":1,"message":"978","line":32,"column":5,"nodeType":"775","messageId":"776","endLine":32,"endColumn":17},{"ruleId":"773","severity":1,"message":"979","line":35,"column":5,"nodeType":"775","messageId":"776","endLine":35,"endColumn":19},{"ruleId":"773","severity":1,"message":"980","line":42,"column":10,"nodeType":"775","messageId":"776","endLine":42,"endColumn":21},{"ruleId":"773","severity":1,"message":"981","line":51,"column":10,"nodeType":"775","messageId":"776","endLine":51,"endColumn":13},{"ruleId":"815","severity":1,"message":"913","line":62,"column":26,"nodeType":"783","messageId":"817","endLine":62,"endColumn":28},{"ruleId":"815","severity":1,"message":"816","line":97,"column":37,"nodeType":"783","messageId":"817","endLine":97,"endColumn":39},{"ruleId":"815","severity":1,"message":"913","line":111,"column":40,"nodeType":"783","messageId":"817","endLine":111,"endColumn":42},{"ruleId":"815","severity":1,"message":"816","line":123,"column":37,"nodeType":"783","messageId":"817","endLine":123,"endColumn":39},{"ruleId":"815","severity":1,"message":"816","line":298,"column":21,"nodeType":"783","messageId":"817","endLine":298,"endColumn":23},{"ruleId":"815","severity":1,"message":"913","line":354,"column":19,"nodeType":"783","messageId":"817","endLine":354,"endColumn":21},{"ruleId":"815","severity":1,"message":"913","line":374,"column":21,"nodeType":"783","messageId":"817","endLine":374,"endColumn":23},{"ruleId":"773","severity":1,"message":"982","line":442,"column":13,"nodeType":"775","messageId":"776","endLine":442,"endColumn":24},{"ruleId":"815","severity":1,"message":"913","line":454,"column":16,"nodeType":"783","messageId":"817","endLine":454,"endColumn":18},{"ruleId":"815","severity":1,"message":"913","line":458,"column":23,"nodeType":"783","messageId":"817","endLine":458,"endColumn":25},{"ruleId":"773","severity":1,"message":"983","line":462,"column":9,"nodeType":"775","messageId":"776","endLine":462,"endColumn":26},{"ruleId":"815","severity":1,"message":"913","line":463,"column":16,"nodeType":"783","messageId":"817","endLine":463,"endColumn":18},{"ruleId":"815","severity":1,"message":"913","line":467,"column":28,"nodeType":"783","messageId":"817","endLine":467,"endColumn":30},{"ruleId":"815","severity":1,"message":"913","line":468,"column":31,"nodeType":"783","messageId":"817","endLine":468,"endColumn":33},{"ruleId":"815","severity":1,"message":"816","line":469,"column":23,"nodeType":"783","messageId":"817","endLine":469,"endColumn":25},{"ruleId":"795","severity":1,"message":"847","line":483,"column":13,"nodeType":"848","endLine":486,"endColumn":4},{"ruleId":"795","severity":1,"message":"984","line":486,"column":6,"nodeType":"797","endLine":486,"endColumn":23,"suggestions":"985"},{"ruleId":"799","severity":1,"message":"800","line":493,"column":15,"nodeType":"801","endLine":499,"endColumn":17},{"ruleId":"799","severity":1,"message":"800","line":502,"column":15,"nodeType":"801","endLine":508,"endColumn":17},{"ruleId":"799","severity":1,"message":"800","line":557,"column":17,"nodeType":"801","endLine":557,"endColumn":40},{"ruleId":"773","severity":1,"message":"824","line":1,"column":17,"nodeType":"775","messageId":"776","endLine":1,"endColumn":25},{"ruleId":"773","severity":1,"message":"967","line":3,"column":27,"nodeType":"775","messageId":"776","endLine":3,"endColumn":33},{"ruleId":"815","severity":1,"message":"816","line":9,"column":20,"nodeType":"783","messageId":"817","endLine":9,"endColumn":22},{"ruleId":"815","severity":1,"message":"816","line":21,"column":20,"nodeType":"783","messageId":"817","endLine":21,"endColumn":22},{"ruleId":"773","severity":1,"message":"986","line":24,"column":10,"nodeType":"775","messageId":"776","endLine":24,"endColumn":14},{"ruleId":"773","severity":1,"message":"987","line":25,"column":9,"nodeType":"775","messageId":"776","endLine":25,"endColumn":20},{"ruleId":"773","severity":1,"message":"988","line":26,"column":9,"nodeType":"775","messageId":"776","endLine":26,"endColumn":19},{"ruleId":"773","severity":1,"message":"976","line":33,"column":75,"nodeType":"775","messageId":"776","endLine":33,"endColumn":80},{"ruleId":"773","severity":1,"message":"977","line":33,"column":82,"nodeType":"775","messageId":"776","endLine":33,"endColumn":94},{"ruleId":"773","severity":1,"message":"978","line":33,"column":96,"nodeType":"775","messageId":"776","endLine":33,"endColumn":108},{"ruleId":"773","severity":1,"message":"989","line":34,"column":50,"nodeType":"775","messageId":"776","endLine":34,"endColumn":56},{"ruleId":"773","severity":1,"message":"980","line":38,"column":10,"nodeType":"775","messageId":"776","endLine":38,"endColumn":21},{"ruleId":"773","severity":1,"message":"990","line":46,"column":10,"nodeType":"775","messageId":"776","endLine":46,"endColumn":24},{"ruleId":"773","severity":1,"message":"991","line":49,"column":10,"nodeType":"775","messageId":"776","endLine":49,"endColumn":21},{"ruleId":"795","severity":1,"message":"992","line":56,"column":6,"nodeType":"797","endLine":56,"endColumn":23,"suggestions":"993"},{"ruleId":"815","severity":1,"message":"913","line":62,"column":26,"nodeType":"783","messageId":"817","endLine":62,"endColumn":28},{"ruleId":"815","severity":1,"message":"913","line":72,"column":49,"nodeType":"783","messageId":"817","endLine":72,"endColumn":51},{"ruleId":"815","severity":1,"message":"913","line":90,"column":26,"nodeType":"783","messageId":"817","endLine":90,"endColumn":28},{"ruleId":"815","severity":1,"message":"913","line":100,"column":40,"nodeType":"783","messageId":"817","endLine":100,"endColumn":42},{"ruleId":"773","severity":1,"message":"994","line":130,"column":11,"nodeType":"775","messageId":"776","endLine":130,"endColumn":16},{"ruleId":"815","severity":1,"message":"816","line":146,"column":17,"nodeType":"783","messageId":"817","endLine":146,"endColumn":19},{"ruleId":"815","severity":1,"message":"816","line":243,"column":21,"nodeType":"783","messageId":"817","endLine":243,"endColumn":23},{"ruleId":"815","severity":1,"message":"913","line":282,"column":19,"nodeType":"783","messageId":"817","endLine":282,"endColumn":21},{"ruleId":"815","severity":1,"message":"913","line":293,"column":22,"nodeType":"783","messageId":"817","endLine":293,"endColumn":24},{"ruleId":"815","severity":1,"message":"816","line":301,"column":38,"nodeType":"783","messageId":"817","endLine":301,"endColumn":40},{"ruleId":"815","severity":1,"message":"816","line":303,"column":45,"nodeType":"783","messageId":"817","endLine":303,"endColumn":47},{"ruleId":"815","severity":1,"message":"816","line":307,"column":18,"nodeType":"783","messageId":"817","endLine":307,"endColumn":20},{"ruleId":"815","severity":1,"message":"913","line":308,"column":27,"nodeType":"783","messageId":"817","endLine":308,"endColumn":29},{"ruleId":"815","severity":1,"message":"913","line":310,"column":33,"nodeType":"783","messageId":"817","endLine":310,"endColumn":35},{"ruleId":"815","severity":1,"message":"913","line":323,"column":21,"nodeType":"783","messageId":"817","endLine":323,"endColumn":23},{"ruleId":"799","severity":1,"message":"800","line":358,"column":13,"nodeType":"801","endLine":358,"endColumn":115},{"ruleId":"799","severity":1,"message":"800","line":366,"column":13,"nodeType":"801","endLine":366,"endColumn":110},{"ruleId":"995","severity":1,"message":"996","line":378,"column":17,"nodeType":"783","messageId":"997","endLine":378,"endColumn":45},{"ruleId":"995","severity":1,"message":"996","line":379,"column":19,"nodeType":"783","messageId":"997","endLine":379,"endColumn":47},{"ruleId":"799","severity":1,"message":"800","line":386,"column":15,"nodeType":"801","endLine":386,"endColumn":38},{"ruleId":"995","severity":1,"message":"996","line":413,"column":22,"nodeType":"783","messageId":"997","endLine":413,"endColumn":50},{"ruleId":"998","severity":1,"message":"999","line":419,"column":15,"nodeType":"801","endLine":419,"endColumn":27},{"ruleId":"998","severity":1,"message":"999","line":420,"column":15,"nodeType":"801","endLine":420,"endColumn":27},{"ruleId":"773","severity":1,"message":"1000","line":25,"column":15,"nodeType":"775","messageId":"776","endLine":25,"endColumn":27},{"ruleId":"773","severity":1,"message":"1001","line":292,"column":17,"nodeType":"775","messageId":"776","endLine":292,"endColumn":21},{"ruleId":"773","severity":1,"message":"794","line":1,"column":10,"nodeType":"775","messageId":"776","endLine":1,"endColumn":21},{"ruleId":"773","severity":1,"message":"1002","line":2,"column":10,"nodeType":"775","messageId":"776","endLine":2,"endColumn":22},{"ruleId":"773","severity":1,"message":"1003","line":2,"column":24,"nodeType":"775","messageId":"776","endLine":2,"endColumn":35},{"ruleId":"773","severity":1,"message":"1004","line":3,"column":10,"nodeType":"775","messageId":"776","endLine":3,"endColumn":24},{"ruleId":"773","severity":1,"message":"1005","line":113,"column":9,"nodeType":"775","messageId":"776","endLine":113,"endColumn":14},{"ruleId":"773","severity":1,"message":"1005","line":136,"column":9,"nodeType":"775","messageId":"776","endLine":136,"endColumn":14},{"ruleId":"773","severity":1,"message":"1005","line":159,"column":9,"nodeType":"775","messageId":"776","endLine":159,"endColumn":14},{"ruleId":"773","severity":1,"message":"1005","line":183,"column":9,"nodeType":"775","messageId":"776","endLine":183,"endColumn":14},{"ruleId":"773","severity":1,"message":"1005","line":205,"column":9,"nodeType":"775","messageId":"776","endLine":205,"endColumn":14},{"ruleId":"773","severity":1,"message":"1005","line":227,"column":9,"nodeType":"775","messageId":"776","endLine":227,"endColumn":14},{"ruleId":"773","severity":1,"message":"1005","line":251,"column":9,"nodeType":"775","messageId":"776","endLine":251,"endColumn":14},{"ruleId":"773","severity":1,"message":"1005","line":271,"column":9,"nodeType":"775","messageId":"776","endLine":271,"endColumn":14},{"ruleId":"773","severity":1,"message":"1005","line":296,"column":9,"nodeType":"775","messageId":"776","endLine":296,"endColumn":14},{"ruleId":"773","severity":1,"message":"1005","line":321,"column":9,"nodeType":"775","messageId":"776","endLine":321,"endColumn":14},{"ruleId":"773","severity":1,"message":"855","line":1,"column":8,"nodeType":"775","messageId":"776","endLine":1,"endColumn":14},{"ruleId":"773","severity":1,"message":"1006","line":2,"column":8,"nodeType":"775","messageId":"776","endLine":2,"endColumn":11},{"ruleId":"773","severity":1,"message":"1007","line":3,"column":8,"nodeType":"775","messageId":"776","endLine":3,"endColumn":11},{"ruleId":"773","severity":1,"message":"854","line":5,"column":8,"nodeType":"775","messageId":"776","endLine":5,"endColumn":12},{"ruleId":"773","severity":1,"message":"1008","line":6,"column":8,"nodeType":"775","messageId":"776","endLine":6,"endColumn":11},{"ruleId":"773","severity":1,"message":"975","line":7,"column":8,"nodeType":"775","messageId":"776","endLine":7,"endColumn":18},{"ruleId":"773","severity":1,"message":"1009","line":8,"column":8,"nodeType":"775","messageId":"776","endLine":8,"endColumn":12},{"ruleId":"773","severity":1,"message":"1010","line":9,"column":8,"nodeType":"775","messageId":"776","endLine":9,"endColumn":16},{"ruleId":"773","severity":1,"message":"1011","line":10,"column":8,"nodeType":"775","messageId":"776","endLine":10,"endColumn":12},{"ruleId":"773","severity":1,"message":"1012","line":11,"column":8,"nodeType":"775","messageId":"776","endLine":11,"endColumn":12},{"ruleId":"773","severity":1,"message":"853","line":12,"column":8,"nodeType":"775","messageId":"776","endLine":12,"endColumn":12},{"ruleId":"773","severity":1,"message":"1013","line":18,"column":8,"nodeType":"775","messageId":"776","endLine":18,"endColumn":14},{"ruleId":"773","severity":1,"message":"1014","line":20,"column":8,"nodeType":"775","messageId":"776","endLine":20,"endColumn":12},{"ruleId":"799","severity":1,"message":"800","line":12,"column":12,"nodeType":"801","endLine":12,"endColumn":32},{"ruleId":"773","severity":1,"message":"832","line":3,"column":10,"nodeType":"775","messageId":"776","endLine":3,"endColumn":14},{"ruleId":"799","severity":1,"message":"800","line":32,"column":41,"nodeType":"801","endLine":32,"endColumn":91},{"ruleId":"799","severity":1,"message":"800","line":36,"column":15,"nodeType":"801","endLine":36,"endColumn":73},{"ruleId":"773","severity":1,"message":"1015","line":2,"column":21,"nodeType":"775","messageId":"776","endLine":2,"endColumn":24},{"ruleId":"773","severity":1,"message":"1016","line":3,"column":8,"nodeType":"775","messageId":"776","endLine":3,"endColumn":21},{"ruleId":"773","severity":1,"message":"1017","line":5,"column":8,"nodeType":"775","messageId":"776","endLine":5,"endColumn":21},{"ruleId":"773","severity":1,"message":"1018","line":6,"column":8,"nodeType":"775","messageId":"776","endLine":6,"endColumn":18},{"ruleId":"773","severity":1,"message":"1019","line":7,"column":8,"nodeType":"775","messageId":"776","endLine":7,"endColumn":16},{"ruleId":"773","severity":1,"message":"1020","line":8,"column":8,"nodeType":"775","messageId":"776","endLine":8,"endColumn":16},{"ruleId":"773","severity":1,"message":"1021","line":9,"column":8,"nodeType":"775","messageId":"776","endLine":9,"endColumn":15},{"ruleId":"773","severity":1,"message":"1022","line":14,"column":10,"nodeType":"775","messageId":"776","endLine":14,"endColumn":28},{"ruleId":"773","severity":1,"message":"1023","line":15,"column":10,"nodeType":"775","messageId":"776","endLine":15,"endColumn":26},{"ruleId":"773","severity":1,"message":"859","line":20,"column":3,"nodeType":"775","messageId":"776","endLine":20,"endColumn":17},{"ruleId":"773","severity":1,"message":"1024","line":21,"column":3,"nodeType":"775","messageId":"776","endLine":21,"endColumn":20},{"ruleId":"773","severity":1,"message":"967","line":26,"column":8,"nodeType":"775","messageId":"776","endLine":26,"endColumn":14},{"ruleId":"773","severity":1,"message":"1025","line":27,"column":10,"nodeType":"775","messageId":"776","endLine":27,"endColumn":19},{"ruleId":"773","severity":1,"message":"1026","line":28,"column":8,"nodeType":"775","messageId":"776","endLine":28,"endColumn":19},{"ruleId":"773","severity":1,"message":"1027","line":29,"column":8,"nodeType":"775","messageId":"776","endLine":29,"endColumn":26},{"ruleId":"773","severity":1,"message":"1028","line":31,"column":8,"nodeType":"775","messageId":"776","endLine":31,"endColumn":20},{"ruleId":"773","severity":1,"message":"832","line":32,"column":10,"nodeType":"775","messageId":"776","endLine":32,"endColumn":14},{"ruleId":"773","severity":1,"message":"1029","line":37,"column":10,"nodeType":"775","messageId":"776","endLine":37,"endColumn":15},{"ruleId":"773","severity":1,"message":"1030","line":38,"column":9,"nodeType":"775","messageId":"776","endLine":38,"endColumn":21},{"ruleId":"773","severity":1,"message":"1031","line":39,"column":9,"nodeType":"775","messageId":"776","endLine":39,"endColumn":20},{"ruleId":"773","severity":1,"message":"1028","line":17,"column":8,"nodeType":"775","messageId":"776","endLine":17,"endColumn":20},{"ruleId":"773","severity":1,"message":"1032","line":32,"column":10,"nodeType":"775","messageId":"776","endLine":32,"endColumn":22},{"ruleId":"773","severity":1,"message":"1033","line":39,"column":9,"nodeType":"775","messageId":"776","endLine":39,"endColumn":28},{"ruleId":"773","severity":1,"message":"1034","line":40,"column":9,"nodeType":"775","messageId":"776","endLine":40,"endColumn":26},{"ruleId":"795","severity":1,"message":"829","line":50,"column":6,"nodeType":"797","endLine":50,"endColumn":23,"suggestions":"1035"},{"ruleId":"773","severity":1,"message":"1036","line":52,"column":9,"nodeType":"775","messageId":"776","endLine":52,"endColumn":23},{"ruleId":"799","severity":1,"message":"800","line":70,"column":15,"nodeType":"801","endLine":74,"endColumn":17},{"ruleId":"799","severity":1,"message":"800","line":75,"column":15,"nodeType":"801","endLine":75,"endColumn":80},{"ruleId":"773","severity":1,"message":"978","line":22,"column":9,"nodeType":"775","messageId":"776","endLine":22,"endColumn":21},{"ruleId":"773","severity":1,"message":"1037","line":27,"column":10,"nodeType":"775","messageId":"776","endLine":27,"endColumn":17},{"ruleId":"773","severity":1,"message":"1038","line":28,"column":9,"nodeType":"775","messageId":"776","endLine":28,"endColumn":24},{"ruleId":"773","severity":1,"message":"1039","line":34,"column":9,"nodeType":"775","messageId":"776","endLine":34,"endColumn":30},{"ruleId":"773","severity":1,"message":"1040","line":3,"column":26,"nodeType":"775","messageId":"776","endLine":3,"endColumn":30},{"ruleId":"773","severity":1,"message":"1041","line":3,"column":32,"nodeType":"775","messageId":"776","endLine":3,"endColumn":35},{"ruleId":"773","severity":1,"message":"1020","line":11,"column":8,"nodeType":"775","messageId":"776","endLine":11,"endColumn":16},{"ruleId":"773","severity":1,"message":"1021","line":12,"column":8,"nodeType":"775","messageId":"776","endLine":12,"endColumn":15},{"ruleId":"773","severity":1,"message":"1042","line":13,"column":8,"nodeType":"775","messageId":"776","endLine":13,"endColumn":18},{"ruleId":"773","severity":1,"message":"967","line":36,"column":8,"nodeType":"775","messageId":"776","endLine":36,"endColumn":14},{"ruleId":"773","severity":1,"message":"986","line":42,"column":10,"nodeType":"775","messageId":"776","endLine":42,"endColumn":14},{"ruleId":"773","severity":1,"message":"987","line":43,"column":9,"nodeType":"775","messageId":"776","endLine":43,"endColumn":20},{"ruleId":"773","severity":1,"message":"988","line":44,"column":9,"nodeType":"775","messageId":"776","endLine":44,"endColumn":19},{"ruleId":"773","severity":1,"message":"1029","line":45,"column":10,"nodeType":"775","messageId":"776","endLine":45,"endColumn":15},{"ruleId":"773","severity":1,"message":"1043","line":51,"column":10,"nodeType":"775","messageId":"776","endLine":51,"endColumn":21},{"ruleId":"773","severity":1,"message":"1044","line":51,"column":23,"nodeType":"775","messageId":"776","endLine":51,"endColumn":37},{"ruleId":"773","severity":1,"message":"1045","line":78,"column":10,"nodeType":"775","messageId":"776","endLine":78,"endColumn":26},{"ruleId":"773","severity":1,"message":"1046","line":79,"column":10,"nodeType":"775","messageId":"776","endLine":79,"endColumn":26},{"ruleId":"773","severity":1,"message":"1047","line":81,"column":10,"nodeType":"775","messageId":"776","endLine":81,"endColumn":24},{"ruleId":"773","severity":1,"message":"1048","line":83,"column":10,"nodeType":"775","messageId":"776","endLine":83,"endColumn":25},{"ruleId":"773","severity":1,"message":"1049","line":87,"column":10,"nodeType":"775","messageId":"776","endLine":87,"endColumn":31},{"ruleId":"773","severity":1,"message":"1050","line":91,"column":10,"nodeType":"775","messageId":"776","endLine":91,"endColumn":28},{"ruleId":"773","severity":1,"message":"1051","line":92,"column":10,"nodeType":"775","messageId":"776","endLine":92,"endColumn":23},{"ruleId":"773","severity":1,"message":"1052","line":93,"column":10,"nodeType":"775","messageId":"776","endLine":93,"endColumn":23},{"ruleId":"773","severity":1,"message":"1032","line":98,"column":10,"nodeType":"775","messageId":"776","endLine":98,"endColumn":22},{"ruleId":"773","severity":1,"message":"1053","line":100,"column":10,"nodeType":"775","messageId":"776","endLine":100,"endColumn":27},{"ruleId":"773","severity":1,"message":"1054","line":100,"column":29,"nodeType":"775","messageId":"776","endLine":100,"endColumn":49},{"ruleId":"773","severity":1,"message":"1055","line":108,"column":10,"nodeType":"775","messageId":"776","endLine":108,"endColumn":22},{"ruleId":"773","severity":1,"message":"1056","line":108,"column":24,"nodeType":"775","messageId":"776","endLine":108,"endColumn":38},{"ruleId":"795","severity":1,"message":"829","line":120,"column":6,"nodeType":"797","endLine":120,"endColumn":25,"suggestions":"1057"},{"ruleId":"795","severity":1,"message":"1058","line":126,"column":6,"nodeType":"797","endLine":126,"endColumn":65,"suggestions":"1059"},{"ruleId":"773","severity":1,"message":"930","line":180,"column":15,"nodeType":"775","messageId":"776","endLine":180,"endColumn":16},{"ruleId":"773","severity":1,"message":"930","line":205,"column":15,"nodeType":"775","messageId":"776","endLine":205,"endColumn":16},{"ruleId":"773","severity":1,"message":"1060","line":333,"column":11,"nodeType":"775","messageId":"776","endLine":333,"endColumn":18},{"ruleId":"773","severity":1,"message":"1061","line":334,"column":11,"nodeType":"775","messageId":"776","endLine":334,"endColumn":18},{"ruleId":"773","severity":1,"message":"1033","line":628,"column":9,"nodeType":"775","messageId":"776","endLine":628,"endColumn":28},{"ruleId":"815","severity":1,"message":"816","line":793,"column":18,"nodeType":"783","messageId":"817","endLine":793,"endColumn":20},{"ruleId":"815","severity":1,"message":"816","line":803,"column":18,"nodeType":"783","messageId":"817","endLine":803,"endColumn":20},{"ruleId":"815","severity":1,"message":"816","line":910,"column":14,"nodeType":"783","messageId":"817","endLine":910,"endColumn":16},{"ruleId":"799","severity":1,"message":"800","line":1021,"column":15,"nodeType":"801","endLine":1025,"endColumn":17},{"ruleId":"799","severity":1,"message":"800","line":1026,"column":15,"nodeType":"801","endLine":1026,"endColumn":80},{"ruleId":"799","severity":1,"message":"800","line":1043,"column":13,"nodeType":"801","endLine":1043,"endColumn":36},{"ruleId":"773","severity":1,"message":"788","line":4,"column":10,"nodeType":"775","messageId":"776","endLine":4,"endColumn":18},{"ruleId":"773","severity":1,"message":"934","line":10,"column":11,"nodeType":"775","messageId":"776","endLine":10,"endColumn":18},{"ruleId":"795","severity":1,"message":"829","line":12,"column":10,"nodeType":"797","endLine":12,"endColumn":36,"suggestions":"1062"},{"ruleId":"773","severity":1,"message":"1063","line":2,"column":15,"nodeType":"775","messageId":"776","endLine":2,"endColumn":18},{"ruleId":"799","severity":1,"message":"800","line":10,"column":7,"nodeType":"801","endLine":10,"endColumn":36},{"ruleId":"773","severity":1,"message":"832","line":2,"column":10,"nodeType":"775","messageId":"776","endLine":2,"endColumn":14},{"ruleId":"773","severity":1,"message":"1064","line":3,"column":8,"nodeType":"775","messageId":"776","endLine":3,"endColumn":12},{"ruleId":"773","severity":1,"message":"1065","line":4,"column":8,"nodeType":"775","messageId":"776","endLine":4,"endColumn":16},{"ruleId":"773","severity":1,"message":"1015","line":5,"column":10,"nodeType":"775","messageId":"776","endLine":5,"endColumn":13},{"ruleId":"773","severity":1,"message":"967","line":5,"column":27,"nodeType":"775","messageId":"776","endLine":5,"endColumn":33},{"ruleId":"773","severity":1,"message":"1066","line":5,"column":8,"nodeType":"775","messageId":"776","endLine":5,"endColumn":16},{"ruleId":"773","severity":1,"message":"1067","line":6,"column":8,"nodeType":"775","messageId":"776","endLine":6,"endColumn":15},{"ruleId":"773","severity":1,"message":"1068","line":26,"column":8,"nodeType":"775","messageId":"776","endLine":26,"endColumn":20},{"ruleId":"773","severity":1,"message":"1069","line":45,"column":10,"nodeType":"775","messageId":"776","endLine":45,"endColumn":24},{"ruleId":"795","severity":1,"message":"829","line":92,"column":6,"nodeType":"797","endLine":92,"endColumn":37,"suggestions":"1070"},{"ruleId":"815","severity":1,"message":"816","line":410,"column":29,"nodeType":"783","messageId":"817","endLine":410,"endColumn":31},{"ruleId":"799","severity":1,"message":"800","line":829,"column":29,"nodeType":"801","endLine":829,"endColumn":79},{"ruleId":"799","severity":1,"message":"800","line":839,"column":25,"nodeType":"801","endLine":842,"endColumn":27},{"ruleId":"799","severity":1,"message":"800","line":843,"column":25,"nodeType":"801","endLine":846,"endColumn":27},"no-native-reassign",["1071"],"no-negated-in-lhs",["1072"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'Confirmation' is defined but never used.","'useSelector' is defined but never used.","'chain' is assigned a value but never used.","'addChain' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'Redirect' is defined but never used.","'Referral' is defined but never used.","'AddLiquidity' is defined but never used.","'rootName' is defined but never used.","'PoolGalaxy' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","'UserService' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'addListeners', 'dispatch', and 'walletType'. Either include them or remove the dependency array.","ArrayExpression",["1073"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useEffect' is defined but never used.","'Docs' is defined but never used.","'Medium' is defined but never used.","'Github' is defined but never used.","'Globe' is defined but never used.","'ANCHOR_BUSD_LP' is defined but never used.","'AUDIT' is defined but never used.","'DOCS' is defined but never used.","'INSURANCE_FUND' is defined but never used.","'LOTTERY' is defined but never used.","'NIOB_SHARING' is defined but never used.","'PREDICTION_TRAINING' is defined but never used.","'TRADING_FEE_CASHBACK' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","unexpected","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","noTargetBlankWithoutNoreferrer",{"range":"1074","text":"1075"},{"range":"1076","text":"1075"},{"range":"1077","text":"1075"},"'useState' is defined but never used.","'MetaMask' is defined but never used.","'addCommas' is defined but never used.","'footerValues' is assigned a value but never used.","'FormControl' is defined but never used.","React Hook useEffect has a missing dependency: 'init'. Either include it or remove the dependency array.",["1078"],"'Form' is defined but never used.","'Link' is defined but never used.","'CopyToClipboard' is defined but never used.","'Reflink' is defined but never used.","'Twitter' is defined but never used.","'Telegram' is defined but never used.","'Loader' is defined but never used.","'Timer' is defined but never used.","'stakingContract' is assigned a value but never used.","'transactionNo' is assigned a value but never used.","'timerDays' is assigned a value but never used.","'setTimerDays' is assigned a value but never used.","'timerHours' is assigned a value but never used.","'setTimerHours' is assigned a value but never used.","'timerMinutes' is assigned a value but never used.","'setTimerMinutes' is assigned a value but never used.","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has missing dependencies: 'isTheUserConnected' and 'totalSeconds'. Either include them or remove the dependency array.",["1079"],"'seconds' is assigned a value but never used.","'result' is assigned a value but never used.","'NIOB' is defined but never used.","'BUSD' is defined but never used.","'ANCHOR' is defined but never used.","'BTCB' is defined but never used.","'Statement' is defined but never used.","'BURN_ADDRESS' is defined but never used.","'addTransaction' is defined but never used.","'potDetails' is assigned a value but never used.","'setPotDetails' is assigned a value but never used.","'rewards' is assigned a value but never used.","'seRewards' is assigned a value but never used.","'transferTaxRate' is assigned a value but never used.","'setTransferTaxRate' is assigned a value but never used.","'walletShow' is assigned a value but never used.","'setWalletShow' is assigned a value but never used.","'poolLength' is assigned a value but never used.","'farms' is assigned a value but never used.","'setFarms' is assigned a value but never used.","'inactiveFarms' is assigned a value but never used.","'setInactiveFarms' is assigned a value but never used.","'stakingOnly' is assigned a value but never used.","'setStakingOnly' is assigned a value but never used.","'stakeData' is assigned a value but never used.","'setStakeData' is assigned a value but never used.","'stakeValue' is assigned a value but never used.","'setStakeValue' is assigned a value but never used.","'referrer' is assigned a value but never used.","'totalAmount' is assigned a value but never used.","'totalRewards' is assigned a value but never used.","'anchorBnbWorth' is assigned a value but never used.","'setAnchorBnbWorth' is assigned a value but never used.","'anchorBusdWorth' is assigned a value but never used.","'setAnchorBusdWorth' is assigned a value but never used.","'tokenIds' is assigned a value but never used.","'setTokenIds' is assigned a value but never used.","'allowance' is assigned a value but never used.","'setAllowance' is assigned a value but never used.","'disable' is assigned a value but never used.","'setDisabledBUtton' is assigned a value but never used.","'IButton' is assigned a value but never used.","'setIButton' is assigned a value but never used.","'ticketWindow' is assigned a value but never used.","'openTicketWindow' is assigned a value but never used.","'ticketValue' is assigned a value but never used.","'setvalue' is assigned a value but never used.","'buyButton' is assigned a value but never used.","'setBuyButton' is assigned a value but never used.","'loader' is assigned a value but never used.","'setLoader' is assigned a value but never used.","'currentTicketsArray' is assigned a value but never used.","'setCurrentArray' is assigned a value but never used.","'showHarvest' is assigned a value but never used.","'harvest' is assigned a value but never used.","'stakeConfirmation' is assigned a value but never used.","'setStakeConfimation' is assigned a value but never used.","'showTransactionModal' is assigned a value but never used.","'setShowTransactionModal' is assigned a value but never used.","'txHash' is assigned a value but never used.","'setTxHash' is assigned a value but never used.","'niobApr' is assigned a value but never used.","Expected '!==' and instead saw '!='.","React Hook useEffect has missing dependencies: 'dispatch', 'init', and 'ref'. Either include them or remove the dependency array.",["1080"],"'tokenZeroPairUSDT' is assigned a value but never used.","'tokenOnePairUSDT' is assigned a value but never used.","'tokenZeroPairBNB' is assigned a value but never used.","'tokenOnePairBNB' is assigned a value but never used.",{"range":"1081","text":"1082"},{"range":"1083","text":"1075"},{"range":"1084","text":"1075"},"'colLiquidity' is assigned a value but never used.","'handleComponent' is assigned a value but never used.","'key' is assigned a value but never used.","'setKey' is assigned a value but never used.","'ConsoleView' is defined but never used.",["1085"],"'closeTransactionModal' is assigned a value but never used.","'r' is assigned a value but never used.","'acc' is assigned a value but never used.","'liquidity' is assigned a value but never used.","'TOKEN_LIST' is defined but never used.","'history' is assigned a value but never used.","'active' is assigned a value but never used.","'setActive' is assigned a value but never used.","'getSortedPools' is assigned a value but never used.",["1086"],"'activePoolsToSort' is assigned a value but never used.","'stakingOnlyArrayToSort' is assigned a value but never used.","'handleROIModal' is assigned a value but never used.","'searchTokenByNameOrAddress' is defined but never used.","'TransactionModal' is defined but never used.","'showAPY' is assigned a value but never used.","'roiModalData' is assigned a value but never used.","'lpDetails' is assigned a value but never used.","'selectedPairId' is assigned a value but never used.","'cloaseRoiModal' is assigned a value but never used.",["1087"],"'tkList' is assigned a value but never used.","'walletConnectProvider' is defined but never used.","no-unreachable","Unreachable code.","ExpressionStatement","unreachableCode","'value' is assigned a value but never used.","'WalletConnectProvider' is defined but never used.","'iconCoinbase' is defined but never used.","'TokenPocket' is defined but never used.","'TrustWallet' is defined but never used.","'Binance' is defined but never used.","'MathWallet' is defined but never used.","React Hook useEffect has a missing dependency: 'loginCall'. Either include it or remove the dependency array.",["1088"],"'is_visible' is assigned a value but never used.","'pid' is assigned a value but never used.","'Button' is defined but never used.","'recentTransactions' is assigned a value but never used.","'toast' is defined but never used.","'niobWithdrawable' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'init', 'props.isNiobWithdrawabe', and 'props?.stakeData?.isLocked'. Either include them or remove the dependency array.",["1089"],"'Table' is defined but never used.","'BNB_BUSD_LP' is defined but never used.","'defaultImg' is defined but never used.","'index' is assigned a value but never used.","'currentIndex' is assigned a value but never used.","'handleChange' is assigned a value but never used.","'handleRoiModal' is assigned a value but never used.","'totalSupply' is assigned a value but never used.","'roi' is assigned a value but never used.","'tokenStaked' is assigned a value but never used.","'handleDefaultIcon' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getSaitaDollarValue' and 'init'. Either include them or remove the dependency array.",["1090"],"'show' is assigned a value but never used.","'handleClose' is assigned a value but never used.","'handleShow' is assigned a value but never used.","'status' is assigned a value but never used.","'pantherAddress' is assigned a value but never used.","'dollarValue' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getAnchorDollarValue' and 'init'. Either include them or remove the dependency array.",["1091"],"'price' is assigned a value but never used.","use-isnan","Use the isNaN function to compare with NaN.","comparisonWithNaN","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'tokenBalance' is assigned a value but never used.","'data' is assigned a value but never used.","'startLoading' is defined but never used.","'stopLoading' is defined but never used.","'PersistActions' is defined but never used.","'state' is assigned a value but never used.","'BTC' is defined but never used.","'BNB' is defined but never used.","'ADA' is defined but never used.","'USDT' is defined but never used.","'POLKADOT' is defined but never used.","'TRON' is defined but never used.","'CAKE' is defined but never used.","'SHAMAN' is defined but never used.","'ETH1' is defined but never used.","'Col' is defined but never used.","'ConnectWallet' is defined but never used.","'ButtonPrimary' is defined but never used.","'SelectCoin' is defined but never used.","'Plusicon' is defined but never used.","'NIOBIcon' is defined but never used.","'BNBIcon' is defined but never used.","'MAIN_CONTRACT_LIST' is defined but never used.","'ContractServices' is defined but never used.","'checkUserLpTokens' is defined but never used.","'BigNumber' is defined but never used.","'SupplyModal' is defined but never used.","'RecentTransactions' is defined but never used.","'TokenBalance' is defined but never used.","'show1' is assigned a value but never used.","'handleClose1' is assigned a value but never used.","'handleShow1' is assigned a value but never used.","'showSettings' is assigned a value but never used.","'handleCloseSettings' is assigned a value but never used.","'handleCloseRecent' is assigned a value but never used.",["1092"],"'toggleDropdwon' is assigned a value but never used.","'isAdded' is assigned a value but never used.","'handleTokenList' is assigned a value but never used.","'handleRemoveTokenList' is assigned a value but never used.","'Tabs' is defined but never used.","'Tab' is defined but never used.","'SwitchIcon' is defined but never used.","'classToggle' is assigned a value but never used.","'setClassToggle' is assigned a value but never used.","'tokenOneApproved' is assigned a value but never used.","'tokenTwoApproved' is assigned a value but never used.","'lpTokenBalance' is assigned a value but never used.","'showSupplyModal' is assigned a value but never used.","'liquidityConfirmation' is assigned a value but never used.","'currentPairAddress' is assigned a value but never used.","'firstProvider' is assigned a value but never used.","'showPoolShare' is assigned a value but never used.","'slippageTolerance' is assigned a value but never used.","'setSlippageTolerance' is assigned a value but never used.","'existingPair' is assigned a value but never used.","'setPairAddress' is assigned a value but never used.",["1093"],"React Hook useEffect has missing dependencies: 'handleTokenValue' and 'tokenOneValue'. Either include them or remove the dependency array.",["1094"],"'pairOne' is assigned a value but never used.","'pairTwo' is assigned a value but never used.",["1095"],"'Row' is defined but never used.","'Card' is defined but never used.","'closeBtn' is defined but never used.","'NiobIcon' is defined but never used.","'BnbIcon' is defined but never used.","'iconDropDown' is defined but never used.","'sharePoolValue' is assigned a value but never used.",["1096"],"no-global-assign","no-unsafe-negation",{"desc":"1097","fix":"1098"},[9167,9167]," rel=\"noreferrer\"",[9449,9449],[9603,9603],{"desc":"1099","fix":"1100"},{"desc":"1101","fix":"1102"},{"desc":"1103","fix":"1104"},[20277,20289],"\"stylesheet noreferrer\"",[21406,21406],[22564,22564],{"desc":"1105","fix":"1106"},{"desc":"1107","fix":"1108"},{"desc":"1107","fix":"1109"},{"desc":"1110","fix":"1111"},{"desc":"1112","fix":"1113"},{"desc":"1114","fix":"1115"},{"desc":"1116","fix":"1117"},{"desc":"1107","fix":"1118"},{"desc":"1105","fix":"1119"},{"desc":"1120","fix":"1121"},{"desc":"1122","fix":"1123"},{"desc":"1124","fix":"1125"},"Update the dependencies array to be: [addListeners, dispatch, walletType]",{"range":"1126","text":"1127"},"Update the dependencies array to be: [init]",{"range":"1128","text":"1129"},"Update the dependencies array to be: [days, isTheUserConnected, totalSeconds]",{"range":"1130","text":"1131"},"Update the dependencies array to be: [dispatch, init, isUserConnected, ref]",{"range":"1132","text":"1133"},"Update the dependencies array to be: [init, search, tokenList]",{"range":"1134","text":"1135"},"Update the dependencies array to be: [init, isUserConnected]",{"range":"1136","text":"1137"},{"range":"1138","text":"1137"},"Update the dependencies array to be: [loginCall]",{"range":"1139","text":"1140"},"Update the dependencies array to be: [init, props.isNiobWithdrawabe, props?.stakeData?.isLocked]",{"range":"1141","text":"1142"},"Update the dependencies array to be: [getSaitaDollarValue, init, isUserConnected]",{"range":"1143","text":"1144"},"Update the dependencies array to be: [getAnchorDollarValue, init, isUserConnected]",{"range":"1145","text":"1146"},{"range":"1147","text":"1137"},{"range":"1148","text":"1135"},"Update the dependencies array to be: [tokenTwo, tokenTwoCurrency, tokenTwoBalance, tokenTwoIcon, tokenOneValue, handleTokenValue]",{"range":"1149","text":"1150"},"Update the dependencies array to be: [isUserConnected, address, init]",{"range":"1151","text":"1152"},"Update the dependencies array to be: [search, tokenList, props.show, init]",{"range":"1153","text":"1154"},[1173,1175],"[addListeners, dispatch, walletType]",[1140,1142],"[init]",[2934,2940],"[days, isTheUserConnected, totalSeconds]",[5000,5017],"[dispatch, init, isUserConnected, ref]",[4641,4660],"[init, search, tokenList]",[4535,4552],"[init, isUserConnected]",[3915,3932],[2756,2758],"[loginCall]",[523,525],"[init, props.isNiobWithdrawabe, props?.stakeData?.isLocked]",[16679,16696],"[getSaitaDollarValue, init, isUserConnected]",[2707,2724],"[getAnchorDollarValue, init, isUserConnected]",[2107,2124],[5422,5441],[5547,5606],"[tokenTwo, tokenTwoCurrency, tokenTwoBalance, tokenTwoIcon, tokenOneValue, handleTokenValue]",[392,418],"[isUserConnected, address, init]",[3964,3995],"[search, tokenList, props.show, init]"]